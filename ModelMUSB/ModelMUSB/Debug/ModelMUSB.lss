
ModelMUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046e0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000700  20070000  000846e0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000018c  20070700  00084de0  00010700  2**2
                  ALLOC
  3 .stack        00002004  2007088c  00084f6c  00010700  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010700  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010729  2**0
                  CONTENTS, READONLY
  6 .debug_info   000097b3  00000000  00000000  00010784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ddd  00000000  00000000  00019f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000948  00000000  00000000  0001bd14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  00018f9f  00000000  00000000  0001c65c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000e261  00000000  00000000  000355fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0006c5ab  00000000  00000000  0004385c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004a8a  00000000  00000000  000afe07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000840  00000000  00000000  000b4891  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000024a0  00000000  00000000  000b50d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072890 	.word	0x20072890
   80004:	00083a29 	.word	0x00083a29
   80008:	00083a21 	.word	0x00083a21
   8000c:	00083a21 	.word	0x00083a21
   80010:	00083a21 	.word	0x00083a21
   80014:	00083a21 	.word	0x00083a21
   80018:	00083a21 	.word	0x00083a21
	...
   8002c:	00083a21 	.word	0x00083a21
   80030:	00083a21 	.word	0x00083a21
   80034:	00000000 	.word	0x00000000
   80038:	00083a21 	.word	0x00083a21
   8003c:	00083a21 	.word	0x00083a21
   80040:	00083a21 	.word	0x00083a21
   80044:	00083a21 	.word	0x00083a21
   80048:	00083a21 	.word	0x00083a21
   8004c:	00083a21 	.word	0x00083a21
   80050:	00083a21 	.word	0x00083a21
   80054:	00083a21 	.word	0x00083a21
   80058:	00083a21 	.word	0x00083a21
   8005c:	00083a21 	.word	0x00083a21
   80060:	00083a21 	.word	0x00083a21
   80064:	00083a21 	.word	0x00083a21
   80068:	00000000 	.word	0x00000000
   8006c:	00083635 	.word	0x00083635
   80070:	0008364d 	.word	0x0008364d
   80074:	00083665 	.word	0x00083665
   80078:	0008367d 	.word	0x0008367d
	...
   80084:	00083a21 	.word	0x00083a21
   80088:	00083a21 	.word	0x00083a21
   8008c:	00083a21 	.word	0x00083a21
   80090:	00083a21 	.word	0x00083a21
   80094:	00083a21 	.word	0x00083a21
   80098:	00083a21 	.word	0x00083a21
   8009c:	00083a21 	.word	0x00083a21
   800a0:	00083a21 	.word	0x00083a21
   800a4:	00000000 	.word	0x00000000
   800a8:	00083a21 	.word	0x00083a21
   800ac:	00083a21 	.word	0x00083a21
   800b0:	00083a21 	.word	0x00083a21
   800b4:	00083a21 	.word	0x00083a21
   800b8:	00083a21 	.word	0x00083a21
   800bc:	00083a21 	.word	0x00083a21
   800c0:	00083a21 	.word	0x00083a21
   800c4:	00083a21 	.word	0x00083a21
   800c8:	00083a21 	.word	0x00083a21
   800cc:	00083a21 	.word	0x00083a21
   800d0:	00083a21 	.word	0x00083a21
   800d4:	00083a21 	.word	0x00083a21
   800d8:	00083a21 	.word	0x00083a21
   800dc:	00083a21 	.word	0x00083a21
   800e0:	0008131d 	.word	0x0008131d
   800e4:	00083a21 	.word	0x00083a21
   800e8:	00083a21 	.word	0x00083a21
   800ec:	00083a21 	.word	0x00083a21
   800f0:	00083a21 	.word	0x00083a21

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070700 	.word	0x20070700
   80110:	00000000 	.word	0x00000000
   80114:	000846e0 	.word	0x000846e0

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	000846e0 	.word	0x000846e0
   80144:	20070704 	.word	0x20070704
   80148:	000846e0 	.word	0x000846e0
   8014c:	00000000 	.word	0x00000000

00080150 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   80150:	b480      	push	{r7}
   80152:	b083      	sub	sp, #12
   80154:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80156:	f3ef 8310 	mrs	r3, PRIMASK
   8015a:	603b      	str	r3, [r7, #0]
  return(result);
   8015c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   8015e:	2b00      	cmp	r3, #0
   80160:	bf0c      	ite	eq
   80162:	2301      	moveq	r3, #1
   80164:	2300      	movne	r3, #0
   80166:	b2db      	uxtb	r3, r3
   80168:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8016a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8016c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80170:	4b04      	ldr	r3, [pc, #16]	; (80184 <cpu_irq_save+0x34>)
   80172:	2200      	movs	r2, #0
   80174:	701a      	strb	r2, [r3, #0]
	return flags;
   80176:	687b      	ldr	r3, [r7, #4]
}
   80178:	4618      	mov	r0, r3
   8017a:	370c      	adds	r7, #12
   8017c:	46bd      	mov	sp, r7
   8017e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80182:	4770      	bx	lr
   80184:	20070268 	.word	0x20070268

00080188 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   80188:	b480      	push	{r7}
   8018a:	b083      	sub	sp, #12
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
	return (flags);
   80190:	687b      	ldr	r3, [r7, #4]
   80192:	2b00      	cmp	r3, #0
   80194:	bf14      	ite	ne
   80196:	2301      	movne	r3, #1
   80198:	2300      	moveq	r3, #0
   8019a:	b2db      	uxtb	r3, r3
}
   8019c:	4618      	mov	r0, r3
   8019e:	370c      	adds	r7, #12
   801a0:	46bd      	mov	sp, r7
   801a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   801a6:	4770      	bx	lr

000801a8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   801a8:	b580      	push	{r7, lr}
   801aa:	b082      	sub	sp, #8
   801ac:	af00      	add	r7, sp, #0
   801ae:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   801b0:	6878      	ldr	r0, [r7, #4]
   801b2:	4b07      	ldr	r3, [pc, #28]	; (801d0 <cpu_irq_restore+0x28>)
   801b4:	4798      	blx	r3
   801b6:	4603      	mov	r3, r0
   801b8:	2b00      	cmp	r3, #0
   801ba:	d005      	beq.n	801c8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   801bc:	4b05      	ldr	r3, [pc, #20]	; (801d4 <cpu_irq_restore+0x2c>)
   801be:	2201      	movs	r2, #1
   801c0:	701a      	strb	r2, [r3, #0]
   801c2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   801c6:	b662      	cpsie	i
}
   801c8:	3708      	adds	r7, #8
   801ca:	46bd      	mov	sp, r7
   801cc:	bd80      	pop	{r7, pc}
   801ce:	bf00      	nop
   801d0:	00080189 	.word	0x00080189
   801d4:	20070268 	.word	0x20070268

000801d8 <udi_hid_kbd_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_kbd_enable(void)
{
   801d8:	b580      	push	{r7, lr}
   801da:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_kbd_rate = 0;
   801dc:	4b0a      	ldr	r3, [pc, #40]	; (80208 <udi_hid_kbd_enable+0x30>)
   801de:	2200      	movs	r2, #0
   801e0:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_protocol = 0;
   801e2:	4b0a      	ldr	r3, [pc, #40]	; (8020c <udi_hid_kbd_enable+0x34>)
   801e4:	2200      	movs	r2, #0
   801e6:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing = false;
   801e8:	4b09      	ldr	r3, [pc, #36]	; (80210 <udi_hid_kbd_enable+0x38>)
   801ea:	2200      	movs	r2, #0
   801ec:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
   801ee:	4809      	ldr	r0, [pc, #36]	; (80214 <udi_hid_kbd_enable+0x3c>)
   801f0:	2100      	movs	r1, #0
   801f2:	2208      	movs	r2, #8
   801f4:	4b08      	ldr	r3, [pc, #32]	; (80218 <udi_hid_kbd_enable+0x40>)
   801f6:	4798      	blx	r3
	udi_hid_kbd_b_report_valid = false;
   801f8:	4b08      	ldr	r3, [pc, #32]	; (8021c <udi_hid_kbd_enable+0x44>)
   801fa:	2200      	movs	r2, #0
   801fc:	701a      	strb	r2, [r3, #0]
	return UDI_HID_KBD_ENABLE_EXT();
   801fe:	4b08      	ldr	r3, [pc, #32]	; (80220 <udi_hid_kbd_enable+0x48>)
   80200:	4798      	blx	r3
   80202:	4603      	mov	r3, r0
}
   80204:	4618      	mov	r0, r3
   80206:	bd80      	pop	{r7, pc}
   80208:	2007071c 	.word	0x2007071c
   8020c:	20070720 	.word	0x20070720
   80210:	20070730 	.word	0x20070730
   80214:	20070728 	.word	0x20070728
   80218:	00084121 	.word	0x00084121
   8021c:	20070725 	.word	0x20070725
   80220:	00083e65 	.word	0x00083e65

00080224 <udi_hid_kbd_disable>:


void udi_hid_kbd_disable(void)
{
   80224:	b580      	push	{r7, lr}
   80226:	af00      	add	r7, sp, #0
	UDI_HID_KBD_DISABLE_EXT();
   80228:	4b01      	ldr	r3, [pc, #4]	; (80230 <udi_hid_kbd_disable+0xc>)
   8022a:	4798      	blx	r3
}
   8022c:	bd80      	pop	{r7, pc}
   8022e:	bf00      	nop
   80230:	00083e81 	.word	0x00083e81

00080234 <udi_hid_kbd_setup>:


bool udi_hid_kbd_setup(void)
{
   80234:	b598      	push	{r3, r4, r7, lr}
   80236:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_kbd_rate,
   80238:	4804      	ldr	r0, [pc, #16]	; (8024c <udi_hid_kbd_setup+0x18>)
   8023a:	4905      	ldr	r1, [pc, #20]	; (80250 <udi_hid_kbd_setup+0x1c>)
   8023c:	4a05      	ldr	r2, [pc, #20]	; (80254 <udi_hid_kbd_setup+0x20>)
   8023e:	4b06      	ldr	r3, [pc, #24]	; (80258 <udi_hid_kbd_setup+0x24>)
   80240:	4c06      	ldr	r4, [pc, #24]	; (8025c <udi_hid_kbd_setup+0x28>)
   80242:	47a0      	blx	r4
   80244:	4603      	mov	r3, r0
								&udi_hid_kbd_protocol,
								(uint8_t *) &udi_hid_kbd_report_desc,
								udi_hid_kbd_setreport);
}
   80246:	4618      	mov	r0, r3
   80248:	bd98      	pop	{r3, r4, r7, pc}
   8024a:	bf00      	nop
   8024c:	2007071c 	.word	0x2007071c
   80250:	20070720 	.word	0x20070720
   80254:	200701a0 	.word	0x200701a0
   80258:	00080271 	.word	0x00080271
   8025c:	00082ba9 	.word	0x00082ba9

00080260 <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
   80260:	b480      	push	{r7}
   80262:	af00      	add	r7, sp, #0
	return 0;
   80264:	2300      	movs	r3, #0
}
   80266:	4618      	mov	r0, r3
   80268:	46bd      	mov	sp, r7
   8026a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8026e:	4770      	bx	lr

00080270 <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
   80270:	b480      	push	{r7}
   80272:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
   80274:	4b10      	ldr	r3, [pc, #64]	; (802b8 <udi_hid_kbd_setreport+0x48>)
   80276:	885b      	ldrh	r3, [r3, #2]
   80278:	0a1b      	lsrs	r3, r3, #8
   8027a:	b29b      	uxth	r3, r3
   8027c:	2b02      	cmp	r3, #2
   8027e:	d114      	bne.n	802aa <udi_hid_kbd_setreport+0x3a>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
   80280:	4b0d      	ldr	r3, [pc, #52]	; (802b8 <udi_hid_kbd_setreport+0x48>)
   80282:	885b      	ldrh	r3, [r3, #2]
   80284:	b2db      	uxtb	r3, r3
   80286:	b29b      	uxth	r3, r3
   80288:	2b00      	cmp	r3, #0
   8028a:	d10e      	bne.n	802aa <udi_hid_kbd_setreport+0x3a>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
   8028c:	4b0a      	ldr	r3, [pc, #40]	; (802b8 <udi_hid_kbd_setreport+0x48>)
   8028e:	88db      	ldrh	r3, [r3, #6]
   80290:	2b01      	cmp	r3, #1
   80292:	d10a      	bne.n	802aa <udi_hid_kbd_setreport+0x3a>
		// Report OUT type on report ID 0 from USB Host
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
   80294:	4b08      	ldr	r3, [pc, #32]	; (802b8 <udi_hid_kbd_setreport+0x48>)
   80296:	4a09      	ldr	r2, [pc, #36]	; (802bc <udi_hid_kbd_setreport+0x4c>)
   80298:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
   8029a:	4b07      	ldr	r3, [pc, #28]	; (802b8 <udi_hid_kbd_setreport+0x48>)
   8029c:	4a08      	ldr	r2, [pc, #32]	; (802c0 <udi_hid_kbd_setreport+0x50>)
   8029e:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size = 1;
   802a0:	4b05      	ldr	r3, [pc, #20]	; (802b8 <udi_hid_kbd_setreport+0x48>)
   802a2:	2201      	movs	r2, #1
   802a4:	819a      	strh	r2, [r3, #12]
		return true;
   802a6:	2301      	movs	r3, #1
   802a8:	e000      	b.n	802ac <udi_hid_kbd_setreport+0x3c>
	}
	return false;
   802aa:	2300      	movs	r3, #0
}
   802ac:	4618      	mov	r0, r3
   802ae:	46bd      	mov	sp, r7
   802b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   802b4:	4770      	bx	lr
   802b6:	bf00      	nop
   802b8:	20070874 	.word	0x20070874
   802bc:	20070724 	.word	0x20070724
   802c0:	00080525 	.word	0x00080525

000802c4 <udi_hid_kbd_modifier_up>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_kbd_modifier_up(uint8_t modifier_id)
{
   802c4:	b580      	push	{r7, lr}
   802c6:	b084      	sub	sp, #16
   802c8:	af00      	add	r7, sp, #0
   802ca:	4603      	mov	r3, r0
   802cc:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags = cpu_irq_save();
   802ce:	4b0c      	ldr	r3, [pc, #48]	; (80300 <udi_hid_kbd_modifier_up+0x3c>)
   802d0:	4798      	blx	r3
   802d2:	60f8      	str	r0, [r7, #12]

	// Fill report
	udi_hid_kbd_report[0] &= ~(unsigned)modifier_id;
   802d4:	4b0b      	ldr	r3, [pc, #44]	; (80304 <udi_hid_kbd_modifier_up+0x40>)
   802d6:	781a      	ldrb	r2, [r3, #0]
   802d8:	79fb      	ldrb	r3, [r7, #7]
   802da:	43db      	mvns	r3, r3
   802dc:	b2db      	uxtb	r3, r3
   802de:	4013      	ands	r3, r2
   802e0:	b2da      	uxtb	r2, r3
   802e2:	4b08      	ldr	r3, [pc, #32]	; (80304 <udi_hid_kbd_modifier_up+0x40>)
   802e4:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_valid = true;
   802e6:	4b08      	ldr	r3, [pc, #32]	; (80308 <udi_hid_kbd_modifier_up+0x44>)
   802e8:	2201      	movs	r2, #1
   802ea:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
   802ec:	4b07      	ldr	r3, [pc, #28]	; (8030c <udi_hid_kbd_modifier_up+0x48>)
   802ee:	4798      	blx	r3

	cpu_irq_restore(flags);
   802f0:	68f8      	ldr	r0, [r7, #12]
   802f2:	4b07      	ldr	r3, [pc, #28]	; (80310 <udi_hid_kbd_modifier_up+0x4c>)
   802f4:	4798      	blx	r3
	return true;
   802f6:	2301      	movs	r3, #1
}
   802f8:	4618      	mov	r0, r3
   802fa:	3710      	adds	r7, #16
   802fc:	46bd      	mov	sp, r7
   802fe:	bd80      	pop	{r7, pc}
   80300:	00080151 	.word	0x00080151
   80304:	20070728 	.word	0x20070728
   80308:	20070725 	.word	0x20070725
   8030c:	00080491 	.word	0x00080491
   80310:	000801a9 	.word	0x000801a9

00080314 <udi_hid_kbd_modifier_down>:


bool udi_hid_kbd_modifier_down(uint8_t modifier_id)
{
   80314:	b580      	push	{r7, lr}
   80316:	b084      	sub	sp, #16
   80318:	af00      	add	r7, sp, #0
   8031a:	4603      	mov	r3, r0
   8031c:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags = cpu_irq_save();
   8031e:	4b0b      	ldr	r3, [pc, #44]	; (8034c <udi_hid_kbd_modifier_down+0x38>)
   80320:	4798      	blx	r3
   80322:	60f8      	str	r0, [r7, #12]

	// Fill report
	udi_hid_kbd_report[0] |= modifier_id;
   80324:	4b0a      	ldr	r3, [pc, #40]	; (80350 <udi_hid_kbd_modifier_down+0x3c>)
   80326:	781a      	ldrb	r2, [r3, #0]
   80328:	79fb      	ldrb	r3, [r7, #7]
   8032a:	4313      	orrs	r3, r2
   8032c:	b2da      	uxtb	r2, r3
   8032e:	4b08      	ldr	r3, [pc, #32]	; (80350 <udi_hid_kbd_modifier_down+0x3c>)
   80330:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_valid = true;
   80332:	4b08      	ldr	r3, [pc, #32]	; (80354 <udi_hid_kbd_modifier_down+0x40>)
   80334:	2201      	movs	r2, #1
   80336:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
   80338:	4b07      	ldr	r3, [pc, #28]	; (80358 <udi_hid_kbd_modifier_down+0x44>)
   8033a:	4798      	blx	r3

	cpu_irq_restore(flags);
   8033c:	68f8      	ldr	r0, [r7, #12]
   8033e:	4b07      	ldr	r3, [pc, #28]	; (8035c <udi_hid_kbd_modifier_down+0x48>)
   80340:	4798      	blx	r3
	return true;
   80342:	2301      	movs	r3, #1
}
   80344:	4618      	mov	r0, r3
   80346:	3710      	adds	r7, #16
   80348:	46bd      	mov	sp, r7
   8034a:	bd80      	pop	{r7, pc}
   8034c:	00080151 	.word	0x00080151
   80350:	20070728 	.word	0x20070728
   80354:	20070725 	.word	0x20070725
   80358:	00080491 	.word	0x00080491
   8035c:	000801a9 	.word	0x000801a9

00080360 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
   80360:	b580      	push	{r7, lr}
   80362:	b084      	sub	sp, #16
   80364:	af00      	add	r7, sp, #0
   80366:	4603      	mov	r3, r0
   80368:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	irqflags_t flags = cpu_irq_save();
   8036a:	4b21      	ldr	r3, [pc, #132]	; (803f0 <udi_hid_kbd_up+0x90>)
   8036c:	4798      	blx	r3
   8036e:	60b8      	str	r0, [r7, #8]

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
   80370:	2302      	movs	r3, #2
   80372:	73fb      	strb	r3, [r7, #15]
   80374:	e013      	b.n	8039e <udi_hid_kbd_up+0x3e>
		if (0 == udi_hid_kbd_report[i]) {
   80376:	7bfb      	ldrb	r3, [r7, #15]
   80378:	4a1e      	ldr	r2, [pc, #120]	; (803f4 <udi_hid_kbd_up+0x94>)
   8037a:	5cd3      	ldrb	r3, [r2, r3]
   8037c:	2b00      	cmp	r3, #0
   8037e:	d104      	bne.n	8038a <udi_hid_kbd_up+0x2a>
			// Already removed
			cpu_irq_restore(flags);
   80380:	68b8      	ldr	r0, [r7, #8]
   80382:	4b1d      	ldr	r3, [pc, #116]	; (803f8 <udi_hid_kbd_up+0x98>)
   80384:	4798      	blx	r3
			return true;
   80386:	2301      	movs	r3, #1
   80388:	e02e      	b.n	803e8 <udi_hid_kbd_up+0x88>
		}
		if (key_id == udi_hid_kbd_report[i])
   8038a:	7bfb      	ldrb	r3, [r7, #15]
   8038c:	4a19      	ldr	r2, [pc, #100]	; (803f4 <udi_hid_kbd_up+0x94>)
   8038e:	5cd3      	ldrb	r3, [r2, r3]
   80390:	79fa      	ldrb	r2, [r7, #7]
   80392:	429a      	cmp	r2, r3
   80394:	d100      	bne.n	80398 <udi_hid_kbd_up+0x38>
			break;
   80396:	e005      	b.n	803a4 <udi_hid_kbd_up+0x44>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
   80398:	7bfb      	ldrb	r3, [r7, #15]
   8039a:	3301      	adds	r3, #1
   8039c:	73fb      	strb	r3, [r7, #15]
   8039e:	7bfb      	ldrb	r3, [r7, #15]
   803a0:	2b07      	cmp	r3, #7
   803a2:	d9e8      	bls.n	80376 <udi_hid_kbd_up+0x16>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
   803a4:	7bfb      	ldrb	r3, [r7, #15]
   803a6:	2b08      	cmp	r3, #8
   803a8:	d104      	bne.n	803b4 <udi_hid_kbd_up+0x54>
		// Already removed
		cpu_irq_restore(flags);
   803aa:	68b8      	ldr	r0, [r7, #8]
   803ac:	4b12      	ldr	r3, [pc, #72]	; (803f8 <udi_hid_kbd_up+0x98>)
   803ae:	4798      	blx	r3
		return true;
   803b0:	2301      	movs	r3, #1
   803b2:	e019      	b.n	803e8 <udi_hid_kbd_up+0x88>
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
   803b4:	e009      	b.n	803ca <udi_hid_kbd_up+0x6a>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
   803b6:	7bfb      	ldrb	r3, [r7, #15]
   803b8:	7bfa      	ldrb	r2, [r7, #15]
   803ba:	3201      	adds	r2, #1
   803bc:	490d      	ldr	r1, [pc, #52]	; (803f4 <udi_hid_kbd_up+0x94>)
   803be:	5c89      	ldrb	r1, [r1, r2]
   803c0:	4a0c      	ldr	r2, [pc, #48]	; (803f4 <udi_hid_kbd_up+0x94>)
   803c2:	54d1      	strb	r1, [r2, r3]
		i++;
   803c4:	7bfb      	ldrb	r3, [r7, #15]
   803c6:	3301      	adds	r3, #1
   803c8:	73fb      	strb	r3, [r7, #15]
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
   803ca:	7bfb      	ldrb	r3, [r7, #15]
   803cc:	2b06      	cmp	r3, #6
   803ce:	d9f2      	bls.n	803b6 <udi_hid_kbd_up+0x56>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
   803d0:	4b08      	ldr	r3, [pc, #32]	; (803f4 <udi_hid_kbd_up+0x94>)
   803d2:	2200      	movs	r2, #0
   803d4:	71da      	strb	r2, [r3, #7]
	udi_hid_kbd_b_report_valid = true;
   803d6:	4b09      	ldr	r3, [pc, #36]	; (803fc <udi_hid_kbd_up+0x9c>)
   803d8:	2201      	movs	r2, #1
   803da:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
   803dc:	4b08      	ldr	r3, [pc, #32]	; (80400 <udi_hid_kbd_up+0xa0>)
   803de:	4798      	blx	r3

	cpu_irq_restore(flags);
   803e0:	68b8      	ldr	r0, [r7, #8]
   803e2:	4b05      	ldr	r3, [pc, #20]	; (803f8 <udi_hid_kbd_up+0x98>)
   803e4:	4798      	blx	r3
	return true;
   803e6:	2301      	movs	r3, #1
}
   803e8:	4618      	mov	r0, r3
   803ea:	3710      	adds	r7, #16
   803ec:	46bd      	mov	sp, r7
   803ee:	bd80      	pop	{r7, pc}
   803f0:	00080151 	.word	0x00080151
   803f4:	20070728 	.word	0x20070728
   803f8:	000801a9 	.word	0x000801a9
   803fc:	20070725 	.word	0x20070725
   80400:	00080491 	.word	0x00080491

00080404 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
   80404:	b580      	push	{r7, lr}
   80406:	b084      	sub	sp, #16
   80408:	af00      	add	r7, sp, #0
   8040a:	4603      	mov	r3, r0
   8040c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	irqflags_t flags = cpu_irq_save();
   8040e:	4b1b      	ldr	r3, [pc, #108]	; (8047c <udi_hid_kbd_down+0x78>)
   80410:	4798      	blx	r3
   80412:	60b8      	str	r0, [r7, #8]

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
   80414:	2302      	movs	r3, #2
   80416:	73fb      	strb	r3, [r7, #15]
   80418:	e013      	b.n	80442 <udi_hid_kbd_down+0x3e>
		if (0 == udi_hid_kbd_report[i])
   8041a:	7bfb      	ldrb	r3, [r7, #15]
   8041c:	4a18      	ldr	r2, [pc, #96]	; (80480 <udi_hid_kbd_down+0x7c>)
   8041e:	5cd3      	ldrb	r3, [r2, r3]
   80420:	2b00      	cmp	r3, #0
   80422:	d100      	bne.n	80426 <udi_hid_kbd_down+0x22>
			break;
   80424:	e010      	b.n	80448 <udi_hid_kbd_down+0x44>
		if (key_id == udi_hid_kbd_report[i]) {
   80426:	7bfb      	ldrb	r3, [r7, #15]
   80428:	4a15      	ldr	r2, [pc, #84]	; (80480 <udi_hid_kbd_down+0x7c>)
   8042a:	5cd3      	ldrb	r3, [r2, r3]
   8042c:	79fa      	ldrb	r2, [r7, #7]
   8042e:	429a      	cmp	r2, r3
   80430:	d104      	bne.n	8043c <udi_hid_kbd_down+0x38>
			// Already in array
			cpu_irq_restore(flags);
   80432:	68b8      	ldr	r0, [r7, #8]
   80434:	4b13      	ldr	r3, [pc, #76]	; (80484 <udi_hid_kbd_down+0x80>)
   80436:	4798      	blx	r3
			return true;
   80438:	2301      	movs	r3, #1
   8043a:	e01a      	b.n	80472 <udi_hid_kbd_down+0x6e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
   8043c:	7bfb      	ldrb	r3, [r7, #15]
   8043e:	3301      	adds	r3, #1
   80440:	73fb      	strb	r3, [r7, #15]
   80442:	7bfb      	ldrb	r3, [r7, #15]
   80444:	2b07      	cmp	r3, #7
   80446:	d9e8      	bls.n	8041a <udi_hid_kbd_down+0x16>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
   80448:	7bfb      	ldrb	r3, [r7, #15]
   8044a:	2b08      	cmp	r3, #8
   8044c:	d104      	bne.n	80458 <udi_hid_kbd_down+0x54>
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
   8044e:	68b8      	ldr	r0, [r7, #8]
   80450:	4b0c      	ldr	r3, [pc, #48]	; (80484 <udi_hid_kbd_down+0x80>)
   80452:	4798      	blx	r3
		return false;
   80454:	2300      	movs	r3, #0
   80456:	e00c      	b.n	80472 <udi_hid_kbd_down+0x6e>
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
   80458:	7bfb      	ldrb	r3, [r7, #15]
   8045a:	4909      	ldr	r1, [pc, #36]	; (80480 <udi_hid_kbd_down+0x7c>)
   8045c:	79fa      	ldrb	r2, [r7, #7]
   8045e:	54ca      	strb	r2, [r1, r3]
	udi_hid_kbd_b_report_valid = true;
   80460:	4b09      	ldr	r3, [pc, #36]	; (80488 <udi_hid_kbd_down+0x84>)
   80462:	2201      	movs	r2, #1
   80464:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
   80466:	4b09      	ldr	r3, [pc, #36]	; (8048c <udi_hid_kbd_down+0x88>)
   80468:	4798      	blx	r3

	// Enable IT
	cpu_irq_restore(flags);
   8046a:	68b8      	ldr	r0, [r7, #8]
   8046c:	4b05      	ldr	r3, [pc, #20]	; (80484 <udi_hid_kbd_down+0x80>)
   8046e:	4798      	blx	r3
	return true;
   80470:	2301      	movs	r3, #1
}
   80472:	4618      	mov	r0, r3
   80474:	3710      	adds	r7, #16
   80476:	46bd      	mov	sp, r7
   80478:	bd80      	pop	{r7, pc}
   8047a:	bf00      	nop
   8047c:	00080151 	.word	0x00080151
   80480:	20070728 	.word	0x20070728
   80484:	000801a9 	.word	0x000801a9
   80488:	20070725 	.word	0x20070725
   8048c:	00080491 	.word	0x00080491

00080490 <udi_hid_kbd_send_report>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
   80490:	b590      	push	{r4, r7, lr}
   80492:	b083      	sub	sp, #12
   80494:	af02      	add	r7, sp, #8
	if (udi_hid_kbd_b_report_trans_ongoing)
   80496:	4b10      	ldr	r3, [pc, #64]	; (804d8 <udi_hid_kbd_send_report+0x48>)
   80498:	781b      	ldrb	r3, [r3, #0]
   8049a:	2b00      	cmp	r3, #0
   8049c:	d001      	beq.n	804a2 <udi_hid_kbd_send_report+0x12>
		return false;
   8049e:	2300      	movs	r3, #0
   804a0:	e016      	b.n	804d0 <udi_hid_kbd_send_report+0x40>
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
   804a2:	4b0e      	ldr	r3, [pc, #56]	; (804dc <udi_hid_kbd_send_report+0x4c>)
   804a4:	4a0e      	ldr	r2, [pc, #56]	; (804e0 <udi_hid_kbd_send_report+0x50>)
   804a6:	e892 0003 	ldmia.w	r2, {r0, r1}
   804aa:	e883 0003 	stmia.w	r3, {r0, r1}
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
   804ae:	4b0d      	ldr	r3, [pc, #52]	; (804e4 <udi_hid_kbd_send_report+0x54>)
   804b0:	2200      	movs	r2, #0
   804b2:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing =
			udd_ep_run(	UDI_HID_KBD_EP_IN,
   804b4:	4b0c      	ldr	r3, [pc, #48]	; (804e8 <udi_hid_kbd_send_report+0x58>)
   804b6:	9300      	str	r3, [sp, #0]
   804b8:	2081      	movs	r0, #129	; 0x81
   804ba:	2100      	movs	r1, #0
   804bc:	4a07      	ldr	r2, [pc, #28]	; (804dc <udi_hid_kbd_send_report+0x4c>)
   804be:	2308      	movs	r3, #8
   804c0:	4c0a      	ldr	r4, [pc, #40]	; (804ec <udi_hid_kbd_send_report+0x5c>)
   804c2:	47a0      	blx	r4
   804c4:	4603      	mov	r3, r0
   804c6:	461a      	mov	r2, r3
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
	udi_hid_kbd_b_report_trans_ongoing =
   804c8:	4b03      	ldr	r3, [pc, #12]	; (804d8 <udi_hid_kbd_send_report+0x48>)
   804ca:	701a      	strb	r2, [r3, #0]
			udd_ep_run(	UDI_HID_KBD_EP_IN,
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
   804cc:	4b02      	ldr	r3, [pc, #8]	; (804d8 <udi_hid_kbd_send_report+0x48>)
   804ce:	781b      	ldrb	r3, [r3, #0]
}
   804d0:	4618      	mov	r0, r3
   804d2:	3704      	adds	r7, #4
   804d4:	46bd      	mov	sp, r7
   804d6:	bd90      	pop	{r4, r7, pc}
   804d8:	20070730 	.word	0x20070730
   804dc:	20070734 	.word	0x20070734
   804e0:	20070728 	.word	0x20070728
   804e4:	20070725 	.word	0x20070725
   804e8:	000804f1 	.word	0x000804f1
   804ec:	00081db9 	.word	0x00081db9

000804f0 <udi_hid_kbd_report_sent>:

static void udi_hid_kbd_report_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   804f0:	b580      	push	{r7, lr}
   804f2:	b082      	sub	sp, #8
   804f4:	af00      	add	r7, sp, #0
   804f6:	4603      	mov	r3, r0
   804f8:	6039      	str	r1, [r7, #0]
   804fa:	71fb      	strb	r3, [r7, #7]
   804fc:	4613      	mov	r3, r2
   804fe:	71bb      	strb	r3, [r7, #6]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_kbd_b_report_trans_ongoing = false;
   80500:	4b05      	ldr	r3, [pc, #20]	; (80518 <udi_hid_kbd_report_sent+0x28>)
   80502:	2200      	movs	r2, #0
   80504:	701a      	strb	r2, [r3, #0]
	if (udi_hid_kbd_b_report_valid) {
   80506:	4b05      	ldr	r3, [pc, #20]	; (8051c <udi_hid_kbd_report_sent+0x2c>)
   80508:	781b      	ldrb	r3, [r3, #0]
   8050a:	2b00      	cmp	r3, #0
   8050c:	d001      	beq.n	80512 <udi_hid_kbd_report_sent+0x22>
		udi_hid_kbd_send_report();
   8050e:	4b04      	ldr	r3, [pc, #16]	; (80520 <udi_hid_kbd_report_sent+0x30>)
   80510:	4798      	blx	r3
	}
}
   80512:	3708      	adds	r7, #8
   80514:	46bd      	mov	sp, r7
   80516:	bd80      	pop	{r7, pc}
   80518:	20070730 	.word	0x20070730
   8051c:	20070725 	.word	0x20070725
   80520:	00080491 	.word	0x00080491

00080524 <udi_hid_kbd_setreport_valid>:

static void udi_hid_kbd_setreport_valid(void)
{
   80524:	b480      	push	{r7}
   80526:	af00      	add	r7, sp, #0
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
}
   80528:	46bd      	mov	sp, r7
   8052a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8052e:	4770      	bx	lr

00080530 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
   80530:	b480      	push	{r7}
   80532:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
   80534:	4b02      	ldr	r3, [pc, #8]	; (80540 <udc_get_string_serial_name+0x10>)
	}
   80536:	4618      	mov	r0, r3
   80538:	46bd      	mov	sp, r7
   8053a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8053e:	4770      	bx	lr
   80540:	000842ac 	.word	0x000842ac

00080544 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   80544:	b480      	push	{r7}
   80546:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   80548:	4b03      	ldr	r3, [pc, #12]	; (80558 <udc_get_interface_desc+0x14>)
   8054a:	681b      	ldr	r3, [r3, #0]
}
   8054c:	4618      	mov	r0, r3
   8054e:	46bd      	mov	sp, r7
   80550:	f85d 7b04 	ldr.w	r7, [sp], #4
   80554:	4770      	bx	lr
   80556:	bf00      	nop
   80558:	2007074c 	.word	0x2007074c

0008055c <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   8055c:	b480      	push	{r7}
   8055e:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   80560:	4b06      	ldr	r3, [pc, #24]	; (8057c <udc_get_eof_conf+0x20>)
   80562:	681b      	ldr	r3, [r3, #0]
   80564:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80566:	4a05      	ldr	r2, [pc, #20]	; (8057c <udc_get_eof_conf+0x20>)
   80568:	6812      	ldr	r2, [r2, #0]
   8056a:	6812      	ldr	r2, [r2, #0]
   8056c:	8852      	ldrh	r2, [r2, #2]
   8056e:	b292      	uxth	r2, r2
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80570:	4413      	add	r3, r2
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
   80572:	4618      	mov	r0, r3
   80574:	46bd      	mov	sp, r7
   80576:	f85d 7b04 	ldr.w	r7, [sp], #4
   8057a:	4770      	bx	lr
   8057c:	20070748 	.word	0x20070748

00080580 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   80580:	b580      	push	{r7, lr}
   80582:	b084      	sub	sp, #16
   80584:	af00      	add	r7, sp, #0
   80586:	6078      	str	r0, [r7, #4]
   80588:	460b      	mov	r3, r1
   8058a:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   8058c:	4b12      	ldr	r3, [pc, #72]	; (805d8 <udc_next_desc_in_iface+0x58>)
   8058e:	4798      	blx	r3
   80590:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   80592:	687b      	ldr	r3, [r7, #4]
   80594:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   80596:	461a      	mov	r2, r3
   80598:	687b      	ldr	r3, [r7, #4]
   8059a:	4413      	add	r3, r2
   8059c:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   8059e:	e011      	b.n	805c4 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   805a0:	687b      	ldr	r3, [r7, #4]
   805a2:	785b      	ldrb	r3, [r3, #1]
   805a4:	2b04      	cmp	r3, #4
   805a6:	d100      	bne.n	805aa <udc_next_desc_in_iface+0x2a>
			break; // End of global interface descriptor
   805a8:	e010      	b.n	805cc <udc_next_desc_in_iface+0x4c>
		}
		if (desc_id == desc->bDescriptorType) {
   805aa:	687b      	ldr	r3, [r7, #4]
   805ac:	785b      	ldrb	r3, [r3, #1]
   805ae:	78fa      	ldrb	r2, [r7, #3]
   805b0:	429a      	cmp	r2, r3
   805b2:	d101      	bne.n	805b8 <udc_next_desc_in_iface+0x38>
			return desc; // Specific descriptor found
   805b4:	687b      	ldr	r3, [r7, #4]
   805b6:	e00a      	b.n	805ce <udc_next_desc_in_iface+0x4e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   805b8:	687b      	ldr	r3, [r7, #4]
   805ba:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   805bc:	461a      	mov	r2, r3
   805be:	687b      	ldr	r3, [r7, #4]
   805c0:	4413      	add	r3, r2
   805c2:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   805c4:	68fa      	ldr	r2, [r7, #12]
   805c6:	687b      	ldr	r3, [r7, #4]
   805c8:	429a      	cmp	r2, r3
   805ca:	d8e9      	bhi.n	805a0 <udc_next_desc_in_iface+0x20>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   805cc:	2300      	movs	r3, #0
}
   805ce:	4618      	mov	r0, r3
   805d0:	3710      	adds	r7, #16
   805d2:	46bd      	mov	sp, r7
   805d4:	bd80      	pop	{r7, pc}
   805d6:	bf00      	nop
   805d8:	0008055d 	.word	0x0008055d

000805dc <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   805dc:	b580      	push	{r7, lr}
   805de:	b084      	sub	sp, #16
   805e0:	af00      	add	r7, sp, #0
   805e2:	4603      	mov	r3, r0
   805e4:	460a      	mov	r2, r1
   805e6:	71fb      	strb	r3, [r7, #7]
   805e8:	4613      	mov	r3, r2
   805ea:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   805ec:	4b1e      	ldr	r3, [pc, #120]	; (80668 <udc_update_iface_desc+0x8c>)
   805ee:	781b      	ldrb	r3, [r3, #0]
   805f0:	2b00      	cmp	r3, #0
   805f2:	d101      	bne.n	805f8 <udc_update_iface_desc+0x1c>
		return false;
   805f4:	2300      	movs	r3, #0
   805f6:	e032      	b.n	8065e <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   805f8:	4b1c      	ldr	r3, [pc, #112]	; (8066c <udc_update_iface_desc+0x90>)
   805fa:	681b      	ldr	r3, [r3, #0]
   805fc:	681b      	ldr	r3, [r3, #0]
   805fe:	791b      	ldrb	r3, [r3, #4]
   80600:	79fa      	ldrb	r2, [r7, #7]
   80602:	429a      	cmp	r2, r3
   80604:	d301      	bcc.n	8060a <udc_update_iface_desc+0x2e>
		return false;
   80606:	2300      	movs	r3, #0
   80608:	e029      	b.n	8065e <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   8060a:	4b18      	ldr	r3, [pc, #96]	; (8066c <udc_update_iface_desc+0x90>)
   8060c:	681b      	ldr	r3, [r3, #0]
   8060e:	681b      	ldr	r3, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80610:	4a17      	ldr	r2, [pc, #92]	; (80670 <udc_update_iface_desc+0x94>)
   80612:	6013      	str	r3, [r2, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   80614:	4b17      	ldr	r3, [pc, #92]	; (80674 <udc_update_iface_desc+0x98>)
   80616:	4798      	blx	r3
   80618:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   8061a:	e01a      	b.n	80652 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8061c:	4b14      	ldr	r3, [pc, #80]	; (80670 <udc_update_iface_desc+0x94>)
   8061e:	681b      	ldr	r3, [r3, #0]
   80620:	785b      	ldrb	r3, [r3, #1]
   80622:	2b04      	cmp	r3, #4
   80624:	d10d      	bne.n	80642 <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   80626:	4b12      	ldr	r3, [pc, #72]	; (80670 <udc_update_iface_desc+0x94>)
   80628:	681b      	ldr	r3, [r3, #0]
   8062a:	789b      	ldrb	r3, [r3, #2]
   8062c:	79fa      	ldrb	r2, [r7, #7]
   8062e:	429a      	cmp	r2, r3
   80630:	d107      	bne.n	80642 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   80632:	4b0f      	ldr	r3, [pc, #60]	; (80670 <udc_update_iface_desc+0x94>)
   80634:	681b      	ldr	r3, [r3, #0]
   80636:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   80638:	79ba      	ldrb	r2, [r7, #6]
   8063a:	429a      	cmp	r2, r3
   8063c:	d101      	bne.n	80642 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   8063e:	2301      	movs	r3, #1
   80640:	e00d      	b.n	8065e <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   80642:	4b0b      	ldr	r3, [pc, #44]	; (80670 <udc_update_iface_desc+0x94>)
   80644:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   80646:	4a0a      	ldr	r2, [pc, #40]	; (80670 <udc_update_iface_desc+0x94>)
   80648:	6812      	ldr	r2, [r2, #0]
   8064a:	7812      	ldrb	r2, [r2, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   8064c:	4413      	add	r3, r2
   8064e:	4a08      	ldr	r2, [pc, #32]	; (80670 <udc_update_iface_desc+0x94>)
   80650:	6013      	str	r3, [r2, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   80652:	4b07      	ldr	r3, [pc, #28]	; (80670 <udc_update_iface_desc+0x94>)
   80654:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   80656:	68fa      	ldr	r2, [r7, #12]
   80658:	429a      	cmp	r2, r3
   8065a:	d8df      	bhi.n	8061c <udc_update_iface_desc+0x40>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   8065c:	2300      	movs	r3, #0
}
   8065e:	4618      	mov	r0, r3
   80660:	3710      	adds	r7, #16
   80662:	46bd      	mov	sp, r7
   80664:	bd80      	pop	{r7, pc}
   80666:	bf00      	nop
   80668:	20070744 	.word	0x20070744
   8066c:	20070748 	.word	0x20070748
   80670:	2007074c 	.word	0x2007074c
   80674:	0008055d 	.word	0x0008055d

00080678 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   80678:	b580      	push	{r7, lr}
   8067a:	b084      	sub	sp, #16
   8067c:	af00      	add	r7, sp, #0
   8067e:	4603      	mov	r3, r0
   80680:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   80682:	79fb      	ldrb	r3, [r7, #7]
   80684:	4618      	mov	r0, r3
   80686:	2100      	movs	r1, #0
   80688:	4b1f      	ldr	r3, [pc, #124]	; (80708 <udc_iface_disable+0x90>)
   8068a:	4798      	blx	r3
   8068c:	4603      	mov	r3, r0
   8068e:	f083 0301 	eor.w	r3, r3, #1
   80692:	b2db      	uxtb	r3, r3
   80694:	2b00      	cmp	r3, #0
   80696:	d001      	beq.n	8069c <udc_iface_disable+0x24>
		return false;
   80698:	2300      	movs	r3, #0
   8069a:	e030      	b.n	806fe <udc_iface_disable+0x86>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8069c:	4b1b      	ldr	r3, [pc, #108]	; (8070c <udc_iface_disable+0x94>)
   8069e:	681b      	ldr	r3, [r3, #0]
   806a0:	685a      	ldr	r2, [r3, #4]
   806a2:	79fb      	ldrb	r3, [r7, #7]
   806a4:	009b      	lsls	r3, r3, #2
   806a6:	4413      	add	r3, r2
   806a8:	681b      	ldr	r3, [r3, #0]
   806aa:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   806ac:	68bb      	ldr	r3, [r7, #8]
   806ae:	68db      	ldr	r3, [r3, #12]
   806b0:	4798      	blx	r3
   806b2:	4603      	mov	r3, r0
   806b4:	461a      	mov	r2, r3
   806b6:	79fb      	ldrb	r3, [r7, #7]
   806b8:	4618      	mov	r0, r3
   806ba:	4611      	mov	r1, r2
   806bc:	4b12      	ldr	r3, [pc, #72]	; (80708 <udc_iface_disable+0x90>)
   806be:	4798      	blx	r3
   806c0:	4603      	mov	r3, r0
   806c2:	f083 0301 	eor.w	r3, r3, #1
   806c6:	b2db      	uxtb	r3, r3
   806c8:	2b00      	cmp	r3, #0
   806ca:	d001      	beq.n	806d0 <udc_iface_disable+0x58>
		return false;
   806cc:	2300      	movs	r3, #0
   806ce:	e016      	b.n	806fe <udc_iface_disable+0x86>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   806d0:	4b0f      	ldr	r3, [pc, #60]	; (80710 <udc_iface_disable+0x98>)
   806d2:	681b      	ldr	r3, [r3, #0]
   806d4:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   806d6:	68f8      	ldr	r0, [r7, #12]
   806d8:	2105      	movs	r1, #5
   806da:	4b0e      	ldr	r3, [pc, #56]	; (80714 <udc_iface_disable+0x9c>)
   806dc:	4798      	blx	r3
   806de:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   806e0:	68fb      	ldr	r3, [r7, #12]
   806e2:	2b00      	cmp	r3, #0
   806e4:	d105      	bne.n	806f2 <udc_iface_disable+0x7a>
				break;
   806e6:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   806e8:	68bb      	ldr	r3, [r7, #8]
   806ea:	685b      	ldr	r3, [r3, #4]
   806ec:	4798      	blx	r3
	return true;
   806ee:	2301      	movs	r3, #1
   806f0:	e005      	b.n	806fe <udc_iface_disable+0x86>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   806f2:	68fb      	ldr	r3, [r7, #12]
   806f4:	789b      	ldrb	r3, [r3, #2]
   806f6:	4618      	mov	r0, r3
   806f8:	4b07      	ldr	r3, [pc, #28]	; (80718 <udc_iface_disable+0xa0>)
   806fa:	4798      	blx	r3
		}
   806fc:	e7eb      	b.n	806d6 <udc_iface_disable+0x5e>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
   806fe:	4618      	mov	r0, r3
   80700:	3710      	adds	r7, #16
   80702:	46bd      	mov	sp, r7
   80704:	bd80      	pop	{r7, pc}
   80706:	bf00      	nop
   80708:	000805dd 	.word	0x000805dd
   8070c:	20070748 	.word	0x20070748
   80710:	2007074c 	.word	0x2007074c
   80714:	00080581 	.word	0x00080581
   80718:	00081ac1 	.word	0x00081ac1

0008071c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   8071c:	b580      	push	{r7, lr}
   8071e:	b084      	sub	sp, #16
   80720:	af00      	add	r7, sp, #0
   80722:	4603      	mov	r3, r0
   80724:	460a      	mov	r2, r1
   80726:	71fb      	strb	r3, [r7, #7]
   80728:	4613      	mov	r3, r2
   8072a:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   8072c:	79fa      	ldrb	r2, [r7, #7]
   8072e:	79bb      	ldrb	r3, [r7, #6]
   80730:	4610      	mov	r0, r2
   80732:	4619      	mov	r1, r3
   80734:	4b1c      	ldr	r3, [pc, #112]	; (807a8 <udc_iface_enable+0x8c>)
   80736:	4798      	blx	r3
   80738:	4603      	mov	r3, r0
   8073a:	f083 0301 	eor.w	r3, r3, #1
   8073e:	b2db      	uxtb	r3, r3
   80740:	2b00      	cmp	r3, #0
   80742:	d001      	beq.n	80748 <udc_iface_enable+0x2c>
		return false;
   80744:	2300      	movs	r3, #0
   80746:	e02b      	b.n	807a0 <udc_iface_enable+0x84>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   80748:	4b18      	ldr	r3, [pc, #96]	; (807ac <udc_iface_enable+0x90>)
   8074a:	681b      	ldr	r3, [r3, #0]
   8074c:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8074e:	68f8      	ldr	r0, [r7, #12]
   80750:	2105      	movs	r1, #5
   80752:	4b17      	ldr	r3, [pc, #92]	; (807b0 <udc_iface_enable+0x94>)
   80754:	4798      	blx	r3
   80756:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   80758:	68fb      	ldr	r3, [r7, #12]
   8075a:	2b00      	cmp	r3, #0
   8075c:	d10b      	bne.n	80776 <udc_iface_enable+0x5a>
			break;
   8075e:	bf00      	nop
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   80760:	4b14      	ldr	r3, [pc, #80]	; (807b4 <udc_iface_enable+0x98>)
   80762:	681b      	ldr	r3, [r3, #0]
   80764:	685a      	ldr	r2, [r3, #4]
   80766:	79fb      	ldrb	r3, [r7, #7]
   80768:	009b      	lsls	r3, r3, #2
   8076a:	4413      	add	r3, r2
   8076c:	681b      	ldr	r3, [r3, #0]
   8076e:	681b      	ldr	r3, [r3, #0]
   80770:	4798      	blx	r3
   80772:	4603      	mov	r3, r0
   80774:	e014      	b.n	807a0 <udc_iface_enable+0x84>
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   80776:	68fb      	ldr	r3, [r7, #12]
   80778:	7899      	ldrb	r1, [r3, #2]
   8077a:	68fb      	ldr	r3, [r7, #12]
   8077c:	78da      	ldrb	r2, [r3, #3]
   8077e:	68fb      	ldr	r3, [r7, #12]
   80780:	889b      	ldrh	r3, [r3, #4]
   80782:	b29b      	uxth	r3, r3
   80784:	4608      	mov	r0, r1
   80786:	4611      	mov	r1, r2
   80788:	461a      	mov	r2, r3
   8078a:	4b0b      	ldr	r3, [pc, #44]	; (807b8 <udc_iface_enable+0x9c>)
   8078c:	4798      	blx	r3
   8078e:	4603      	mov	r3, r0
   80790:	f083 0301 	eor.w	r3, r3, #1
   80794:	b2db      	uxtb	r3, r3
   80796:	2b00      	cmp	r3, #0
   80798:	d001      	beq.n	8079e <udc_iface_enable+0x82>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   8079a:	2300      	movs	r3, #0
   8079c:	e000      	b.n	807a0 <udc_iface_enable+0x84>
		}
	}
   8079e:	e7d6      	b.n	8074e <udc_iface_enable+0x32>
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
   807a0:	4618      	mov	r0, r3
   807a2:	3710      	adds	r7, #16
   807a4:	46bd      	mov	sp, r7
   807a6:	bd80      	pop	{r7, pc}
   807a8:	000805dd 	.word	0x000805dd
   807ac:	2007074c 	.word	0x2007074c
   807b0:	00080581 	.word	0x00080581
   807b4:	20070748 	.word	0x20070748
   807b8:	000817c5 	.word	0x000817c5

000807bc <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   807bc:	b580      	push	{r7, lr}
   807be:	af00      	add	r7, sp, #0
	udd_enable();
   807c0:	4b01      	ldr	r3, [pc, #4]	; (807c8 <udc_start+0xc>)
   807c2:	4798      	blx	r3
}
   807c4:	bd80      	pop	{r7, pc}
   807c6:	bf00      	nop
   807c8:	000814f9 	.word	0x000814f9

000807cc <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   807cc:	b580      	push	{r7, lr}
   807ce:	b082      	sub	sp, #8
   807d0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   807d2:	4b0f      	ldr	r3, [pc, #60]	; (80810 <udc_reset+0x44>)
   807d4:	781b      	ldrb	r3, [r3, #0]
   807d6:	2b00      	cmp	r3, #0
   807d8:	d010      	beq.n	807fc <udc_reset+0x30>
		for (iface_num = 0;
   807da:	2300      	movs	r3, #0
   807dc:	71fb      	strb	r3, [r7, #7]
   807de:	e006      	b.n	807ee <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   807e0:	79fb      	ldrb	r3, [r7, #7]
   807e2:	4618      	mov	r0, r3
   807e4:	4b0b      	ldr	r3, [pc, #44]	; (80814 <udc_reset+0x48>)
   807e6:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   807e8:	79fb      	ldrb	r3, [r7, #7]
   807ea:	3301      	adds	r3, #1
   807ec:	71fb      	strb	r3, [r7, #7]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   807ee:	4b0a      	ldr	r3, [pc, #40]	; (80818 <udc_reset+0x4c>)
   807f0:	681b      	ldr	r3, [r3, #0]
   807f2:	681b      	ldr	r3, [r3, #0]
   807f4:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   807f6:	79fa      	ldrb	r2, [r7, #7]
   807f8:	429a      	cmp	r2, r3
   807fa:	d3f1      	bcc.n	807e0 <udc_reset+0x14>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   807fc:	4b04      	ldr	r3, [pc, #16]	; (80810 <udc_reset+0x44>)
   807fe:	2200      	movs	r2, #0
   80800:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   80802:	4b06      	ldr	r3, [pc, #24]	; (8081c <udc_reset+0x50>)
   80804:	2200      	movs	r2, #0
   80806:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   80808:	3708      	adds	r7, #8
   8080a:	46bd      	mov	sp, r7
   8080c:	bd80      	pop	{r7, pc}
   8080e:	bf00      	nop
   80810:	20070744 	.word	0x20070744
   80814:	00080679 	.word	0x00080679
   80818:	20070748 	.word	0x20070748
   8081c:	2007073c 	.word	0x2007073c

00080820 <udc_sof_notify>:

void udc_sof_notify(void)
{
   80820:	b580      	push	{r7, lr}
   80822:	b082      	sub	sp, #8
   80824:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   80826:	4b13      	ldr	r3, [pc, #76]	; (80874 <udc_sof_notify+0x54>)
   80828:	781b      	ldrb	r3, [r3, #0]
   8082a:	2b00      	cmp	r3, #0
   8082c:	d01f      	beq.n	8086e <udc_sof_notify+0x4e>
		for (iface_num = 0;
   8082e:	2300      	movs	r3, #0
   80830:	71fb      	strb	r3, [r7, #7]
   80832:	e015      	b.n	80860 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   80834:	4b10      	ldr	r3, [pc, #64]	; (80878 <udc_sof_notify+0x58>)
   80836:	681b      	ldr	r3, [r3, #0]
   80838:	685a      	ldr	r2, [r3, #4]
   8083a:	79fb      	ldrb	r3, [r7, #7]
   8083c:	009b      	lsls	r3, r3, #2
   8083e:	4413      	add	r3, r2
   80840:	681b      	ldr	r3, [r3, #0]
   80842:	691b      	ldr	r3, [r3, #16]
   80844:	2b00      	cmp	r3, #0
   80846:	d008      	beq.n	8085a <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   80848:	4b0b      	ldr	r3, [pc, #44]	; (80878 <udc_sof_notify+0x58>)
   8084a:	681b      	ldr	r3, [r3, #0]
   8084c:	685a      	ldr	r2, [r3, #4]
   8084e:	79fb      	ldrb	r3, [r7, #7]
   80850:	009b      	lsls	r3, r3, #2
   80852:	4413      	add	r3, r2
   80854:	681b      	ldr	r3, [r3, #0]
   80856:	691b      	ldr	r3, [r3, #16]
   80858:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   8085a:	79fb      	ldrb	r3, [r7, #7]
   8085c:	3301      	adds	r3, #1
   8085e:	71fb      	strb	r3, [r7, #7]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80860:	4b05      	ldr	r3, [pc, #20]	; (80878 <udc_sof_notify+0x58>)
   80862:	681b      	ldr	r3, [r3, #0]
   80864:	681b      	ldr	r3, [r3, #0]
   80866:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   80868:	79fa      	ldrb	r2, [r7, #7]
   8086a:	429a      	cmp	r2, r3
   8086c:	d3e2      	bcc.n	80834 <udc_sof_notify+0x14>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
   8086e:	3708      	adds	r7, #8
   80870:	46bd      	mov	sp, r7
   80872:	bd80      	pop	{r7, pc}
   80874:	20070744 	.word	0x20070744
   80878:	20070748 	.word	0x20070748

0008087c <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   8087c:	b580      	push	{r7, lr}
   8087e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   80880:	4b06      	ldr	r3, [pc, #24]	; (8089c <udc_req_std_dev_get_status+0x20>)
   80882:	88db      	ldrh	r3, [r3, #6]
   80884:	2b02      	cmp	r3, #2
   80886:	d001      	beq.n	8088c <udc_req_std_dev_get_status+0x10>
		return false;
   80888:	2300      	movs	r3, #0
   8088a:	e004      	b.n	80896 <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   8088c:	4804      	ldr	r0, [pc, #16]	; (808a0 <udc_req_std_dev_get_status+0x24>)
   8088e:	2102      	movs	r1, #2
   80890:	4b04      	ldr	r3, [pc, #16]	; (808a4 <udc_req_std_dev_get_status+0x28>)
   80892:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   80894:	2301      	movs	r3, #1
}
   80896:	4618      	mov	r0, r3
   80898:	bd80      	pop	{r7, pc}
   8089a:	bf00      	nop
   8089c:	20070874 	.word	0x20070874
   808a0:	2007073c 	.word	0x2007073c
   808a4:	0008179d 	.word	0x0008179d

000808a8 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   808a8:	b580      	push	{r7, lr}
   808aa:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   808ac:	4b0b      	ldr	r3, [pc, #44]	; (808dc <udc_req_std_ep_get_status+0x34>)
   808ae:	88db      	ldrh	r3, [r3, #6]
   808b0:	2b02      	cmp	r3, #2
   808b2:	d001      	beq.n	808b8 <udc_req_std_ep_get_status+0x10>
		return false;
   808b4:	2300      	movs	r3, #0
   808b6:	e00e      	b.n	808d6 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   808b8:	4b08      	ldr	r3, [pc, #32]	; (808dc <udc_req_std_ep_get_status+0x34>)
   808ba:	889b      	ldrh	r3, [r3, #4]
   808bc:	b2db      	uxtb	r3, r3
   808be:	4618      	mov	r0, r3
   808c0:	4b07      	ldr	r3, [pc, #28]	; (808e0 <udc_req_std_ep_get_status+0x38>)
   808c2:	4798      	blx	r3
   808c4:	4603      	mov	r3, r0
   808c6:	b29a      	uxth	r2, r3
   808c8:	4b06      	ldr	r3, [pc, #24]	; (808e4 <udc_req_std_ep_get_status+0x3c>)
   808ca:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   808cc:	4805      	ldr	r0, [pc, #20]	; (808e4 <udc_req_std_ep_get_status+0x3c>)
   808ce:	2102      	movs	r1, #2
   808d0:	4b05      	ldr	r3, [pc, #20]	; (808e8 <udc_req_std_ep_get_status+0x40>)
   808d2:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   808d4:	2301      	movs	r3, #1
}
   808d6:	4618      	mov	r0, r3
   808d8:	bd80      	pop	{r7, pc}
   808da:	bf00      	nop
   808dc:	20070874 	.word	0x20070874
   808e0:	00081b41 	.word	0x00081b41
   808e4:	20070750 	.word	0x20070750
   808e8:	0008179d 	.word	0x0008179d

000808ec <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   808ec:	b480      	push	{r7}
   808ee:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   808f0:	4b0c      	ldr	r3, [pc, #48]	; (80924 <udc_req_std_dev_clear_feature+0x38>)
   808f2:	88db      	ldrh	r3, [r3, #6]
   808f4:	2b00      	cmp	r3, #0
   808f6:	d001      	beq.n	808fc <udc_req_std_dev_clear_feature+0x10>
		return false;
   808f8:	2300      	movs	r3, #0
   808fa:	e00d      	b.n	80918 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   808fc:	4b09      	ldr	r3, [pc, #36]	; (80924 <udc_req_std_dev_clear_feature+0x38>)
   808fe:	885b      	ldrh	r3, [r3, #2]
   80900:	2b01      	cmp	r3, #1
   80902:	d108      	bne.n	80916 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   80904:	4b08      	ldr	r3, [pc, #32]	; (80928 <udc_req_std_dev_clear_feature+0x3c>)
   80906:	881b      	ldrh	r3, [r3, #0]
   80908:	f023 0302 	bic.w	r3, r3, #2
   8090c:	b29a      	uxth	r2, r3
   8090e:	4b06      	ldr	r3, [pc, #24]	; (80928 <udc_req_std_dev_clear_feature+0x3c>)
   80910:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   80912:	2301      	movs	r3, #1
   80914:	e000      	b.n	80918 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   80916:	2300      	movs	r3, #0
}
   80918:	4618      	mov	r0, r3
   8091a:	46bd      	mov	sp, r7
   8091c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80920:	4770      	bx	lr
   80922:	bf00      	nop
   80924:	20070874 	.word	0x20070874
   80928:	2007073c 	.word	0x2007073c

0008092c <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   8092c:	b580      	push	{r7, lr}
   8092e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   80930:	4b0a      	ldr	r3, [pc, #40]	; (8095c <udc_req_std_ep_clear_feature+0x30>)
   80932:	88db      	ldrh	r3, [r3, #6]
   80934:	2b00      	cmp	r3, #0
   80936:	d001      	beq.n	8093c <udc_req_std_ep_clear_feature+0x10>
		return false;
   80938:	2300      	movs	r3, #0
   8093a:	e00c      	b.n	80956 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8093c:	4b07      	ldr	r3, [pc, #28]	; (8095c <udc_req_std_ep_clear_feature+0x30>)
   8093e:	885b      	ldrh	r3, [r3, #2]
   80940:	2b00      	cmp	r3, #0
   80942:	d107      	bne.n	80954 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   80944:	4b05      	ldr	r3, [pc, #20]	; (8095c <udc_req_std_ep_clear_feature+0x30>)
   80946:	889b      	ldrh	r3, [r3, #4]
   80948:	b2db      	uxtb	r3, r3
   8094a:	4618      	mov	r0, r3
   8094c:	4b04      	ldr	r3, [pc, #16]	; (80960 <udc_req_std_ep_clear_feature+0x34>)
   8094e:	4798      	blx	r3
   80950:	4603      	mov	r3, r0
   80952:	e000      	b.n	80956 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   80954:	2300      	movs	r3, #0
}
   80956:	4618      	mov	r0, r3
   80958:	bd80      	pop	{r7, pc}
   8095a:	bf00      	nop
   8095c:	20070874 	.word	0x20070874
   80960:	00081c99 	.word	0x00081c99

00080964 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   80964:	b480      	push	{r7}
   80966:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   80968:	4b09      	ldr	r3, [pc, #36]	; (80990 <udc_req_std_dev_set_feature+0x2c>)
   8096a:	88db      	ldrh	r3, [r3, #6]
   8096c:	2b00      	cmp	r3, #0
   8096e:	d001      	beq.n	80974 <udc_req_std_dev_set_feature+0x10>
		return false;
   80970:	2300      	movs	r3, #0
   80972:	e007      	b.n	80984 <udc_req_std_dev_set_feature+0x20>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   80974:	4b06      	ldr	r3, [pc, #24]	; (80990 <udc_req_std_dev_set_feature+0x2c>)
   80976:	885b      	ldrh	r3, [r3, #2]
   80978:	2b01      	cmp	r3, #1
   8097a:	d002      	beq.n	80982 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
   8097c:	bf00      	nop
	}
	return false;
   8097e:	2300      	movs	r3, #0
   80980:	e000      	b.n	80984 <udc_req_std_dev_set_feature+0x20>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
   80982:	2300      	movs	r3, #0
#endif
	default:
		break;
	}
	return false;
}
   80984:	4618      	mov	r0, r3
   80986:	46bd      	mov	sp, r7
   80988:	f85d 7b04 	ldr.w	r7, [sp], #4
   8098c:	4770      	bx	lr
   8098e:	bf00      	nop
   80990:	20070874 	.word	0x20070874

00080994 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   80994:	b580      	push	{r7, lr}
   80996:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   80998:	4b0d      	ldr	r3, [pc, #52]	; (809d0 <udc_req_std_ep_set_feature+0x3c>)
   8099a:	88db      	ldrh	r3, [r3, #6]
   8099c:	2b00      	cmp	r3, #0
   8099e:	d001      	beq.n	809a4 <udc_req_std_ep_set_feature+0x10>
		return false;
   809a0:	2300      	movs	r3, #0
   809a2:	e012      	b.n	809ca <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   809a4:	4b0a      	ldr	r3, [pc, #40]	; (809d0 <udc_req_std_ep_set_feature+0x3c>)
   809a6:	885b      	ldrh	r3, [r3, #2]
   809a8:	2b00      	cmp	r3, #0
   809aa:	d10d      	bne.n	809c8 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   809ac:	4b08      	ldr	r3, [pc, #32]	; (809d0 <udc_req_std_ep_set_feature+0x3c>)
   809ae:	889b      	ldrh	r3, [r3, #4]
   809b0:	b2db      	uxtb	r3, r3
   809b2:	4618      	mov	r0, r3
   809b4:	4b07      	ldr	r3, [pc, #28]	; (809d4 <udc_req_std_ep_set_feature+0x40>)
   809b6:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   809b8:	4b05      	ldr	r3, [pc, #20]	; (809d0 <udc_req_std_ep_set_feature+0x3c>)
   809ba:	889b      	ldrh	r3, [r3, #4]
   809bc:	b2db      	uxtb	r3, r3
   809be:	4618      	mov	r0, r3
   809c0:	4b05      	ldr	r3, [pc, #20]	; (809d8 <udc_req_std_ep_set_feature+0x44>)
   809c2:	4798      	blx	r3
   809c4:	4603      	mov	r3, r0
   809c6:	e000      	b.n	809ca <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   809c8:	2300      	movs	r3, #0
}
   809ca:	4618      	mov	r0, r3
   809cc:	bd80      	pop	{r7, pc}
   809ce:	bf00      	nop
   809d0:	20070874 	.word	0x20070874
   809d4:	00081ec1 	.word	0x00081ec1
   809d8:	00081b7d 	.word	0x00081b7d

000809dc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   809dc:	b580      	push	{r7, lr}
   809de:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   809e0:	4b04      	ldr	r3, [pc, #16]	; (809f4 <udc_valid_address+0x18>)
   809e2:	885b      	ldrh	r3, [r3, #2]
   809e4:	b2db      	uxtb	r3, r3
   809e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   809ea:	b2db      	uxtb	r3, r3
   809ec:	4618      	mov	r0, r3
   809ee:	4b02      	ldr	r3, [pc, #8]	; (809f8 <udc_valid_address+0x1c>)
   809f0:	4798      	blx	r3
}
   809f2:	bd80      	pop	{r7, pc}
   809f4:	20070874 	.word	0x20070874
   809f8:	00081739 	.word	0x00081739

000809fc <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   809fc:	b480      	push	{r7}
   809fe:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   80a00:	4b07      	ldr	r3, [pc, #28]	; (80a20 <udc_req_std_dev_set_address+0x24>)
   80a02:	88db      	ldrh	r3, [r3, #6]
   80a04:	2b00      	cmp	r3, #0
   80a06:	d001      	beq.n	80a0c <udc_req_std_dev_set_address+0x10>
		return false;
   80a08:	2300      	movs	r3, #0
   80a0a:	e003      	b.n	80a14 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   80a0c:	4b04      	ldr	r3, [pc, #16]	; (80a20 <udc_req_std_dev_set_address+0x24>)
   80a0e:	4a05      	ldr	r2, [pc, #20]	; (80a24 <udc_req_std_dev_set_address+0x28>)
   80a10:	611a      	str	r2, [r3, #16]
	return true;
   80a12:	2301      	movs	r3, #1
}
   80a14:	4618      	mov	r0, r3
   80a16:	46bd      	mov	sp, r7
   80a18:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a1c:	4770      	bx	lr
   80a1e:	bf00      	nop
   80a20:	20070874 	.word	0x20070874
   80a24:	000809dd 	.word	0x000809dd

00080a28 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   80a28:	b580      	push	{r7, lr}
   80a2a:	b084      	sub	sp, #16
   80a2c:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   80a2e:	2300      	movs	r3, #0
   80a30:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   80a32:	4b29      	ldr	r3, [pc, #164]	; (80ad8 <udc_req_std_dev_get_str_desc+0xb0>)
   80a34:	885b      	ldrh	r3, [r3, #2]
   80a36:	b2db      	uxtb	r3, r3
   80a38:	2b03      	cmp	r3, #3
   80a3a:	d820      	bhi.n	80a7e <udc_req_std_dev_get_str_desc+0x56>
   80a3c:	a201      	add	r2, pc, #4	; (adr r2, 80a44 <udc_req_std_dev_get_str_desc+0x1c>)
   80a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80a42:	bf00      	nop
   80a44:	00080a55 	.word	0x00080a55
   80a48:	00080a5f 	.word	0x00080a5f
   80a4c:	00080a69 	.word	0x00080a69
   80a50:	00080a73 	.word	0x00080a73
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   80a54:	4821      	ldr	r0, [pc, #132]	; (80adc <udc_req_std_dev_get_str_desc+0xb4>)
   80a56:	2104      	movs	r1, #4
   80a58:	4b21      	ldr	r3, [pc, #132]	; (80ae0 <udc_req_std_dev_get_str_desc+0xb8>)
   80a5a:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   80a5c:	e011      	b.n	80a82 <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   80a5e:	230c      	movs	r3, #12
   80a60:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   80a62:	4b20      	ldr	r3, [pc, #128]	; (80ae4 <udc_req_std_dev_get_str_desc+0xbc>)
   80a64:	60bb      	str	r3, [r7, #8]
		break;
   80a66:	e00c      	b.n	80a82 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   80a68:	2309      	movs	r3, #9
   80a6a:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   80a6c:	4b1e      	ldr	r3, [pc, #120]	; (80ae8 <udc_req_std_dev_get_str_desc+0xc0>)
   80a6e:	60bb      	str	r3, [r7, #8]
		break;
   80a70:	e007      	b.n	80a82 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   80a72:	2304      	movs	r3, #4
   80a74:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   80a76:	4b1d      	ldr	r3, [pc, #116]	; (80aec <udc_req_std_dev_get_str_desc+0xc4>)
   80a78:	4798      	blx	r3
   80a7a:	60b8      	str	r0, [r7, #8]
		break;
   80a7c:	e001      	b.n	80a82 <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   80a7e:	2300      	movs	r3, #0
   80a80:	e026      	b.n	80ad0 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   80a82:	79fb      	ldrb	r3, [r7, #7]
   80a84:	2b00      	cmp	r3, #0
   80a86:	d022      	beq.n	80ace <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   80a88:	2300      	movs	r3, #0
   80a8a:	73fb      	strb	r3, [r7, #15]
   80a8c:	e00d      	b.n	80aaa <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   80a8e:	7bfb      	ldrb	r3, [r7, #15]
   80a90:	7bfa      	ldrb	r2, [r7, #15]
   80a92:	68b9      	ldr	r1, [r7, #8]
   80a94:	440a      	add	r2, r1
   80a96:	7812      	ldrb	r2, [r2, #0]
   80a98:	b291      	uxth	r1, r2
   80a9a:	4a15      	ldr	r2, [pc, #84]	; (80af0 <udc_req_std_dev_get_str_desc+0xc8>)
   80a9c:	005b      	lsls	r3, r3, #1
   80a9e:	4413      	add	r3, r2
   80aa0:	460a      	mov	r2, r1
   80aa2:	805a      	strh	r2, [r3, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   80aa4:	7bfb      	ldrb	r3, [r7, #15]
   80aa6:	3301      	adds	r3, #1
   80aa8:	73fb      	strb	r3, [r7, #15]
   80aaa:	7bfa      	ldrb	r2, [r7, #15]
   80aac:	79fb      	ldrb	r3, [r7, #7]
   80aae:	429a      	cmp	r2, r3
   80ab0:	d3ed      	bcc.n	80a8e <udc_req_std_dev_get_str_desc+0x66>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   80ab2:	79fb      	ldrb	r3, [r7, #7]
   80ab4:	3301      	adds	r3, #1
   80ab6:	b2db      	uxtb	r3, r3
   80ab8:	005b      	lsls	r3, r3, #1
   80aba:	b2da      	uxtb	r2, r3
   80abc:	4b0c      	ldr	r3, [pc, #48]	; (80af0 <udc_req_std_dev_get_str_desc+0xc8>)
   80abe:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   80ac0:	4b0b      	ldr	r3, [pc, #44]	; (80af0 <udc_req_std_dev_get_str_desc+0xc8>)
   80ac2:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
   80ac4:	b29b      	uxth	r3, r3
   80ac6:	480a      	ldr	r0, [pc, #40]	; (80af0 <udc_req_std_dev_get_str_desc+0xc8>)
   80ac8:	4619      	mov	r1, r3
   80aca:	4b05      	ldr	r3, [pc, #20]	; (80ae0 <udc_req_std_dev_get_str_desc+0xb8>)
   80acc:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
   80ace:	2301      	movs	r3, #1
}
   80ad0:	4618      	mov	r0, r3
   80ad2:	3710      	adds	r7, #16
   80ad4:	46bd      	mov	sp, r7
   80ad6:	bd80      	pop	{r7, pc}
   80ad8:	20070874 	.word	0x20070874
   80adc:	200701dc 	.word	0x200701dc
   80ae0:	0008179d 	.word	0x0008179d
   80ae4:	200701e0 	.word	0x200701e0
   80ae8:	200701f0 	.word	0x200701f0
   80aec:	00080531 	.word	0x00080531
   80af0:	200701fc 	.word	0x200701fc

00080af4 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
   80af4:	b580      	push	{r7, lr}
   80af6:	b082      	sub	sp, #8
   80af8:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   80afa:	4b42      	ldr	r3, [pc, #264]	; (80c04 <udc_req_std_dev_get_descriptor+0x110>)
   80afc:	885b      	ldrh	r3, [r3, #2]
   80afe:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   80b00:	4b40      	ldr	r3, [pc, #256]	; (80c04 <udc_req_std_dev_get_descriptor+0x110>)
   80b02:	885b      	ldrh	r3, [r3, #2]
   80b04:	0a1b      	lsrs	r3, r3, #8
   80b06:	b29b      	uxth	r3, r3
   80b08:	b2db      	uxtb	r3, r3
   80b0a:	3b01      	subs	r3, #1
   80b0c:	2b0e      	cmp	r3, #14
   80b0e:	d867      	bhi.n	80be0 <udc_req_std_dev_get_descriptor+0xec>
   80b10:	a201      	add	r2, pc, #4	; (adr r2, 80b18 <udc_req_std_dev_get_descriptor+0x24>)
   80b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b16:	bf00      	nop
   80b18:	00080b55 	.word	0x00080b55
   80b1c:	00080b6b 	.word	0x00080b6b
   80b20:	00080bcb 	.word	0x00080bcb
   80b24:	00080be1 	.word	0x00080be1
   80b28:	00080be1 	.word	0x00080be1
   80b2c:	00080be1 	.word	0x00080be1
   80b30:	00080be1 	.word	0x00080be1
   80b34:	00080be1 	.word	0x00080be1
   80b38:	00080be1 	.word	0x00080be1
   80b3c:	00080be1 	.word	0x00080be1
   80b40:	00080be1 	.word	0x00080be1
   80b44:	00080be1 	.word	0x00080be1
   80b48:	00080be1 	.word	0x00080be1
   80b4c:	00080be1 	.word	0x00080be1
   80b50:	00080ba9 	.word	0x00080ba9
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
   80b54:	4b2c      	ldr	r3, [pc, #176]	; (80c08 <udc_req_std_dev_get_descriptor+0x114>)
   80b56:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   80b58:	4b2b      	ldr	r3, [pc, #172]	; (80c08 <udc_req_std_dev_get_descriptor+0x114>)
   80b5a:	681b      	ldr	r3, [r3, #0]
   80b5c:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   80b5e:	b29b      	uxth	r3, r3
   80b60:	4610      	mov	r0, r2
   80b62:	4619      	mov	r1, r3
   80b64:	4b29      	ldr	r3, [pc, #164]	; (80c0c <udc_req_std_dev_get_descriptor+0x118>)
   80b66:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   80b68:	e03c      	b.n	80be4 <udc_req_std_dev_get_descriptor+0xf0>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   80b6a:	4b27      	ldr	r3, [pc, #156]	; (80c08 <udc_req_std_dev_get_descriptor+0x114>)
   80b6c:	681b      	ldr	r3, [r3, #0]
   80b6e:	7c5b      	ldrb	r3, [r3, #17]
   80b70:	79fa      	ldrb	r2, [r7, #7]
   80b72:	429a      	cmp	r2, r3
   80b74:	d301      	bcc.n	80b7a <udc_req_std_dev_get_descriptor+0x86>
					bNumConfigurations) {
				return false;
   80b76:	2300      	movs	r3, #0
   80b78:	e03f      	b.n	80bfa <udc_req_std_dev_get_descriptor+0x106>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   80b7a:	4b23      	ldr	r3, [pc, #140]	; (80c08 <udc_req_std_dev_get_descriptor+0x114>)
   80b7c:	685a      	ldr	r2, [r3, #4]
   80b7e:	79fb      	ldrb	r3, [r7, #7]
   80b80:	00db      	lsls	r3, r3, #3
   80b82:	4413      	add	r3, r2
   80b84:	6819      	ldr	r1, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   80b86:	4b20      	ldr	r3, [pc, #128]	; (80c08 <udc_req_std_dev_get_descriptor+0x114>)
   80b88:	685a      	ldr	r2, [r3, #4]
   80b8a:	79fb      	ldrb	r3, [r7, #7]
   80b8c:	00db      	lsls	r3, r3, #3
   80b8e:	4413      	add	r3, r2
   80b90:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   80b92:	885b      	ldrh	r3, [r3, #2]
   80b94:	b29b      	uxth	r3, r3
   80b96:	4608      	mov	r0, r1
   80b98:	4619      	mov	r1, r3
   80b9a:	4b1c      	ldr	r3, [pc, #112]	; (80c0c <udc_req_std_dev_get_descriptor+0x118>)
   80b9c:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   80b9e:	4b19      	ldr	r3, [pc, #100]	; (80c04 <udc_req_std_dev_get_descriptor+0x110>)
   80ba0:	689b      	ldr	r3, [r3, #8]
   80ba2:	2202      	movs	r2, #2
   80ba4:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   80ba6:	e01d      	b.n	80be4 <udc_req_std_dev_get_descriptor+0xf0>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   80ba8:	4b17      	ldr	r3, [pc, #92]	; (80c08 <udc_req_std_dev_get_descriptor+0x114>)
   80baa:	689b      	ldr	r3, [r3, #8]
   80bac:	2b00      	cmp	r3, #0
   80bae:	d101      	bne.n	80bb4 <udc_req_std_dev_get_descriptor+0xc0>
			return false;
   80bb0:	2300      	movs	r3, #0
   80bb2:	e022      	b.n	80bfa <udc_req_std_dev_get_descriptor+0x106>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   80bb4:	4b14      	ldr	r3, [pc, #80]	; (80c08 <udc_req_std_dev_get_descriptor+0x114>)
   80bb6:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
   80bb8:	4b13      	ldr	r3, [pc, #76]	; (80c08 <udc_req_std_dev_get_descriptor+0x114>)
   80bba:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   80bbc:	885b      	ldrh	r3, [r3, #2]
   80bbe:	b29b      	uxth	r3, r3
   80bc0:	4610      	mov	r0, r2
   80bc2:	4619      	mov	r1, r3
   80bc4:	4b11      	ldr	r3, [pc, #68]	; (80c0c <udc_req_std_dev_get_descriptor+0x118>)
   80bc6:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
   80bc8:	e00c      	b.n	80be4 <udc_req_std_dev_get_descriptor+0xf0>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   80bca:	4b11      	ldr	r3, [pc, #68]	; (80c10 <udc_req_std_dev_get_descriptor+0x11c>)
   80bcc:	4798      	blx	r3
   80bce:	4603      	mov	r3, r0
   80bd0:	f083 0301 	eor.w	r3, r3, #1
   80bd4:	b2db      	uxtb	r3, r3
   80bd6:	2b00      	cmp	r3, #0
   80bd8:	d001      	beq.n	80bde <udc_req_std_dev_get_descriptor+0xea>
			return false;
   80bda:	2300      	movs	r3, #0
   80bdc:	e00d      	b.n	80bfa <udc_req_std_dev_get_descriptor+0x106>
		}
		break;
   80bde:	e001      	b.n	80be4 <udc_req_std_dev_get_descriptor+0xf0>

	default:
		// Unknown descriptor requested
		return false;
   80be0:	2300      	movs	r3, #0
   80be2:	e00a      	b.n	80bfa <udc_req_std_dev_get_descriptor+0x106>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   80be4:	4b07      	ldr	r3, [pc, #28]	; (80c04 <udc_req_std_dev_get_descriptor+0x110>)
   80be6:	88da      	ldrh	r2, [r3, #6]
   80be8:	4b06      	ldr	r3, [pc, #24]	; (80c04 <udc_req_std_dev_get_descriptor+0x110>)
   80bea:	899b      	ldrh	r3, [r3, #12]
   80bec:	429a      	cmp	r2, r3
   80bee:	d203      	bcs.n	80bf8 <udc_req_std_dev_get_descriptor+0x104>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   80bf0:	4b04      	ldr	r3, [pc, #16]	; (80c04 <udc_req_std_dev_get_descriptor+0x110>)
   80bf2:	88da      	ldrh	r2, [r3, #6]
   80bf4:	4b03      	ldr	r3, [pc, #12]	; (80c04 <udc_req_std_dev_get_descriptor+0x110>)
   80bf6:	819a      	strh	r2, [r3, #12]
	}
	return true;
   80bf8:	2301      	movs	r3, #1
}
   80bfa:	4618      	mov	r0, r3
   80bfc:	3708      	adds	r7, #8
   80bfe:	46bd      	mov	sp, r7
   80c00:	bd80      	pop	{r7, pc}
   80c02:	bf00      	nop
   80c04:	20070874 	.word	0x20070874
   80c08:	2007025c 	.word	0x2007025c
   80c0c:	0008179d 	.word	0x0008179d
   80c10:	00080a29 	.word	0x00080a29

00080c14 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   80c14:	b580      	push	{r7, lr}
   80c16:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   80c18:	4b06      	ldr	r3, [pc, #24]	; (80c34 <udc_req_std_dev_get_configuration+0x20>)
   80c1a:	88db      	ldrh	r3, [r3, #6]
   80c1c:	2b01      	cmp	r3, #1
   80c1e:	d001      	beq.n	80c24 <udc_req_std_dev_get_configuration+0x10>
		return false;
   80c20:	2300      	movs	r3, #0
   80c22:	e004      	b.n	80c2e <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   80c24:	4804      	ldr	r0, [pc, #16]	; (80c38 <udc_req_std_dev_get_configuration+0x24>)
   80c26:	2101      	movs	r1, #1
   80c28:	4b04      	ldr	r3, [pc, #16]	; (80c3c <udc_req_std_dev_get_configuration+0x28>)
   80c2a:	4798      	blx	r3
	return true;
   80c2c:	2301      	movs	r3, #1
}
   80c2e:	4618      	mov	r0, r3
   80c30:	bd80      	pop	{r7, pc}
   80c32:	bf00      	nop
   80c34:	20070874 	.word	0x20070874
   80c38:	20070744 	.word	0x20070744
   80c3c:	0008179d 	.word	0x0008179d

00080c40 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   80c40:	b580      	push	{r7, lr}
   80c42:	b082      	sub	sp, #8
   80c44:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   80c46:	4b27      	ldr	r3, [pc, #156]	; (80ce4 <udc_req_std_dev_set_configuration+0xa4>)
   80c48:	88db      	ldrh	r3, [r3, #6]
   80c4a:	2b00      	cmp	r3, #0
   80c4c:	d001      	beq.n	80c52 <udc_req_std_dev_set_configuration+0x12>
		return false;
   80c4e:	2300      	movs	r3, #0
   80c50:	e043      	b.n	80cda <udc_req_std_dev_set_configuration+0x9a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   80c52:	4b25      	ldr	r3, [pc, #148]	; (80ce8 <udc_req_std_dev_set_configuration+0xa8>)
   80c54:	4798      	blx	r3
   80c56:	4603      	mov	r3, r0
   80c58:	2b00      	cmp	r3, #0
   80c5a:	d101      	bne.n	80c60 <udc_req_std_dev_set_configuration+0x20>
		return false;
   80c5c:	2300      	movs	r3, #0
   80c5e:	e03c      	b.n	80cda <udc_req_std_dev_set_configuration+0x9a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   80c60:	4b20      	ldr	r3, [pc, #128]	; (80ce4 <udc_req_std_dev_set_configuration+0xa4>)
   80c62:	885b      	ldrh	r3, [r3, #2]
   80c64:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   80c66:	4a21      	ldr	r2, [pc, #132]	; (80cec <udc_req_std_dev_set_configuration+0xac>)
   80c68:	6812      	ldr	r2, [r2, #0]
   80c6a:	7c52      	ldrb	r2, [r2, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   80c6c:	4293      	cmp	r3, r2
   80c6e:	dd01      	ble.n	80c74 <udc_req_std_dev_set_configuration+0x34>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
   80c70:	2300      	movs	r3, #0
   80c72:	e032      	b.n	80cda <udc_req_std_dev_set_configuration+0x9a>
		}
	}

	// Reset current configuration
	udc_reset();
   80c74:	4b1e      	ldr	r3, [pc, #120]	; (80cf0 <udc_req_std_dev_set_configuration+0xb0>)
   80c76:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   80c78:	4b1a      	ldr	r3, [pc, #104]	; (80ce4 <udc_req_std_dev_set_configuration+0xa4>)
   80c7a:	885b      	ldrh	r3, [r3, #2]
   80c7c:	b2da      	uxtb	r2, r3
   80c7e:	4b1d      	ldr	r3, [pc, #116]	; (80cf4 <udc_req_std_dev_set_configuration+0xb4>)
   80c80:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   80c82:	4b1c      	ldr	r3, [pc, #112]	; (80cf4 <udc_req_std_dev_set_configuration+0xb4>)
   80c84:	781b      	ldrb	r3, [r3, #0]
   80c86:	2b00      	cmp	r3, #0
   80c88:	d101      	bne.n	80c8e <udc_req_std_dev_set_configuration+0x4e>
		return true; // Default empty configuration requested
   80c8a:	2301      	movs	r3, #1
   80c8c:	e025      	b.n	80cda <udc_req_std_dev_set_configuration+0x9a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   80c8e:	4b17      	ldr	r3, [pc, #92]	; (80cec <udc_req_std_dev_set_configuration+0xac>)
   80c90:	685a      	ldr	r2, [r3, #4]
   80c92:	4b18      	ldr	r3, [pc, #96]	; (80cf4 <udc_req_std_dev_set_configuration+0xb4>)
   80c94:	781b      	ldrb	r3, [r3, #0]
   80c96:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   80c9a:	3b01      	subs	r3, #1
   80c9c:	00db      	lsls	r3, r3, #3
   80c9e:	4413      	add	r3, r2
   80ca0:	4a15      	ldr	r2, [pc, #84]	; (80cf8 <udc_req_std_dev_set_configuration+0xb8>)
   80ca2:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80ca4:	2300      	movs	r3, #0
   80ca6:	71fb      	strb	r3, [r7, #7]
   80ca8:	e00f      	b.n	80cca <udc_req_std_dev_set_configuration+0x8a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   80caa:	79fb      	ldrb	r3, [r7, #7]
   80cac:	4618      	mov	r0, r3
   80cae:	2100      	movs	r1, #0
   80cb0:	4b12      	ldr	r3, [pc, #72]	; (80cfc <udc_req_std_dev_set_configuration+0xbc>)
   80cb2:	4798      	blx	r3
   80cb4:	4603      	mov	r3, r0
   80cb6:	f083 0301 	eor.w	r3, r3, #1
   80cba:	b2db      	uxtb	r3, r3
   80cbc:	2b00      	cmp	r3, #0
   80cbe:	d001      	beq.n	80cc4 <udc_req_std_dev_set_configuration+0x84>
			return false;
   80cc0:	2300      	movs	r3, #0
   80cc2:	e00a      	b.n	80cda <udc_req_std_dev_set_configuration+0x9a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   80cc4:	79fb      	ldrb	r3, [r7, #7]
   80cc6:	3301      	adds	r3, #1
   80cc8:	71fb      	strb	r3, [r7, #7]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80cca:	4b0b      	ldr	r3, [pc, #44]	; (80cf8 <udc_req_std_dev_set_configuration+0xb8>)
   80ccc:	681b      	ldr	r3, [r3, #0]
   80cce:	681b      	ldr	r3, [r3, #0]
   80cd0:	791b      	ldrb	r3, [r3, #4]
   80cd2:	79fa      	ldrb	r2, [r7, #7]
   80cd4:	429a      	cmp	r2, r3
   80cd6:	d3e8      	bcc.n	80caa <udc_req_std_dev_set_configuration+0x6a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   80cd8:	2301      	movs	r3, #1
}
   80cda:	4618      	mov	r0, r3
   80cdc:	3708      	adds	r7, #8
   80cde:	46bd      	mov	sp, r7
   80ce0:	bd80      	pop	{r7, pc}
   80ce2:	bf00      	nop
   80ce4:	20070874 	.word	0x20070874
   80ce8:	0008177d 	.word	0x0008177d
   80cec:	2007025c 	.word	0x2007025c
   80cf0:	000807cd 	.word	0x000807cd
   80cf4:	20070744 	.word	0x20070744
   80cf8:	20070748 	.word	0x20070748
   80cfc:	0008071d 	.word	0x0008071d

00080d00 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   80d00:	b580      	push	{r7, lr}
   80d02:	b082      	sub	sp, #8
   80d04:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   80d06:	4b1e      	ldr	r3, [pc, #120]	; (80d80 <udc_req_std_iface_get_setting+0x80>)
   80d08:	88db      	ldrh	r3, [r3, #6]
   80d0a:	2b01      	cmp	r3, #1
   80d0c:	d001      	beq.n	80d12 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   80d0e:	2300      	movs	r3, #0
   80d10:	e032      	b.n	80d78 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   80d12:	4b1c      	ldr	r3, [pc, #112]	; (80d84 <udc_req_std_iface_get_setting+0x84>)
   80d14:	781b      	ldrb	r3, [r3, #0]
   80d16:	2b00      	cmp	r3, #0
   80d18:	d101      	bne.n	80d1e <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   80d1a:	2300      	movs	r3, #0
   80d1c:	e02c      	b.n	80d78 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80d1e:	4b18      	ldr	r3, [pc, #96]	; (80d80 <udc_req_std_iface_get_setting+0x80>)
   80d20:	889b      	ldrh	r3, [r3, #4]
   80d22:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80d24:	4b18      	ldr	r3, [pc, #96]	; (80d88 <udc_req_std_iface_get_setting+0x88>)
   80d26:	681b      	ldr	r3, [r3, #0]
   80d28:	681b      	ldr	r3, [r3, #0]
   80d2a:	791b      	ldrb	r3, [r3, #4]
   80d2c:	79fa      	ldrb	r2, [r7, #7]
   80d2e:	429a      	cmp	r2, r3
   80d30:	d301      	bcc.n	80d36 <udc_req_std_iface_get_setting+0x36>
		return false;
   80d32:	2300      	movs	r3, #0
   80d34:	e020      	b.n	80d78 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   80d36:	79fb      	ldrb	r3, [r7, #7]
   80d38:	4618      	mov	r0, r3
   80d3a:	2100      	movs	r1, #0
   80d3c:	4b13      	ldr	r3, [pc, #76]	; (80d8c <udc_req_std_iface_get_setting+0x8c>)
   80d3e:	4798      	blx	r3
   80d40:	4603      	mov	r3, r0
   80d42:	f083 0301 	eor.w	r3, r3, #1
   80d46:	b2db      	uxtb	r3, r3
   80d48:	2b00      	cmp	r3, #0
   80d4a:	d001      	beq.n	80d50 <udc_req_std_iface_get_setting+0x50>
		return false;
   80d4c:	2300      	movs	r3, #0
   80d4e:	e013      	b.n	80d78 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80d50:	4b0d      	ldr	r3, [pc, #52]	; (80d88 <udc_req_std_iface_get_setting+0x88>)
   80d52:	681b      	ldr	r3, [r3, #0]
   80d54:	685a      	ldr	r2, [r3, #4]
   80d56:	79fb      	ldrb	r3, [r7, #7]
   80d58:	009b      	lsls	r3, r3, #2
   80d5a:	4413      	add	r3, r2
   80d5c:	681b      	ldr	r3, [r3, #0]
   80d5e:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   80d60:	683b      	ldr	r3, [r7, #0]
   80d62:	68db      	ldr	r3, [r3, #12]
   80d64:	4798      	blx	r3
   80d66:	4603      	mov	r3, r0
   80d68:	461a      	mov	r2, r3
   80d6a:	4b09      	ldr	r3, [pc, #36]	; (80d90 <udc_req_std_iface_get_setting+0x90>)
   80d6c:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   80d6e:	4808      	ldr	r0, [pc, #32]	; (80d90 <udc_req_std_iface_get_setting+0x90>)
   80d70:	2101      	movs	r1, #1
   80d72:	4b08      	ldr	r3, [pc, #32]	; (80d94 <udc_req_std_iface_get_setting+0x94>)
   80d74:	4798      	blx	r3
	return true;
   80d76:	2301      	movs	r3, #1
}
   80d78:	4618      	mov	r0, r3
   80d7a:	3708      	adds	r7, #8
   80d7c:	46bd      	mov	sp, r7
   80d7e:	bd80      	pop	{r7, pc}
   80d80:	20070874 	.word	0x20070874
   80d84:	20070744 	.word	0x20070744
   80d88:	20070748 	.word	0x20070748
   80d8c:	000805dd 	.word	0x000805dd
   80d90:	20070740 	.word	0x20070740
   80d94:	0008179d 	.word	0x0008179d

00080d98 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   80d98:	b580      	push	{r7, lr}
   80d9a:	b082      	sub	sp, #8
   80d9c:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   80d9e:	4b14      	ldr	r3, [pc, #80]	; (80df0 <udc_req_std_iface_set_setting+0x58>)
   80da0:	88db      	ldrh	r3, [r3, #6]
   80da2:	2b00      	cmp	r3, #0
   80da4:	d001      	beq.n	80daa <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   80da6:	2300      	movs	r3, #0
   80da8:	e01e      	b.n	80de8 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   80daa:	4b12      	ldr	r3, [pc, #72]	; (80df4 <udc_req_std_iface_set_setting+0x5c>)
   80dac:	781b      	ldrb	r3, [r3, #0]
   80dae:	2b00      	cmp	r3, #0
   80db0:	d101      	bne.n	80db6 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   80db2:	2300      	movs	r3, #0
   80db4:	e018      	b.n	80de8 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80db6:	4b0e      	ldr	r3, [pc, #56]	; (80df0 <udc_req_std_iface_set_setting+0x58>)
   80db8:	889b      	ldrh	r3, [r3, #4]
   80dba:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   80dbc:	4b0c      	ldr	r3, [pc, #48]	; (80df0 <udc_req_std_iface_set_setting+0x58>)
   80dbe:	885b      	ldrh	r3, [r3, #2]
   80dc0:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   80dc2:	79fb      	ldrb	r3, [r7, #7]
   80dc4:	4618      	mov	r0, r3
   80dc6:	4b0c      	ldr	r3, [pc, #48]	; (80df8 <udc_req_std_iface_set_setting+0x60>)
   80dc8:	4798      	blx	r3
   80dca:	4603      	mov	r3, r0
   80dcc:	f083 0301 	eor.w	r3, r3, #1
   80dd0:	b2db      	uxtb	r3, r3
   80dd2:	2b00      	cmp	r3, #0
   80dd4:	d001      	beq.n	80dda <udc_req_std_iface_set_setting+0x42>
		return false;
   80dd6:	2300      	movs	r3, #0
   80dd8:	e006      	b.n	80de8 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   80dda:	79fa      	ldrb	r2, [r7, #7]
   80ddc:	79bb      	ldrb	r3, [r7, #6]
   80dde:	4610      	mov	r0, r2
   80de0:	4619      	mov	r1, r3
   80de2:	4b06      	ldr	r3, [pc, #24]	; (80dfc <udc_req_std_iface_set_setting+0x64>)
   80de4:	4798      	blx	r3
   80de6:	4603      	mov	r3, r0
}
   80de8:	4618      	mov	r0, r3
   80dea:	3708      	adds	r7, #8
   80dec:	46bd      	mov	sp, r7
   80dee:	bd80      	pop	{r7, pc}
   80df0:	20070874 	.word	0x20070874
   80df4:	20070744 	.word	0x20070744
   80df8:	00080679 	.word	0x00080679
   80dfc:	0008071d 	.word	0x0008071d

00080e00 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   80e00:	b580      	push	{r7, lr}
   80e02:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   80e04:	4b4e      	ldr	r3, [pc, #312]	; (80f40 <udc_reqstd+0x140>)
   80e06:	781b      	ldrb	r3, [r3, #0]
   80e08:	b2db      	uxtb	r3, r3
   80e0a:	b25b      	sxtb	r3, r3
   80e0c:	2b00      	cmp	r3, #0
   80e0e:	da3f      	bge.n	80e90 <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   80e10:	4b4b      	ldr	r3, [pc, #300]	; (80f40 <udc_reqstd+0x140>)
   80e12:	88db      	ldrh	r3, [r3, #6]
   80e14:	2b00      	cmp	r3, #0
   80e16:	d101      	bne.n	80e1c <udc_reqstd+0x1c>
			return false; // Error for USB host
   80e18:	2300      	movs	r3, #0
   80e1a:	e08f      	b.n	80f3c <udc_reqstd+0x13c>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80e1c:	4b48      	ldr	r3, [pc, #288]	; (80f40 <udc_reqstd+0x140>)
   80e1e:	781b      	ldrb	r3, [r3, #0]
   80e20:	f003 031f 	and.w	r3, r3, #31
   80e24:	2b00      	cmp	r3, #0
   80e26:	d114      	bne.n	80e52 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   80e28:	4b45      	ldr	r3, [pc, #276]	; (80f40 <udc_reqstd+0x140>)
   80e2a:	785b      	ldrb	r3, [r3, #1]
   80e2c:	2b06      	cmp	r3, #6
   80e2e:	d008      	beq.n	80e42 <udc_reqstd+0x42>
   80e30:	2b08      	cmp	r3, #8
   80e32:	d00a      	beq.n	80e4a <udc_reqstd+0x4a>
   80e34:	2b00      	cmp	r3, #0
   80e36:	d000      	beq.n	80e3a <udc_reqstd+0x3a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   80e38:	e00b      	b.n	80e52 <udc_reqstd+0x52>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
   80e3a:	4b42      	ldr	r3, [pc, #264]	; (80f44 <udc_reqstd+0x144>)
   80e3c:	4798      	blx	r3
   80e3e:	4603      	mov	r3, r0
   80e40:	e07c      	b.n	80f3c <udc_reqstd+0x13c>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
   80e42:	4b41      	ldr	r3, [pc, #260]	; (80f48 <udc_reqstd+0x148>)
   80e44:	4798      	blx	r3
   80e46:	4603      	mov	r3, r0
   80e48:	e078      	b.n	80f3c <udc_reqstd+0x13c>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
   80e4a:	4b40      	ldr	r3, [pc, #256]	; (80f4c <udc_reqstd+0x14c>)
   80e4c:	4798      	blx	r3
   80e4e:	4603      	mov	r3, r0
   80e50:	e074      	b.n	80f3c <udc_reqstd+0x13c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80e52:	4b3b      	ldr	r3, [pc, #236]	; (80f40 <udc_reqstd+0x140>)
   80e54:	781b      	ldrb	r3, [r3, #0]
   80e56:	f003 031f 	and.w	r3, r3, #31
   80e5a:	2b01      	cmp	r3, #1
   80e5c:	d108      	bne.n	80e70 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   80e5e:	4b38      	ldr	r3, [pc, #224]	; (80f40 <udc_reqstd+0x140>)
   80e60:	785b      	ldrb	r3, [r3, #1]
   80e62:	2b0a      	cmp	r3, #10
   80e64:	d000      	beq.n	80e68 <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
   80e66:	e003      	b.n	80e70 <udc_reqstd+0x70>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   80e68:	4b39      	ldr	r3, [pc, #228]	; (80f50 <udc_reqstd+0x150>)
   80e6a:	4798      	blx	r3
   80e6c:	4603      	mov	r3, r0
   80e6e:	e065      	b.n	80f3c <udc_reqstd+0x13c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80e70:	4b33      	ldr	r3, [pc, #204]	; (80f40 <udc_reqstd+0x140>)
   80e72:	781b      	ldrb	r3, [r3, #0]
   80e74:	f003 031f 	and.w	r3, r3, #31
   80e78:	2b02      	cmp	r3, #2
   80e7a:	d15e      	bne.n	80f3a <udc_reqstd+0x13a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   80e7c:	4b30      	ldr	r3, [pc, #192]	; (80f40 <udc_reqstd+0x140>)
   80e7e:	785b      	ldrb	r3, [r3, #1]
   80e80:	2b00      	cmp	r3, #0
   80e82:	d001      	beq.n	80e88 <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
   80e84:	bf00      	nop
   80e86:	e058      	b.n	80f3a <udc_reqstd+0x13a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   80e88:	4b32      	ldr	r3, [pc, #200]	; (80f54 <udc_reqstd+0x154>)
   80e8a:	4798      	blx	r3
   80e8c:	4603      	mov	r3, r0
   80e8e:	e055      	b.n	80f3c <udc_reqstd+0x13c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80e90:	4b2b      	ldr	r3, [pc, #172]	; (80f40 <udc_reqstd+0x140>)
   80e92:	781b      	ldrb	r3, [r3, #0]
   80e94:	f003 031f 	and.w	r3, r3, #31
   80e98:	2b00      	cmp	r3, #0
   80e9a:	d12a      	bne.n	80ef2 <udc_reqstd+0xf2>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   80e9c:	4b28      	ldr	r3, [pc, #160]	; (80f40 <udc_reqstd+0x140>)
   80e9e:	785b      	ldrb	r3, [r3, #1]
   80ea0:	3b01      	subs	r3, #1
   80ea2:	2b08      	cmp	r3, #8
   80ea4:	d824      	bhi.n	80ef0 <udc_reqstd+0xf0>
   80ea6:	a201      	add	r2, pc, #4	; (adr r2, 80eac <udc_reqstd+0xac>)
   80ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80eac:	00080ed9 	.word	0x00080ed9
   80eb0:	00080ef1 	.word	0x00080ef1
   80eb4:	00080ee1 	.word	0x00080ee1
   80eb8:	00080ef1 	.word	0x00080ef1
   80ebc:	00080ed1 	.word	0x00080ed1
   80ec0:	00080ef1 	.word	0x00080ef1
   80ec4:	00080ef1 	.word	0x00080ef1
   80ec8:	00080ef1 	.word	0x00080ef1
   80ecc:	00080ee9 	.word	0x00080ee9
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   80ed0:	4b21      	ldr	r3, [pc, #132]	; (80f58 <udc_reqstd+0x158>)
   80ed2:	4798      	blx	r3
   80ed4:	4603      	mov	r3, r0
   80ed6:	e031      	b.n	80f3c <udc_reqstd+0x13c>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   80ed8:	4b20      	ldr	r3, [pc, #128]	; (80f5c <udc_reqstd+0x15c>)
   80eda:	4798      	blx	r3
   80edc:	4603      	mov	r3, r0
   80ede:	e02d      	b.n	80f3c <udc_reqstd+0x13c>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   80ee0:	4b1f      	ldr	r3, [pc, #124]	; (80f60 <udc_reqstd+0x160>)
   80ee2:	4798      	blx	r3
   80ee4:	4603      	mov	r3, r0
   80ee6:	e029      	b.n	80f3c <udc_reqstd+0x13c>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   80ee8:	4b1e      	ldr	r3, [pc, #120]	; (80f64 <udc_reqstd+0x164>)
   80eea:	4798      	blx	r3
   80eec:	4603      	mov	r3, r0
   80eee:	e025      	b.n	80f3c <udc_reqstd+0x13c>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
   80ef0:	bf00      	nop
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80ef2:	4b13      	ldr	r3, [pc, #76]	; (80f40 <udc_reqstd+0x140>)
   80ef4:	781b      	ldrb	r3, [r3, #0]
   80ef6:	f003 031f 	and.w	r3, r3, #31
   80efa:	2b01      	cmp	r3, #1
   80efc:	d108      	bne.n	80f10 <udc_reqstd+0x110>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   80efe:	4b10      	ldr	r3, [pc, #64]	; (80f40 <udc_reqstd+0x140>)
   80f00:	785b      	ldrb	r3, [r3, #1]
   80f02:	2b0b      	cmp	r3, #11
   80f04:	d000      	beq.n	80f08 <udc_reqstd+0x108>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
   80f06:	e003      	b.n	80f10 <udc_reqstd+0x110>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   80f08:	4b17      	ldr	r3, [pc, #92]	; (80f68 <udc_reqstd+0x168>)
   80f0a:	4798      	blx	r3
   80f0c:	4603      	mov	r3, r0
   80f0e:	e015      	b.n	80f3c <udc_reqstd+0x13c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80f10:	4b0b      	ldr	r3, [pc, #44]	; (80f40 <udc_reqstd+0x140>)
   80f12:	781b      	ldrb	r3, [r3, #0]
   80f14:	f003 031f 	and.w	r3, r3, #31
   80f18:	2b02      	cmp	r3, #2
   80f1a:	d10e      	bne.n	80f3a <udc_reqstd+0x13a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   80f1c:	4b08      	ldr	r3, [pc, #32]	; (80f40 <udc_reqstd+0x140>)
   80f1e:	785b      	ldrb	r3, [r3, #1]
   80f20:	2b01      	cmp	r3, #1
   80f22:	d002      	beq.n	80f2a <udc_reqstd+0x12a>
   80f24:	2b03      	cmp	r3, #3
   80f26:	d004      	beq.n	80f32 <udc_reqstd+0x132>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   80f28:	e007      	b.n	80f3a <udc_reqstd+0x13a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
   80f2a:	4b10      	ldr	r3, [pc, #64]	; (80f6c <udc_reqstd+0x16c>)
   80f2c:	4798      	blx	r3
   80f2e:	4603      	mov	r3, r0
   80f30:	e004      	b.n	80f3c <udc_reqstd+0x13c>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
   80f32:	4b0f      	ldr	r3, [pc, #60]	; (80f70 <udc_reqstd+0x170>)
   80f34:	4798      	blx	r3
   80f36:	4603      	mov	r3, r0
   80f38:	e000      	b.n	80f3c <udc_reqstd+0x13c>
				break;
			}
		}
#endif
	}
	return false;
   80f3a:	2300      	movs	r3, #0
}
   80f3c:	4618      	mov	r0, r3
   80f3e:	bd80      	pop	{r7, pc}
   80f40:	20070874 	.word	0x20070874
   80f44:	0008087d 	.word	0x0008087d
   80f48:	00080af5 	.word	0x00080af5
   80f4c:	00080c15 	.word	0x00080c15
   80f50:	00080d01 	.word	0x00080d01
   80f54:	000808a9 	.word	0x000808a9
   80f58:	000809fd 	.word	0x000809fd
   80f5c:	000808ed 	.word	0x000808ed
   80f60:	00080965 	.word	0x00080965
   80f64:	00080c41 	.word	0x00080c41
   80f68:	00080d99 	.word	0x00080d99
   80f6c:	0008092d 	.word	0x0008092d
   80f70:	00080995 	.word	0x00080995

00080f74 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   80f74:	b580      	push	{r7, lr}
   80f76:	b082      	sub	sp, #8
   80f78:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   80f7a:	4b20      	ldr	r3, [pc, #128]	; (80ffc <udc_req_iface+0x88>)
   80f7c:	781b      	ldrb	r3, [r3, #0]
   80f7e:	2b00      	cmp	r3, #0
   80f80:	d101      	bne.n	80f86 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   80f82:	2300      	movs	r3, #0
   80f84:	e036      	b.n	80ff4 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80f86:	4b1e      	ldr	r3, [pc, #120]	; (81000 <udc_req_iface+0x8c>)
   80f88:	889b      	ldrh	r3, [r3, #4]
   80f8a:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80f8c:	4b1d      	ldr	r3, [pc, #116]	; (81004 <udc_req_iface+0x90>)
   80f8e:	681b      	ldr	r3, [r3, #0]
   80f90:	681b      	ldr	r3, [r3, #0]
   80f92:	791b      	ldrb	r3, [r3, #4]
   80f94:	79fa      	ldrb	r2, [r7, #7]
   80f96:	429a      	cmp	r2, r3
   80f98:	d301      	bcc.n	80f9e <udc_req_iface+0x2a>
		return false;
   80f9a:	2300      	movs	r3, #0
   80f9c:	e02a      	b.n	80ff4 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   80f9e:	79fb      	ldrb	r3, [r7, #7]
   80fa0:	4618      	mov	r0, r3
   80fa2:	2100      	movs	r1, #0
   80fa4:	4b18      	ldr	r3, [pc, #96]	; (81008 <udc_req_iface+0x94>)
   80fa6:	4798      	blx	r3
   80fa8:	4603      	mov	r3, r0
   80faa:	f083 0301 	eor.w	r3, r3, #1
   80fae:	b2db      	uxtb	r3, r3
   80fb0:	2b00      	cmp	r3, #0
   80fb2:	d001      	beq.n	80fb8 <udc_req_iface+0x44>
		return false;
   80fb4:	2300      	movs	r3, #0
   80fb6:	e01d      	b.n	80ff4 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80fb8:	4b12      	ldr	r3, [pc, #72]	; (81004 <udc_req_iface+0x90>)
   80fba:	681b      	ldr	r3, [r3, #0]
   80fbc:	685a      	ldr	r2, [r3, #4]
   80fbe:	79fb      	ldrb	r3, [r7, #7]
   80fc0:	009b      	lsls	r3, r3, #2
   80fc2:	4413      	add	r3, r2
   80fc4:	681b      	ldr	r3, [r3, #0]
   80fc6:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80fc8:	683b      	ldr	r3, [r7, #0]
   80fca:	68db      	ldr	r3, [r3, #12]
   80fcc:	4798      	blx	r3
   80fce:	4603      	mov	r3, r0
   80fd0:	461a      	mov	r2, r3
   80fd2:	79fb      	ldrb	r3, [r7, #7]
   80fd4:	4618      	mov	r0, r3
   80fd6:	4611      	mov	r1, r2
   80fd8:	4b0b      	ldr	r3, [pc, #44]	; (81008 <udc_req_iface+0x94>)
   80fda:	4798      	blx	r3
   80fdc:	4603      	mov	r3, r0
   80fde:	f083 0301 	eor.w	r3, r3, #1
   80fe2:	b2db      	uxtb	r3, r3
   80fe4:	2b00      	cmp	r3, #0
   80fe6:	d001      	beq.n	80fec <udc_req_iface+0x78>
		return false;
   80fe8:	2300      	movs	r3, #0
   80fea:	e003      	b.n	80ff4 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   80fec:	683b      	ldr	r3, [r7, #0]
   80fee:	689b      	ldr	r3, [r3, #8]
   80ff0:	4798      	blx	r3
   80ff2:	4603      	mov	r3, r0
}
   80ff4:	4618      	mov	r0, r3
   80ff6:	3708      	adds	r7, #8
   80ff8:	46bd      	mov	sp, r7
   80ffa:	bd80      	pop	{r7, pc}
   80ffc:	20070744 	.word	0x20070744
   81000:	20070874 	.word	0x20070874
   81004:	20070748 	.word	0x20070748
   81008:	000805dd 	.word	0x000805dd

0008100c <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   8100c:	b580      	push	{r7, lr}
   8100e:	b082      	sub	sp, #8
   81010:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   81012:	4b1e      	ldr	r3, [pc, #120]	; (8108c <udc_req_ep+0x80>)
   81014:	781b      	ldrb	r3, [r3, #0]
   81016:	2b00      	cmp	r3, #0
   81018:	d101      	bne.n	8101e <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   8101a:	2300      	movs	r3, #0
   8101c:	e032      	b.n	81084 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8101e:	4b1c      	ldr	r3, [pc, #112]	; (81090 <udc_req_ep+0x84>)
   81020:	889b      	ldrh	r3, [r3, #4]
   81022:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81024:	2300      	movs	r3, #0
   81026:	71fb      	strb	r3, [r7, #7]
   81028:	e024      	b.n	81074 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   8102a:	4b1a      	ldr	r3, [pc, #104]	; (81094 <udc_req_ep+0x88>)
   8102c:	681b      	ldr	r3, [r3, #0]
   8102e:	685a      	ldr	r2, [r3, #4]
   81030:	79fb      	ldrb	r3, [r7, #7]
   81032:	009b      	lsls	r3, r3, #2
   81034:	4413      	add	r3, r2
   81036:	681b      	ldr	r3, [r3, #0]
   81038:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8103a:	683b      	ldr	r3, [r7, #0]
   8103c:	68db      	ldr	r3, [r3, #12]
   8103e:	4798      	blx	r3
   81040:	4603      	mov	r3, r0
   81042:	461a      	mov	r2, r3
   81044:	79fb      	ldrb	r3, [r7, #7]
   81046:	4618      	mov	r0, r3
   81048:	4611      	mov	r1, r2
   8104a:	4b13      	ldr	r3, [pc, #76]	; (81098 <udc_req_ep+0x8c>)
   8104c:	4798      	blx	r3
   8104e:	4603      	mov	r3, r0
   81050:	f083 0301 	eor.w	r3, r3, #1
   81054:	b2db      	uxtb	r3, r3
   81056:	2b00      	cmp	r3, #0
   81058:	d001      	beq.n	8105e <udc_req_ep+0x52>
			return false;
   8105a:	2300      	movs	r3, #0
   8105c:	e012      	b.n	81084 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   8105e:	683b      	ldr	r3, [r7, #0]
   81060:	689b      	ldr	r3, [r3, #8]
   81062:	4798      	blx	r3
   81064:	4603      	mov	r3, r0
   81066:	2b00      	cmp	r3, #0
   81068:	d001      	beq.n	8106e <udc_req_ep+0x62>
			return true;
   8106a:	2301      	movs	r3, #1
   8106c:	e00a      	b.n	81084 <udc_req_ep+0x78>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   8106e:	79fb      	ldrb	r3, [r7, #7]
   81070:	3301      	adds	r3, #1
   81072:	71fb      	strb	r3, [r7, #7]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81074:	4b07      	ldr	r3, [pc, #28]	; (81094 <udc_req_ep+0x88>)
   81076:	681b      	ldr	r3, [r3, #0]
   81078:	681b      	ldr	r3, [r3, #0]
   8107a:	791b      	ldrb	r3, [r3, #4]
   8107c:	79fa      	ldrb	r2, [r7, #7]
   8107e:	429a      	cmp	r2, r3
   81080:	d3d3      	bcc.n	8102a <udc_req_ep+0x1e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   81082:	2300      	movs	r3, #0
}
   81084:	4618      	mov	r0, r3
   81086:	3708      	adds	r7, #8
   81088:	46bd      	mov	sp, r7
   8108a:	bd80      	pop	{r7, pc}
   8108c:	20070744 	.word	0x20070744
   81090:	20070874 	.word	0x20070874
   81094:	20070748 	.word	0x20070748
   81098:	000805dd 	.word	0x000805dd

0008109c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   8109c:	b580      	push	{r7, lr}
   8109e:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   810a0:	4b1f      	ldr	r3, [pc, #124]	; (81120 <udc_process_setup+0x84>)
   810a2:	2200      	movs	r2, #0
   810a4:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   810a6:	4b1e      	ldr	r3, [pc, #120]	; (81120 <udc_process_setup+0x84>)
   810a8:	2200      	movs	r2, #0
   810aa:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   810ac:	4b1c      	ldr	r3, [pc, #112]	; (81120 <udc_process_setup+0x84>)
   810ae:	2200      	movs	r2, #0
   810b0:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   810b2:	4b1b      	ldr	r3, [pc, #108]	; (81120 <udc_process_setup+0x84>)
   810b4:	781b      	ldrb	r3, [r3, #0]
   810b6:	b2db      	uxtb	r3, r3
   810b8:	b25b      	sxtb	r3, r3
   810ba:	2b00      	cmp	r3, #0
   810bc:	da05      	bge.n	810ca <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
   810be:	4b18      	ldr	r3, [pc, #96]	; (81120 <udc_process_setup+0x84>)
   810c0:	88db      	ldrh	r3, [r3, #6]
   810c2:	2b00      	cmp	r3, #0
   810c4:	d101      	bne.n	810ca <udc_process_setup+0x2e>
			return false; // Error from USB host
   810c6:	2300      	movs	r3, #0
   810c8:	e027      	b.n	8111a <udc_process_setup+0x7e>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   810ca:	4b15      	ldr	r3, [pc, #84]	; (81120 <udc_process_setup+0x84>)
   810cc:	781b      	ldrb	r3, [r3, #0]
   810ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
   810d2:	2b00      	cmp	r3, #0
   810d4:	d106      	bne.n	810e4 <udc_process_setup+0x48>
		if (udc_reqstd()) {
   810d6:	4b13      	ldr	r3, [pc, #76]	; (81124 <udc_process_setup+0x88>)
   810d8:	4798      	blx	r3
   810da:	4603      	mov	r3, r0
   810dc:	2b00      	cmp	r3, #0
   810de:	d001      	beq.n	810e4 <udc_process_setup+0x48>
			return true;
   810e0:	2301      	movs	r3, #1
   810e2:	e01a      	b.n	8111a <udc_process_setup+0x7e>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   810e4:	4b0e      	ldr	r3, [pc, #56]	; (81120 <udc_process_setup+0x84>)
   810e6:	781b      	ldrb	r3, [r3, #0]
   810e8:	f003 031f 	and.w	r3, r3, #31
   810ec:	2b01      	cmp	r3, #1
   810ee:	d106      	bne.n	810fe <udc_process_setup+0x62>
		if (udc_req_iface()) {
   810f0:	4b0d      	ldr	r3, [pc, #52]	; (81128 <udc_process_setup+0x8c>)
   810f2:	4798      	blx	r3
   810f4:	4603      	mov	r3, r0
   810f6:	2b00      	cmp	r3, #0
   810f8:	d001      	beq.n	810fe <udc_process_setup+0x62>
			return true;
   810fa:	2301      	movs	r3, #1
   810fc:	e00d      	b.n	8111a <udc_process_setup+0x7e>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   810fe:	4b08      	ldr	r3, [pc, #32]	; (81120 <udc_process_setup+0x84>)
   81100:	781b      	ldrb	r3, [r3, #0]
   81102:	f003 031f 	and.w	r3, r3, #31
   81106:	2b02      	cmp	r3, #2
   81108:	d106      	bne.n	81118 <udc_process_setup+0x7c>
		if (udc_req_ep()) {
   8110a:	4b08      	ldr	r3, [pc, #32]	; (8112c <udc_process_setup+0x90>)
   8110c:	4798      	blx	r3
   8110e:	4603      	mov	r3, r0
   81110:	2b00      	cmp	r3, #0
   81112:	d001      	beq.n	81118 <udc_process_setup+0x7c>
			return true;
   81114:	2301      	movs	r3, #1
   81116:	e000      	b.n	8111a <udc_process_setup+0x7e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   81118:	2300      	movs	r3, #0
#endif
}
   8111a:	4618      	mov	r0, r3
   8111c:	bd80      	pop	{r7, pc}
   8111e:	bf00      	nop
   81120:	20070874 	.word	0x20070874
   81124:	00080e01 	.word	0x00080e01
   81128:	00080f75 	.word	0x00080f75
   8112c:	0008100d 	.word	0x0008100d

00081130 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81130:	b480      	push	{r7}
   81132:	b083      	sub	sp, #12
   81134:	af00      	add	r7, sp, #0
   81136:	4603      	mov	r3, r0
   81138:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8113a:	4908      	ldr	r1, [pc, #32]	; (8115c <NVIC_EnableIRQ+0x2c>)
   8113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81140:	095b      	lsrs	r3, r3, #5
   81142:	79fa      	ldrb	r2, [r7, #7]
   81144:	f002 021f 	and.w	r2, r2, #31
   81148:	2001      	movs	r0, #1
   8114a:	fa00 f202 	lsl.w	r2, r0, r2
   8114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81152:	370c      	adds	r7, #12
   81154:	46bd      	mov	sp, r7
   81156:	f85d 7b04 	ldr.w	r7, [sp], #4
   8115a:	4770      	bx	lr
   8115c:	e000e100 	.word	0xe000e100

00081160 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81160:	b480      	push	{r7}
   81162:	b083      	sub	sp, #12
   81164:	af00      	add	r7, sp, #0
   81166:	4603      	mov	r3, r0
   81168:	6039      	str	r1, [r7, #0]
   8116a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   8116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81170:	2b00      	cmp	r3, #0
   81172:	da0b      	bge.n	8118c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81174:	490d      	ldr	r1, [pc, #52]	; (811ac <NVIC_SetPriority+0x4c>)
   81176:	79fb      	ldrb	r3, [r7, #7]
   81178:	f003 030f 	and.w	r3, r3, #15
   8117c:	3b04      	subs	r3, #4
   8117e:	683a      	ldr	r2, [r7, #0]
   81180:	b2d2      	uxtb	r2, r2
   81182:	0112      	lsls	r2, r2, #4
   81184:	b2d2      	uxtb	r2, r2
   81186:	440b      	add	r3, r1
   81188:	761a      	strb	r2, [r3, #24]
   8118a:	e009      	b.n	811a0 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8118c:	4908      	ldr	r1, [pc, #32]	; (811b0 <NVIC_SetPriority+0x50>)
   8118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81192:	683a      	ldr	r2, [r7, #0]
   81194:	b2d2      	uxtb	r2, r2
   81196:	0112      	lsls	r2, r2, #4
   81198:	b2d2      	uxtb	r2, r2
   8119a:	440b      	add	r3, r1
   8119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   811a0:	370c      	adds	r7, #12
   811a2:	46bd      	mov	sp, r7
   811a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   811a8:	4770      	bx	lr
   811aa:	bf00      	nop
   811ac:	e000ed00 	.word	0xe000ed00
   811b0:	e000e100 	.word	0xe000e100

000811b4 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   811b4:	b480      	push	{r7}
   811b6:	b083      	sub	sp, #12
   811b8:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   811ba:	f3ef 8310 	mrs	r3, PRIMASK
   811be:	603b      	str	r3, [r7, #0]
  return(result);
   811c0:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   811c2:	2b00      	cmp	r3, #0
   811c4:	bf0c      	ite	eq
   811c6:	2301      	moveq	r3, #1
   811c8:	2300      	movne	r3, #0
   811ca:	b2db      	uxtb	r3, r3
   811cc:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   811ce:	b672      	cpsid	i
   811d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   811d4:	4b04      	ldr	r3, [pc, #16]	; (811e8 <cpu_irq_save+0x34>)
   811d6:	2200      	movs	r2, #0
   811d8:	701a      	strb	r2, [r3, #0]
	return flags;
   811da:	687b      	ldr	r3, [r7, #4]
}
   811dc:	4618      	mov	r0, r3
   811de:	370c      	adds	r7, #12
   811e0:	46bd      	mov	sp, r7
   811e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   811e6:	4770      	bx	lr
   811e8:	20070268 	.word	0x20070268

000811ec <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   811ec:	b480      	push	{r7}
   811ee:	b083      	sub	sp, #12
   811f0:	af00      	add	r7, sp, #0
   811f2:	6078      	str	r0, [r7, #4]
	return (flags);
   811f4:	687b      	ldr	r3, [r7, #4]
   811f6:	2b00      	cmp	r3, #0
   811f8:	bf14      	ite	ne
   811fa:	2301      	movne	r3, #1
   811fc:	2300      	moveq	r3, #0
   811fe:	b2db      	uxtb	r3, r3
}
   81200:	4618      	mov	r0, r3
   81202:	370c      	adds	r7, #12
   81204:	46bd      	mov	sp, r7
   81206:	f85d 7b04 	ldr.w	r7, [sp], #4
   8120a:	4770      	bx	lr

0008120c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   8120c:	b580      	push	{r7, lr}
   8120e:	b082      	sub	sp, #8
   81210:	af00      	add	r7, sp, #0
   81212:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   81214:	6878      	ldr	r0, [r7, #4]
   81216:	4b07      	ldr	r3, [pc, #28]	; (81234 <cpu_irq_restore+0x28>)
   81218:	4798      	blx	r3
   8121a:	4603      	mov	r3, r0
   8121c:	2b00      	cmp	r3, #0
   8121e:	d005      	beq.n	8122c <cpu_irq_restore+0x20>
		cpu_irq_enable();
   81220:	4b05      	ldr	r3, [pc, #20]	; (81238 <cpu_irq_restore+0x2c>)
   81222:	2201      	movs	r2, #1
   81224:	701a      	strb	r2, [r3, #0]
   81226:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8122a:	b662      	cpsie	i
}
   8122c:	3708      	adds	r7, #8
   8122e:	46bd      	mov	sp, r7
   81230:	bd80      	pop	{r7, pc}
   81232:	bf00      	nop
   81234:	000811ed 	.word	0x000811ed
   81238:	20070268 	.word	0x20070268

0008123c <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
   8123c:	b580      	push	{r7, lr}
   8123e:	b084      	sub	sp, #16
   81240:	af00      	add	r7, sp, #0
   81242:	4603      	mov	r3, r0
   81244:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
   81246:	79fb      	ldrb	r3, [r7, #7]
   81248:	4a0a      	ldr	r2, [pc, #40]	; (81274 <sleepmgr_lock_mode+0x38>)
   8124a:	5cd3      	ldrb	r3, [r2, r3]
   8124c:	2bff      	cmp	r3, #255	; 0xff
   8124e:	d100      	bne.n	81252 <sleepmgr_lock_mode+0x16>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
   81250:	e7fe      	b.n	81250 <sleepmgr_lock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
   81252:	4b09      	ldr	r3, [pc, #36]	; (81278 <sleepmgr_lock_mode+0x3c>)
   81254:	4798      	blx	r3
   81256:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
   81258:	79fb      	ldrb	r3, [r7, #7]
   8125a:	4a06      	ldr	r2, [pc, #24]	; (81274 <sleepmgr_lock_mode+0x38>)
   8125c:	5cd2      	ldrb	r2, [r2, r3]
   8125e:	3201      	adds	r2, #1
   81260:	b2d1      	uxtb	r1, r2
   81262:	4a04      	ldr	r2, [pc, #16]	; (81274 <sleepmgr_lock_mode+0x38>)
   81264:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
   81266:	68f8      	ldr	r0, [r7, #12]
   81268:	4b04      	ldr	r3, [pc, #16]	; (8127c <sleepmgr_lock_mode+0x40>)
   8126a:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   8126c:	3710      	adds	r7, #16
   8126e:	46bd      	mov	sp, r7
   81270:	bd80      	pop	{r7, pc}
   81272:	bf00      	nop
   81274:	2007086c 	.word	0x2007086c
   81278:	000811b5 	.word	0x000811b5
   8127c:	0008120d 	.word	0x0008120d

00081280 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
   81280:	b580      	push	{r7, lr}
   81282:	b084      	sub	sp, #16
   81284:	af00      	add	r7, sp, #0
   81286:	4603      	mov	r3, r0
   81288:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
   8128a:	79fb      	ldrb	r3, [r7, #7]
   8128c:	4a0a      	ldr	r2, [pc, #40]	; (812b8 <sleepmgr_unlock_mode+0x38>)
   8128e:	5cd3      	ldrb	r3, [r2, r3]
   81290:	2b00      	cmp	r3, #0
   81292:	d100      	bne.n	81296 <sleepmgr_unlock_mode+0x16>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
   81294:	e7fe      	b.n	81294 <sleepmgr_unlock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
   81296:	4b09      	ldr	r3, [pc, #36]	; (812bc <sleepmgr_unlock_mode+0x3c>)
   81298:	4798      	blx	r3
   8129a:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
   8129c:	79fb      	ldrb	r3, [r7, #7]
   8129e:	4a06      	ldr	r2, [pc, #24]	; (812b8 <sleepmgr_unlock_mode+0x38>)
   812a0:	5cd2      	ldrb	r2, [r2, r3]
   812a2:	3a01      	subs	r2, #1
   812a4:	b2d1      	uxtb	r1, r2
   812a6:	4a04      	ldr	r2, [pc, #16]	; (812b8 <sleepmgr_unlock_mode+0x38>)
   812a8:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
   812aa:	68f8      	ldr	r0, [r7, #12]
   812ac:	4b04      	ldr	r3, [pc, #16]	; (812c0 <sleepmgr_unlock_mode+0x40>)
   812ae:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   812b0:	3710      	adds	r7, #16
   812b2:	46bd      	mov	sp, r7
   812b4:	bd80      	pop	{r7, pc}
   812b6:	bf00      	nop
   812b8:	2007086c 	.word	0x2007086c
   812bc:	000811b5 	.word	0x000811b5
   812c0:	0008120d 	.word	0x0008120d

000812c4 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   812c4:	b580      	push	{r7, lr}
   812c6:	b082      	sub	sp, #8
   812c8:	af00      	add	r7, sp, #0
   812ca:	4603      	mov	r3, r0
   812cc:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   812ce:	79fb      	ldrb	r3, [r7, #7]
   812d0:	f083 0301 	eor.w	r3, r3, #1
   812d4:	b2db      	uxtb	r3, r3
   812d6:	2b00      	cmp	r3, #0
   812d8:	d006      	beq.n	812e8 <udd_sleep_mode+0x24>
   812da:	4b0d      	ldr	r3, [pc, #52]	; (81310 <udd_sleep_mode+0x4c>)
   812dc:	781b      	ldrb	r3, [r3, #0]
   812de:	2b00      	cmp	r3, #0
   812e0:	d002      	beq.n	812e8 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
   812e2:	2002      	movs	r0, #2
   812e4:	4b0b      	ldr	r3, [pc, #44]	; (81314 <udd_sleep_mode+0x50>)
   812e6:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   812e8:	79fb      	ldrb	r3, [r7, #7]
   812ea:	2b00      	cmp	r3, #0
   812ec:	d009      	beq.n	81302 <udd_sleep_mode+0x3e>
   812ee:	4b08      	ldr	r3, [pc, #32]	; (81310 <udd_sleep_mode+0x4c>)
   812f0:	781b      	ldrb	r3, [r3, #0]
   812f2:	f083 0301 	eor.w	r3, r3, #1
   812f6:	b2db      	uxtb	r3, r3
   812f8:	2b00      	cmp	r3, #0
   812fa:	d002      	beq.n	81302 <udd_sleep_mode+0x3e>
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
   812fc:	2002      	movs	r0, #2
   812fe:	4b06      	ldr	r3, [pc, #24]	; (81318 <udd_sleep_mode+0x54>)
   81300:	4798      	blx	r3
	}
	udd_b_idle = b_idle;
   81302:	4a03      	ldr	r2, [pc, #12]	; (81310 <udd_sleep_mode+0x4c>)
   81304:	79fb      	ldrb	r3, [r7, #7]
   81306:	7013      	strb	r3, [r2, #0]
}
   81308:	3708      	adds	r7, #8
   8130a:	46bd      	mov	sp, r7
   8130c:	bd80      	pop	{r7, pc}
   8130e:	bf00      	nop
   81310:	20070752 	.word	0x20070752
   81314:	00081281 	.word	0x00081281
   81318:	0008123d 	.word	0x0008123d

0008131c <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   8131c:	b580      	push	{r7, lr}
   8131e:	af00      	add	r7, sp, #0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   81320:	4b68      	ldr	r3, [pc, #416]	; (814c4 <UOTGHS_Handler+0x1a8>)
   81322:	4798      	blx	r3
   81324:	4603      	mov	r3, r0
   81326:	f083 0301 	eor.w	r3, r3, #1
   8132a:	b2db      	uxtb	r3, r3
   8132c:	2b00      	cmp	r3, #0
   8132e:	d00c      	beq.n	8134a <UOTGHS_Handler+0x2e>
   81330:	4b65      	ldr	r3, [pc, #404]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81332:	685b      	ldr	r3, [r3, #4]
   81334:	f003 0301 	and.w	r3, r3, #1
   81338:	2b00      	cmp	r3, #0
   8133a:	d106      	bne.n	8134a <UOTGHS_Handler+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8133c:	b672      	cpsid	i
   8133e:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   81342:	4b62      	ldr	r3, [pc, #392]	; (814cc <UOTGHS_Handler+0x1b0>)
   81344:	2200      	movs	r2, #0
   81346:	701a      	strb	r2, [r3, #0]
		return;
   81348:	e0ba      	b.n	814c0 <UOTGHS_Handler+0x1a4>
	}

	if (Is_udd_sof()) {
   8134a:	4b5f      	ldr	r3, [pc, #380]	; (814c8 <UOTGHS_Handler+0x1ac>)
   8134c:	685b      	ldr	r3, [r3, #4]
   8134e:	f003 0304 	and.w	r3, r3, #4
   81352:	2b00      	cmp	r3, #0
   81354:	d00e      	beq.n	81374 <UOTGHS_Handler+0x58>
		udd_ack_sof();
   81356:	4b5c      	ldr	r3, [pc, #368]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81358:	2204      	movs	r2, #4
   8135a:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
   8135c:	4b5a      	ldr	r3, [pc, #360]	; (814c8 <UOTGHS_Handler+0x1ac>)
   8135e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81362:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   81366:	0b1b      	lsrs	r3, r3, #12
   81368:	2b00      	cmp	r3, #0
   8136a:	d102      	bne.n	81372 <UOTGHS_Handler+0x56>
			udc_sof_notify();
   8136c:	4b58      	ldr	r3, [pc, #352]	; (814d0 <UOTGHS_Handler+0x1b4>)
   8136e:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
   81370:	e0a5      	b.n	814be <UOTGHS_Handler+0x1a2>
   81372:	e0a4      	b.n	814be <UOTGHS_Handler+0x1a2>
	}

	if (Is_udd_msof()) {
   81374:	4b54      	ldr	r3, [pc, #336]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81376:	685b      	ldr	r3, [r3, #4]
   81378:	f003 0302 	and.w	r3, r3, #2
   8137c:	2b00      	cmp	r3, #0
   8137e:	d005      	beq.n	8138c <UOTGHS_Handler+0x70>
		udd_ack_msof();
   81380:	4b51      	ldr	r3, [pc, #324]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81382:	2202      	movs	r2, #2
   81384:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
   81386:	4b52      	ldr	r3, [pc, #328]	; (814d0 <UOTGHS_Handler+0x1b4>)
   81388:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   8138a:	e098      	b.n	814be <UOTGHS_Handler+0x1a2>
	}

	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   8138c:	4b51      	ldr	r3, [pc, #324]	; (814d4 <UOTGHS_Handler+0x1b8>)
   8138e:	4798      	blx	r3
   81390:	4603      	mov	r3, r0
   81392:	2b00      	cmp	r3, #0
   81394:	d000      	beq.n	81398 <UOTGHS_Handler+0x7c>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   81396:	e092      	b.n	814be <UOTGHS_Handler+0x1a2>
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   81398:	4b4f      	ldr	r3, [pc, #316]	; (814d8 <UOTGHS_Handler+0x1bc>)
   8139a:	4798      	blx	r3
   8139c:	4603      	mov	r3, r0
   8139e:	2b00      	cmp	r3, #0
   813a0:	d000      	beq.n	813a4 <UOTGHS_Handler+0x88>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   813a2:	e08c      	b.n	814be <UOTGHS_Handler+0x1a2>
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   813a4:	4b48      	ldr	r3, [pc, #288]	; (814c8 <UOTGHS_Handler+0x1ac>)
   813a6:	685b      	ldr	r3, [r3, #4]
   813a8:	f003 0308 	and.w	r3, r3, #8
   813ac:	2b00      	cmp	r3, #0
   813ae:	d00b      	beq.n	813c8 <UOTGHS_Handler+0xac>
		udd_ack_reset();
   813b0:	4b45      	ldr	r3, [pc, #276]	; (814c8 <UOTGHS_Handler+0x1ac>)
   813b2:	2208      	movs	r2, #8
   813b4:	609a      	str	r2, [r3, #8]
		dbg_print("RST ");
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   813b6:	4b49      	ldr	r3, [pc, #292]	; (814dc <UOTGHS_Handler+0x1c0>)
   813b8:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   813ba:	4b49      	ldr	r3, [pc, #292]	; (814e0 <UOTGHS_Handler+0x1c4>)
   813bc:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   813be:	4b49      	ldr	r3, [pc, #292]	; (814e4 <UOTGHS_Handler+0x1c8>)
   813c0:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   813c2:	4b49      	ldr	r3, [pc, #292]	; (814e8 <UOTGHS_Handler+0x1cc>)
   813c4:	4798      	blx	r3
		goto udd_interrupt_end;
   813c6:	e07a      	b.n	814be <UOTGHS_Handler+0x1a2>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   813c8:	4b3f      	ldr	r3, [pc, #252]	; (814c8 <UOTGHS_Handler+0x1ac>)
   813ca:	691b      	ldr	r3, [r3, #16]
   813cc:	f003 0301 	and.w	r3, r3, #1
   813d0:	2b00      	cmp	r3, #0
   813d2:	d01f      	beq.n	81414 <UOTGHS_Handler+0xf8>
   813d4:	4b3c      	ldr	r3, [pc, #240]	; (814c8 <UOTGHS_Handler+0x1ac>)
   813d6:	685b      	ldr	r3, [r3, #4]
   813d8:	f003 0301 	and.w	r3, r3, #1
   813dc:	2b00      	cmp	r3, #0
   813de:	d019      	beq.n	81414 <UOTGHS_Handler+0xf8>
		otg_unfreeze_clock();
   813e0:	4a39      	ldr	r2, [pc, #228]	; (814c8 <UOTGHS_Handler+0x1ac>)
   813e2:	4b39      	ldr	r3, [pc, #228]	; (814c8 <UOTGHS_Handler+0x1ac>)
   813e4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   813e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   813ec:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   813f0:	4b35      	ldr	r3, [pc, #212]	; (814c8 <UOTGHS_Handler+0x1ac>)
   813f2:	2201      	movs	r2, #1
   813f4:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
   813f6:	4b34      	ldr	r3, [pc, #208]	; (814c8 <UOTGHS_Handler+0x1ac>)
   813f8:	2210      	movs	r2, #16
   813fa:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   813fc:	4a32      	ldr	r2, [pc, #200]	; (814c8 <UOTGHS_Handler+0x1ac>)
   813fe:	4b32      	ldr	r3, [pc, #200]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81400:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   81408:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   8140c:	2000      	movs	r0, #0
   8140e:	4b37      	ldr	r3, [pc, #220]	; (814ec <UOTGHS_Handler+0x1d0>)
   81410:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
   81412:	e054      	b.n	814be <UOTGHS_Handler+0x1a2>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   81414:	4b2c      	ldr	r3, [pc, #176]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81416:	691b      	ldr	r3, [r3, #16]
   81418:	f003 0310 	and.w	r3, r3, #16
   8141c:	2b00      	cmp	r3, #0
   8141e:	d026      	beq.n	8146e <UOTGHS_Handler+0x152>
   81420:	4b29      	ldr	r3, [pc, #164]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81422:	685b      	ldr	r3, [r3, #4]
   81424:	f003 0310 	and.w	r3, r3, #16
   81428:	2b00      	cmp	r3, #0
   8142a:	d020      	beq.n	8146e <UOTGHS_Handler+0x152>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   8142c:	4a26      	ldr	r2, [pc, #152]	; (814c8 <UOTGHS_Handler+0x1ac>)
   8142e:	4b26      	ldr	r3, [pc, #152]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81430:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   81438:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   8143c:	e006      	b.n	8144c <UOTGHS_Handler+0x130>
			if (Is_udd_suspend()) {
   8143e:	4b22      	ldr	r3, [pc, #136]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81440:	685b      	ldr	r3, [r3, #4]
   81442:	f003 0301 	and.w	r3, r3, #1
   81446:	2b00      	cmp	r3, #0
   81448:	d000      	beq.n	8144c <UOTGHS_Handler+0x130>
				break; // In case of USB state change in HS
   8144a:	e006      	b.n	8145a <UOTGHS_Handler+0x13e>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   8144c:	4b1e      	ldr	r3, [pc, #120]	; (814c8 <UOTGHS_Handler+0x1ac>)
   8144e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   81456:	2b00      	cmp	r3, #0
   81458:	d0f1      	beq.n	8143e <UOTGHS_Handler+0x122>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   8145a:	4b1b      	ldr	r3, [pc, #108]	; (814c8 <UOTGHS_Handler+0x1ac>)
   8145c:	2210      	movs	r2, #16
   8145e:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
   81460:	4b19      	ldr	r3, [pc, #100]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81462:	2201      	movs	r2, #1
   81464:	619a      	str	r2, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   81466:	2001      	movs	r0, #1
   81468:	4b20      	ldr	r3, [pc, #128]	; (814ec <UOTGHS_Handler+0x1d0>)
   8146a:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
   8146c:	e027      	b.n	814be <UOTGHS_Handler+0x1a2>
	}

	if (Is_otg_vbus_transition()) {
   8146e:	4b16      	ldr	r3, [pc, #88]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81470:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81474:	f003 0302 	and.w	r3, r3, #2
   81478:	2b00      	cmp	r3, #0
   8147a:	d020      	beq.n	814be <UOTGHS_Handler+0x1a2>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   8147c:	4a12      	ldr	r2, [pc, #72]	; (814c8 <UOTGHS_Handler+0x1ac>)
   8147e:	4b12      	ldr	r3, [pc, #72]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81480:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   81488:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		otg_ack_vbus_transition();
   8148c:	4b0e      	ldr	r3, [pc, #56]	; (814c8 <UOTGHS_Handler+0x1ac>)
   8148e:	2202      	movs	r2, #2
   81490:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
		otg_freeze_clock();
   81494:	4a0c      	ldr	r2, [pc, #48]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81496:	4b0c      	ldr	r3, [pc, #48]	; (814c8 <UOTGHS_Handler+0x1ac>)
   81498:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   8149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   814a0:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   814a4:	4b08      	ldr	r3, [pc, #32]	; (814c8 <UOTGHS_Handler+0x1ac>)
   814a6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   814aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   814ae:	2b00      	cmp	r3, #0
   814b0:	d002      	beq.n	814b8 <UOTGHS_Handler+0x19c>
			udd_attach();
   814b2:	4b0f      	ldr	r3, [pc, #60]	; (814f0 <UOTGHS_Handler+0x1d4>)
   814b4:	4798      	blx	r3
   814b6:	e001      	b.n	814bc <UOTGHS_Handler+0x1a0>
		} else {
			udd_detach();
   814b8:	4b0e      	ldr	r3, [pc, #56]	; (814f4 <UOTGHS_Handler+0x1d8>)
   814ba:	4798      	blx	r3
		}
#endif
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
   814bc:	bf00      	nop
	}
udd_interrupt_end:
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   814be:	bf00      	nop
}
   814c0:	bd80      	pop	{r7, pc}
   814c2:	bf00      	nop
   814c4:	000839f1 	.word	0x000839f1
   814c8:	400ac000 	.word	0x400ac000
   814cc:	20070268 	.word	0x20070268
   814d0:	00080821 	.word	0x00080821
   814d4:	000825b9 	.word	0x000825b9
   814d8:	000829cd 	.word	0x000829cd
   814dc:	000826e1 	.word	0x000826e1
   814e0:	000807cd 	.word	0x000807cd
   814e4:	00081f65 	.word	0x00081f65
   814e8:	00081fe5 	.word	0x00081fe5
   814ec:	000812c5 	.word	0x000812c5
   814f0:	00081659 	.word	0x00081659
   814f4:	000816f9 	.word	0x000816f9

000814f8 <udd_enable>:
	return true;
}


void udd_enable(void)
{
   814f8:	b580      	push	{r7, lr}
   814fa:	b082      	sub	sp, #8
   814fc:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
   814fe:	4b49      	ldr	r3, [pc, #292]	; (81624 <udd_enable+0x12c>)
   81500:	4798      	blx	r3
   81502:	6078      	str	r0, [r7, #4]
		cpu_irq_restore(flags);
		return;
	}
#else
	// SINGLE DEVICE MODE INITIALIZATION
	pmc_enable_periph_clk(ID_UOTGHS);
   81504:	2028      	movs	r0, #40	; 0x28
   81506:	4b48      	ldr	r3, [pc, #288]	; (81628 <udd_enable+0x130>)
   81508:	4798      	blx	r3
	sysclk_enable_usb();
   8150a:	4b48      	ldr	r3, [pc, #288]	; (8162c <udd_enable+0x134>)
   8150c:	4798      	blx	r3

	// Here, only the device mode is possible, then link UOTGHS interrupt to UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UOTGHS, UDD_USB_INT_LEVEL);
   8150e:	2028      	movs	r0, #40	; 0x28
   81510:	2105      	movs	r1, #5
   81512:	4b47      	ldr	r3, [pc, #284]	; (81630 <udd_enable+0x138>)
   81514:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UOTGHS);
   81516:	2028      	movs	r0, #40	; 0x28
   81518:	4b46      	ldr	r3, [pc, #280]	; (81634 <udd_enable+0x13c>)
   8151a:	4798      	blx	r3

	// Always authorize asynchrone USB interrupts to exit of sleep mode
	// For SAM USB wake up device except BACKUP mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   8151c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   81520:	4b45      	ldr	r3, [pc, #276]	; (81638 <udd_enable+0x140>)
   81522:	4798      	blx	r3
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
   81524:	4a45      	ldr	r2, [pc, #276]	; (8163c <udd_enable+0x144>)
   81526:	4b45      	ldr	r3, [pc, #276]	; (8163c <udd_enable+0x144>)
   81528:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   8152c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   81530:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	otg_force_device_mode();
   81534:	4a41      	ldr	r2, [pc, #260]	; (8163c <udd_enable+0x144>)
   81536:	4b41      	ldr	r3, [pc, #260]	; (8163c <udd_enable+0x144>)
   81538:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   8153c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   81540:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
   81544:	4a3d      	ldr	r2, [pc, #244]	; (8163c <udd_enable+0x144>)
   81546:	4b3d      	ldr	r3, [pc, #244]	; (8163c <udd_enable+0x144>)
   81548:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   8154c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   81550:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
#endif
	// Enable USB hardware
	otg_enable_pad();
   81554:	4a39      	ldr	r2, [pc, #228]	; (8163c <udd_enable+0x144>)
   81556:	4b39      	ldr	r3, [pc, #228]	; (8163c <udd_enable+0x144>)
   81558:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   8155c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   81560:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	otg_enable();
   81564:	4a35      	ldr	r2, [pc, #212]	; (8163c <udd_enable+0x144>)
   81566:	4b35      	ldr	r3, [pc, #212]	; (8163c <udd_enable+0x144>)
   81568:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   8156c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   81570:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
   81574:	4a31      	ldr	r2, [pc, #196]	; (8163c <udd_enable+0x144>)
   81576:	4b31      	ldr	r3, [pc, #196]	; (8163c <udd_enable+0x144>)
   81578:	681b      	ldr	r3, [r3, #0]
   8157a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8157e:	6013      	str	r3, [r2, #0]
# ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
# else
	udd_high_speed_disable();
   81580:	4a2e      	ldr	r2, [pc, #184]	; (8163c <udd_enable+0x144>)
   81582:	4b2e      	ldr	r3, [pc, #184]	; (8163c <udd_enable+0x144>)
   81584:	681b      	ldr	r3, [r3, #0]
   81586:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   8158a:	6013      	str	r3, [r2, #0]
# endif
#endif // USB_DEVICE_LOW_SPEED

	// Check USB clock
	otg_unfreeze_clock();
   8158c:	4a2b      	ldr	r2, [pc, #172]	; (8163c <udd_enable+0x144>)
   8158e:	4b2b      	ldr	r3, [pc, #172]	; (8163c <udd_enable+0x144>)
   81590:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   81598:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   8159c:	bf00      	nop
   8159e:	4b27      	ldr	r3, [pc, #156]	; (8163c <udd_enable+0x144>)
   815a0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   815a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   815a8:	2b00      	cmp	r3, #0
   815aa:	d0f8      	beq.n	8159e <udd_enable+0xa6>

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   815ac:	4b24      	ldr	r3, [pc, #144]	; (81640 <udd_enable+0x148>)
   815ae:	4798      	blx	r3
#endif

	otg_ack_vbus_transition();
   815b0:	4b22      	ldr	r3, [pc, #136]	; (8163c <udd_enable+0x144>)
   815b2:	2202      	movs	r2, #2
   815b4:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
   815b8:	4b20      	ldr	r3, [pc, #128]	; (8163c <udd_enable+0x144>)
   815ba:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   815be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   815c2:	2b00      	cmp	r3, #0
   815c4:	d003      	beq.n	815ce <udd_enable+0xd6>
		otg_raise_vbus_transition();
   815c6:	4b1d      	ldr	r3, [pc, #116]	; (8163c <udd_enable+0x144>)
   815c8:	2202      	movs	r2, #2
   815ca:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
	}
	otg_enable_vbus_interrupt();
   815ce:	4a1b      	ldr	r2, [pc, #108]	; (8163c <udd_enable+0x144>)
   815d0:	4b1a      	ldr	r3, [pc, #104]	; (8163c <udd_enable+0x144>)
   815d2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   815d6:	f043 0302 	orr.w	r3, r3, #2
   815da:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	otg_freeze_clock();
   815de:	4a17      	ldr	r2, [pc, #92]	; (8163c <udd_enable+0x144>)
   815e0:	4b16      	ldr	r3, [pc, #88]	; (8163c <udd_enable+0x144>)
   815e2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   815e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   815ea:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_sleep_initialized) {
   815ee:	4b15      	ldr	r3, [pc, #84]	; (81644 <udd_enable+0x14c>)
   815f0:	781b      	ldrb	r3, [r3, #0]
   815f2:	f083 0301 	eor.w	r3, r3, #1
   815f6:	b2db      	uxtb	r3, r3
   815f8:	2b00      	cmp	r3, #0
   815fa:	d009      	beq.n	81610 <udd_enable+0x118>
		udd_b_sleep_initialized = true;
   815fc:	4b11      	ldr	r3, [pc, #68]	; (81644 <udd_enable+0x14c>)
   815fe:	2201      	movs	r2, #1
   81600:	701a      	strb	r2, [r3, #0]
		// Initialize the sleep mode authorized for the USB suspend mode
		udd_b_idle = false;
   81602:	4b11      	ldr	r3, [pc, #68]	; (81648 <udd_enable+0x150>)
   81604:	2200      	movs	r2, #0
   81606:	701a      	strb	r2, [r3, #0]
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_SUSPEND);
   81608:	2003      	movs	r0, #3
   8160a:	4b10      	ldr	r3, [pc, #64]	; (8164c <udd_enable+0x154>)
   8160c:	4798      	blx	r3
   8160e:	e002      	b.n	81616 <udd_enable+0x11e>
	} else {
		udd_sleep_mode(false); // Enter idle mode
   81610:	2000      	movs	r0, #0
   81612:	4b0f      	ldr	r3, [pc, #60]	; (81650 <udd_enable+0x158>)
   81614:	4798      	blx	r3
	}
#endif

	cpu_irq_restore(flags);
   81616:	6878      	ldr	r0, [r7, #4]
   81618:	4b0e      	ldr	r3, [pc, #56]	; (81654 <udd_enable+0x15c>)
   8161a:	4798      	blx	r3
}
   8161c:	3708      	adds	r7, #8
   8161e:	46bd      	mov	sp, r7
   81620:	bd80      	pop	{r7, pc}
   81622:	bf00      	nop
   81624:	000811b5 	.word	0x000811b5
   81628:	00083901 	.word	0x00083901
   8162c:	00083015 	.word	0x00083015
   81630:	00081161 	.word	0x00081161
   81634:	00081131 	.word	0x00081131
   81638:	000839c5 	.word	0x000839c5
   8163c:	400ac000 	.word	0x400ac000
   81640:	00082685 	.word	0x00082685
   81644:	20070753 	.word	0x20070753
   81648:	20070752 	.word	0x20070752
   8164c:	0008123d 	.word	0x0008123d
   81650:	000812c5 	.word	0x000812c5
   81654:	0008120d 	.word	0x0008120d

00081658 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   81658:	b580      	push	{r7, lr}
   8165a:	b082      	sub	sp, #8
   8165c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   8165e:	4b22      	ldr	r3, [pc, #136]	; (816e8 <udd_attach+0x90>)
   81660:	4798      	blx	r3
   81662:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   81664:	2001      	movs	r0, #1
   81666:	4b21      	ldr	r3, [pc, #132]	; (816ec <udd_attach+0x94>)
   81668:	4798      	blx	r3
	otg_unfreeze_clock();
   8166a:	4a21      	ldr	r2, [pc, #132]	; (816f0 <udd_attach+0x98>)
   8166c:	4b20      	ldr	r3, [pc, #128]	; (816f0 <udd_attach+0x98>)
   8166e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   81676:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800

	// This section of clock check can be improved with a chek of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   8167a:	bf00      	nop
   8167c:	4b1c      	ldr	r3, [pc, #112]	; (816f0 <udd_attach+0x98>)
   8167e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   81686:	2b00      	cmp	r3, #0
   81688:	d0f8      	beq.n	8167c <udd_attach+0x24>

	// Authorize attach if Vbus is present
	udd_attach_device();
   8168a:	4a19      	ldr	r2, [pc, #100]	; (816f0 <udd_attach+0x98>)
   8168c:	4b18      	ldr	r3, [pc, #96]	; (816f0 <udd_attach+0x98>)
   8168e:	681b      	ldr	r3, [r3, #0]
   81690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   81694:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   81696:	4b16      	ldr	r3, [pc, #88]	; (816f0 <udd_attach+0x98>)
   81698:	2208      	movs	r2, #8
   8169a:	619a      	str	r2, [r3, #24]
	udd_enable_suspend_interrupt();
   8169c:	4b14      	ldr	r3, [pc, #80]	; (816f0 <udd_attach+0x98>)
   8169e:	2201      	movs	r2, #1
   816a0:	619a      	str	r2, [r3, #24]
	udd_enable_wake_up_interrupt();
   816a2:	4b13      	ldr	r3, [pc, #76]	; (816f0 <udd_attach+0x98>)
   816a4:	2210      	movs	r2, #16
   816a6:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   816a8:	4b11      	ldr	r3, [pc, #68]	; (816f0 <udd_attach+0x98>)
   816aa:	2204      	movs	r2, #4
   816ac:	619a      	str	r2, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
   816ae:	4b10      	ldr	r3, [pc, #64]	; (816f0 <udd_attach+0x98>)
   816b0:	2208      	movs	r2, #8
   816b2:	609a      	str	r2, [r3, #8]
	udd_ack_sof();
   816b4:	4b0e      	ldr	r3, [pc, #56]	; (816f0 <udd_attach+0x98>)
   816b6:	2204      	movs	r2, #4
   816b8:	609a      	str	r2, [r3, #8]
	udd_ack_msof();
   816ba:	4b0d      	ldr	r3, [pc, #52]	; (816f0 <udd_attach+0x98>)
   816bc:	2202      	movs	r2, #2
   816be:	609a      	str	r2, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   816c0:	4b0b      	ldr	r3, [pc, #44]	; (816f0 <udd_attach+0x98>)
   816c2:	2201      	movs	r2, #1
   816c4:	60da      	str	r2, [r3, #12]

	udd_ack_wake_up();
   816c6:	4b0a      	ldr	r3, [pc, #40]	; (816f0 <udd_attach+0x98>)
   816c8:	2210      	movs	r2, #16
   816ca:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   816cc:	4a08      	ldr	r2, [pc, #32]	; (816f0 <udd_attach+0x98>)
   816ce:	4b08      	ldr	r3, [pc, #32]	; (816f0 <udd_attach+0x98>)
   816d0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   816d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   816d8:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	cpu_irq_restore(flags);
   816dc:	6878      	ldr	r0, [r7, #4]
   816de:	4b05      	ldr	r3, [pc, #20]	; (816f4 <udd_attach+0x9c>)
   816e0:	4798      	blx	r3
}
   816e2:	3708      	adds	r7, #8
   816e4:	46bd      	mov	sp, r7
   816e6:	bd80      	pop	{r7, pc}
   816e8:	000811b5 	.word	0x000811b5
   816ec:	000812c5 	.word	0x000812c5
   816f0:	400ac000 	.word	0x400ac000
   816f4:	0008120d 	.word	0x0008120d

000816f8 <udd_detach>:


void udd_detach(void)
{
   816f8:	b580      	push	{r7, lr}
   816fa:	af00      	add	r7, sp, #0
	otg_unfreeze_clock();
   816fc:	4a0c      	ldr	r2, [pc, #48]	; (81730 <udd_detach+0x38>)
   816fe:	4b0c      	ldr	r3, [pc, #48]	; (81730 <udd_detach+0x38>)
   81700:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81704:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   81708:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   8170c:	4a08      	ldr	r2, [pc, #32]	; (81730 <udd_detach+0x38>)
   8170e:	4b08      	ldr	r3, [pc, #32]	; (81730 <udd_detach+0x38>)
   81710:	681b      	ldr	r3, [r3, #0]
   81712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   81716:	6013      	str	r3, [r2, #0]
	otg_freeze_clock();
   81718:	4a05      	ldr	r2, [pc, #20]	; (81730 <udd_detach+0x38>)
   8171a:	4b05      	ldr	r3, [pc, #20]	; (81730 <udd_detach+0x38>)
   8171c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   81724:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	udd_sleep_mode(false);
   81728:	2000      	movs	r0, #0
   8172a:	4b02      	ldr	r3, [pc, #8]	; (81734 <udd_detach+0x3c>)
   8172c:	4798      	blx	r3
}
   8172e:	bd80      	pop	{r7, pc}
   81730:	400ac000 	.word	0x400ac000
   81734:	000812c5 	.word	0x000812c5

00081738 <udd_set_address>:
#endif
}


void udd_set_address(uint8_t address)
{
   81738:	b480      	push	{r7}
   8173a:	b083      	sub	sp, #12
   8173c:	af00      	add	r7, sp, #0
   8173e:	4603      	mov	r3, r0
   81740:	71fb      	strb	r3, [r7, #7]
	udd_disable_address();
   81742:	4a0d      	ldr	r2, [pc, #52]	; (81778 <udd_set_address+0x40>)
   81744:	4b0c      	ldr	r3, [pc, #48]	; (81778 <udd_set_address+0x40>)
   81746:	681b      	ldr	r3, [r3, #0]
   81748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8174c:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   8174e:	490a      	ldr	r1, [pc, #40]	; (81778 <udd_set_address+0x40>)
   81750:	4b09      	ldr	r3, [pc, #36]	; (81778 <udd_set_address+0x40>)
   81752:	681b      	ldr	r3, [r3, #0]
   81754:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   81758:	79fb      	ldrb	r3, [r7, #7]
   8175a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8175e:	4313      	orrs	r3, r2
   81760:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   81762:	4a05      	ldr	r2, [pc, #20]	; (81778 <udd_set_address+0x40>)
   81764:	4b04      	ldr	r3, [pc, #16]	; (81778 <udd_set_address+0x40>)
   81766:	681b      	ldr	r3, [r3, #0]
   81768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8176c:	6013      	str	r3, [r2, #0]
}
   8176e:	370c      	adds	r7, #12
   81770:	46bd      	mov	sp, r7
   81772:	f85d 7b04 	ldr.w	r7, [sp], #4
   81776:	4770      	bx	lr
   81778:	400ac000 	.word	0x400ac000

0008177c <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   8177c:	b480      	push	{r7}
   8177e:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   81780:	4b05      	ldr	r3, [pc, #20]	; (81798 <udd_getaddress+0x1c>)
   81782:	681b      	ldr	r3, [r3, #0]
   81784:	b2db      	uxtb	r3, r3
   81786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8178a:	b2db      	uxtb	r3, r3
}
   8178c:	4618      	mov	r0, r3
   8178e:	46bd      	mov	sp, r7
   81790:	f85d 7b04 	ldr.w	r7, [sp], #4
   81794:	4770      	bx	lr
   81796:	bf00      	nop
   81798:	400ac000 	.word	0x400ac000

0008179c <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   8179c:	b480      	push	{r7}
   8179e:	b083      	sub	sp, #12
   817a0:	af00      	add	r7, sp, #0
   817a2:	6078      	str	r0, [r7, #4]
   817a4:	460b      	mov	r3, r1
   817a6:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   817a8:	4a05      	ldr	r2, [pc, #20]	; (817c0 <udd_set_setup_payload+0x24>)
   817aa:	687b      	ldr	r3, [r7, #4]
   817ac:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   817ae:	4a04      	ldr	r2, [pc, #16]	; (817c0 <udd_set_setup_payload+0x24>)
   817b0:	887b      	ldrh	r3, [r7, #2]
   817b2:	8193      	strh	r3, [r2, #12]
}
   817b4:	370c      	adds	r7, #12
   817b6:	46bd      	mov	sp, r7
   817b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   817bc:	4770      	bx	lr
   817be:	bf00      	nop
   817c0:	20070874 	.word	0x20070874

000817c4 <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   817c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   817c6:	b089      	sub	sp, #36	; 0x24
   817c8:	af02      	add	r7, sp, #8
   817ca:	4603      	mov	r3, r0
   817cc:	71fb      	strb	r3, [r7, #7]
   817ce:	460b      	mov	r3, r1
   817d0:	71bb      	strb	r3, [r7, #6]
   817d2:	4613      	mov	r3, r2
   817d4:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
   817d6:	79fb      	ldrb	r3, [r7, #7]
   817d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   817dc:	2b00      	cmp	r3, #0
   817de:	bf14      	ite	ne
   817e0:	2301      	movne	r3, #1
   817e2:	2300      	moveq	r3, #0
   817e4:	74bb      	strb	r3, [r7, #18]
	ep = ep & USB_EP_ADDR_MASK;
   817e6:	79fb      	ldrb	r3, [r7, #7]
   817e8:	f003 030f 	and.w	r3, r3, #15
   817ec:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   817ee:	79fb      	ldrb	r3, [r7, #7]
   817f0:	2b01      	cmp	r3, #1
   817f2:	d901      	bls.n	817f8 <udd_ep_alloc+0x34>
		return false;
   817f4:	2300      	movs	r3, #0
   817f6:	e154      	b.n	81aa2 <udd_ep_alloc+0x2de>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   817f8:	4bac      	ldr	r3, [pc, #688]	; (81aac <udd_ep_alloc+0x2e8>)
   817fa:	69da      	ldr	r2, [r3, #28]
   817fc:	79fb      	ldrb	r3, [r7, #7]
   817fe:	2101      	movs	r1, #1
   81800:	fa01 f303 	lsl.w	r3, r1, r3
   81804:	4013      	ands	r3, r2
   81806:	2b00      	cmp	r3, #0
   81808:	d001      	beq.n	8180e <udd_ep_alloc+0x4a>
		return false;
   8180a:	2300      	movs	r3, #0
   8180c:	e149      	b.n	81aa2 <udd_ep_alloc+0x2de>
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   8180e:	79bb      	ldrb	r3, [r7, #6]
   81810:	f003 0303 	and.w	r3, r3, #3
   81814:	2b02      	cmp	r3, #2
   81816:	d009      	beq.n	8182c <udd_ep_alloc+0x68>
   81818:	2b03      	cmp	r3, #3
   8181a:	d004      	beq.n	81826 <udd_ep_alloc+0x62>
   8181c:	2b01      	cmp	r3, #1
   8181e:	d108      	bne.n	81832 <udd_ep_alloc+0x6e>
	case USB_EP_TYPE_ISOCHRONOUS:
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   81820:	2302      	movs	r3, #2
   81822:	757b      	strb	r3, [r7, #21]
		break;
   81824:	e007      	b.n	81836 <udd_ep_alloc+0x72>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   81826:	2301      	movs	r3, #1
   81828:	757b      	strb	r3, [r7, #21]
		break;
   8182a:	e004      	b.n	81836 <udd_ep_alloc+0x72>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   8182c:	2302      	movs	r3, #2
   8182e:	757b      	strb	r3, [r7, #21]
		break;
   81830:	e001      	b.n	81836 <udd_ep_alloc+0x72>
	default:
		Assert(false);
		return false;
   81832:	2300      	movs	r3, #0
   81834:	e135      	b.n	81aa2 <udd_ep_alloc+0x2de>
	}
	switch (nb_bank) {
   81836:	7d7b      	ldrb	r3, [r7, #21]
   81838:	2b02      	cmp	r3, #2
   8183a:	d006      	beq.n	8184a <udd_ep_alloc+0x86>
   8183c:	2b03      	cmp	r3, #3
   8183e:	d007      	beq.n	81850 <udd_ep_alloc+0x8c>
   81840:	2b01      	cmp	r3, #1
   81842:	d108      	bne.n	81856 <udd_ep_alloc+0x92>
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   81844:	2300      	movs	r3, #0
   81846:	753b      	strb	r3, [r7, #20]
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
   81848:	e007      	b.n	8185a <udd_ep_alloc+0x96>
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   8184a:	2301      	movs	r3, #1
   8184c:	753b      	strb	r3, [r7, #20]
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
   8184e:	e004      	b.n	8185a <udd_ep_alloc+0x96>
	case 3:
		bank = UOTGHS_DEVEPTCFG_EPBK_3_BANK >>
   81850:	2302      	movs	r3, #2
   81852:	753b      	strb	r3, [r7, #20]
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
   81854:	e001      	b.n	8185a <udd_ep_alloc+0x96>
	default:
		Assert(false);
		return false;
   81856:	2300      	movs	r3, #0
   81858:	e123      	b.n	81aa2 <udd_ep_alloc+0x2de>
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8185a:	79fb      	ldrb	r3, [r7, #7]
   8185c:	009b      	lsls	r3, r3, #2
   8185e:	4a94      	ldr	r2, [pc, #592]	; (81ab0 <udd_ep_alloc+0x2ec>)
   81860:	441a      	add	r2, r3
   81862:	79fb      	ldrb	r3, [r7, #7]
   81864:	0099      	lsls	r1, r3, #2
   81866:	4b92      	ldr	r3, [pc, #584]	; (81ab0 <udd_ep_alloc+0x2ec>)
   81868:	440b      	add	r3, r1
   8186a:	681b      	ldr	r3, [r3, #0]
   8186c:	f423 53cb 	bic.w	r3, r3, #6496	; 0x1960
   81870:	f023 031c 	bic.w	r3, r3, #28
   81874:	79b9      	ldrb	r1, [r7, #6]
   81876:	02c9      	lsls	r1, r1, #11
   81878:	f401 50c0 	and.w	r0, r1, #6144	; 0x1800
   8187c:	7cb9      	ldrb	r1, [r7, #18]
   8187e:	2900      	cmp	r1, #0
   81880:	d002      	beq.n	81888 <udd_ep_alloc+0xc4>
   81882:	f44f 7180 	mov.w	r1, #256	; 0x100
   81886:	e000      	b.n	8188a <udd_ep_alloc+0xc6>
   81888:	2100      	movs	r1, #0
   8188a:	4308      	orrs	r0, r1
   8188c:	88b9      	ldrh	r1, [r7, #4]
   8188e:	2908      	cmp	r1, #8
   81890:	d903      	bls.n	8189a <udd_ep_alloc+0xd6>
   81892:	88b9      	ldrh	r1, [r7, #4]
   81894:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   81898:	da08      	bge.n	818ac <udd_ep_alloc+0xe8>
   8189a:	88b9      	ldrh	r1, [r7, #4]
   8189c:	2908      	cmp	r1, #8
   8189e:	d903      	bls.n	818a8 <udd_ep_alloc+0xe4>
   818a0:	88b9      	ldrh	r1, [r7, #4]
   818a2:	0049      	lsls	r1, r1, #1
   818a4:	3901      	subs	r1, #1
   818a6:	e003      	b.n	818b0 <udd_ep_alloc+0xec>
   818a8:	210f      	movs	r1, #15
   818aa:	e001      	b.n	818b0 <udd_ep_alloc+0xec>
   818ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
   818b0:	fab1 f181 	clz	r1, r1
   818b4:	f1c1 011c 	rsb	r1, r1, #28
   818b8:	0109      	lsls	r1, r1, #4
   818ba:	4308      	orrs	r0, r1
   818bc:	7d39      	ldrb	r1, [r7, #20]
   818be:	0089      	lsls	r1, r1, #2
   818c0:	f001 010c 	and.w	r1, r1, #12
   818c4:	4308      	orrs	r0, r1
   818c6:	f641 117c 	movw	r1, #6524	; 0x197c
   818ca:	4001      	ands	r1, r0
   818cc:	430b      	orrs	r3, r1
   818ce:	6013      	str	r3, [r2, #0]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   818d0:	79fb      	ldrb	r3, [r7, #7]
   818d2:	2201      	movs	r2, #1
   818d4:	fa02 f303 	lsl.w	r3, r2, r3
   818d8:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   818da:	2301      	movs	r3, #1
   818dc:	74fb      	strb	r3, [r7, #19]
   818de:	e02a      	b.n	81936 <udd_ep_alloc+0x172>
		if (Is_udd_endpoint_enabled(i)) {
   818e0:	4b72      	ldr	r3, [pc, #456]	; (81aac <udd_ep_alloc+0x2e8>)
   818e2:	69da      	ldr	r2, [r3, #28]
   818e4:	7cfb      	ldrb	r3, [r7, #19]
   818e6:	2101      	movs	r1, #1
   818e8:	fa01 f303 	lsl.w	r3, r1, r3
   818ec:	4013      	ands	r3, r2
   818ee:	2b00      	cmp	r3, #0
   818f0:	d01e      	beq.n	81930 <udd_ep_alloc+0x16c>
			ep_allocated |= 1 << i;
   818f2:	7cfb      	ldrb	r3, [r7, #19]
   818f4:	2201      	movs	r2, #1
   818f6:	fa02 f303 	lsl.w	r3, r2, r3
   818fa:	b29a      	uxth	r2, r3
   818fc:	8afb      	ldrh	r3, [r7, #22]
   818fe:	4313      	orrs	r3, r2
   81900:	b29b      	uxth	r3, r3
   81902:	82fb      	strh	r3, [r7, #22]
			udd_disable_endpoint(i);
   81904:	4969      	ldr	r1, [pc, #420]	; (81aac <udd_ep_alloc+0x2e8>)
   81906:	4b69      	ldr	r3, [pc, #420]	; (81aac <udd_ep_alloc+0x2e8>)
   81908:	69da      	ldr	r2, [r3, #28]
   8190a:	7cfb      	ldrb	r3, [r7, #19]
   8190c:	2001      	movs	r0, #1
   8190e:	fa00 f303 	lsl.w	r3, r0, r3
   81912:	43db      	mvns	r3, r3
   81914:	4013      	ands	r3, r2
   81916:	61cb      	str	r3, [r1, #28]
			udd_unallocate_memory(i);
   81918:	7cfb      	ldrb	r3, [r7, #19]
   8191a:	009a      	lsls	r2, r3, #2
   8191c:	4b64      	ldr	r3, [pc, #400]	; (81ab0 <udd_ep_alloc+0x2ec>)
   8191e:	4413      	add	r3, r2
   81920:	7cfa      	ldrb	r2, [r7, #19]
   81922:	0091      	lsls	r1, r2, #2
   81924:	4a62      	ldr	r2, [pc, #392]	; (81ab0 <udd_ep_alloc+0x2ec>)
   81926:	440a      	add	r2, r1
   81928:	6812      	ldr	r2, [r2, #0]
   8192a:	f022 0202 	bic.w	r2, r2, #2
   8192e:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   81930:	7cfb      	ldrb	r3, [r7, #19]
   81932:	3b01      	subs	r3, #1
   81934:	74fb      	strb	r3, [r7, #19]
   81936:	7cfa      	ldrb	r2, [r7, #19]
   81938:	79fb      	ldrb	r3, [r7, #7]
   8193a:	429a      	cmp	r2, r3
   8193c:	d8d0      	bhi.n	818e0 <udd_ep_alloc+0x11c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8193e:	79fb      	ldrb	r3, [r7, #7]
   81940:	74fb      	strb	r3, [r7, #19]
   81942:	e0a9      	b.n	81a98 <udd_ep_alloc+0x2d4>
		if (ep_allocated & (1 << i)) {
   81944:	8afa      	ldrh	r2, [r7, #22]
   81946:	7cfb      	ldrb	r3, [r7, #19]
   81948:	fa42 f303 	asr.w	r3, r2, r3
   8194c:	f003 0301 	and.w	r3, r3, #1
   81950:	2b00      	cmp	r3, #0
   81952:	f000 809e 	beq.w	81a92 <udd_ep_alloc+0x2ce>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   81956:	7cfb      	ldrb	r3, [r7, #19]
   81958:	1e5a      	subs	r2, r3, #1
   8195a:	4613      	mov	r3, r2
   8195c:	005b      	lsls	r3, r3, #1
   8195e:	4413      	add	r3, r2
   81960:	00db      	lsls	r3, r3, #3
   81962:	4a54      	ldr	r2, [pc, #336]	; (81ab4 <udd_ep_alloc+0x2f0>)
   81964:	4413      	add	r3, r2
   81966:	60fb      	str	r3, [r7, #12]
			bool b_restart = ptr_job->busy;
   81968:	68fb      	ldr	r3, [r7, #12]
   8196a:	7d1b      	ldrb	r3, [r3, #20]
   8196c:	f3c3 0300 	ubfx	r3, r3, #0, #1
   81970:	b2db      	uxtb	r3, r3
   81972:	2b00      	cmp	r3, #0
   81974:	bf14      	ite	ne
   81976:	2301      	movne	r3, #1
   81978:	2300      	moveq	r3, #0
   8197a:	72fb      	strb	r3, [r7, #11]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   8197c:	68fa      	ldr	r2, [r7, #12]
   8197e:	7d13      	ldrb	r3, [r2, #20]
   81980:	f36f 0300 	bfc	r3, #0, #1
   81984:	7513      	strb	r3, [r2, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   81986:	7cfb      	ldrb	r3, [r7, #19]
   81988:	009a      	lsls	r2, r3, #2
   8198a:	4b49      	ldr	r3, [pc, #292]	; (81ab0 <udd_ep_alloc+0x2ec>)
   8198c:	4413      	add	r3, r2
   8198e:	7cfa      	ldrb	r2, [r7, #19]
   81990:	0091      	lsls	r1, r2, #2
   81992:	4a47      	ldr	r2, [pc, #284]	; (81ab0 <udd_ep_alloc+0x2ec>)
   81994:	440a      	add	r2, r1
   81996:	6812      	ldr	r2, [r2, #0]
   81998:	f042 0202 	orr.w	r2, r2, #2
   8199c:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint(i);
   8199e:	4943      	ldr	r1, [pc, #268]	; (81aac <udd_ep_alloc+0x2e8>)
   819a0:	4b42      	ldr	r3, [pc, #264]	; (81aac <udd_ep_alloc+0x2e8>)
   819a2:	69da      	ldr	r2, [r3, #28]
   819a4:	7cfb      	ldrb	r3, [r7, #19]
   819a6:	2001      	movs	r0, #1
   819a8:	fa00 f303 	lsl.w	r3, r0, r3
   819ac:	4313      	orrs	r3, r2
   819ae:	61cb      	str	r3, [r1, #28]
			if (!Is_udd_endpoint_configured(i)) {
   819b0:	7cfb      	ldrb	r3, [r7, #19]
   819b2:	009a      	lsls	r2, r3, #2
   819b4:	4b40      	ldr	r3, [pc, #256]	; (81ab8 <udd_ep_alloc+0x2f4>)
   819b6:	4413      	add	r3, r2
   819b8:	681b      	ldr	r3, [r3, #0]
   819ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   819be:	2b00      	cmp	r3, #0
   819c0:	d11b      	bne.n	819fa <udd_ep_alloc+0x236>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   819c2:	68fb      	ldr	r3, [r7, #12]
   819c4:	681b      	ldr	r3, [r3, #0]
   819c6:	2b00      	cmp	r3, #0
   819c8:	d101      	bne.n	819ce <udd_ep_alloc+0x20a>
					return false;
   819ca:	2300      	movs	r3, #0
   819cc:	e069      	b.n	81aa2 <udd_ep_alloc+0x2de>
				}
				if (Is_udd_endpoint_in(i)) {
   819ce:	7cfb      	ldrb	r3, [r7, #19]
   819d0:	009a      	lsls	r2, r3, #2
   819d2:	4b37      	ldr	r3, [pc, #220]	; (81ab0 <udd_ep_alloc+0x2ec>)
   819d4:	4413      	add	r3, r2
   819d6:	681b      	ldr	r3, [r3, #0]
   819d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
   819dc:	2b00      	cmp	r3, #0
   819de:	d003      	beq.n	819e8 <udd_ep_alloc+0x224>
					i |= USB_EP_DIR_IN;
   819e0:	7cfb      	ldrb	r3, [r7, #19]
   819e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   819e6:	74fb      	strb	r3, [r7, #19]
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   819e8:	68fb      	ldr	r3, [r7, #12]
   819ea:	681b      	ldr	r3, [r3, #0]
   819ec:	68fa      	ldr	r2, [r7, #12]
   819ee:	68d1      	ldr	r1, [r2, #12]
   819f0:	7cfa      	ldrb	r2, [r7, #19]
   819f2:	2001      	movs	r0, #1
   819f4:	4798      	blx	r3
						ptr_job->buf_cnt, i);
				return false;
   819f6:	2300      	movs	r3, #0
   819f8:	e053      	b.n	81aa2 <udd_ep_alloc+0x2de>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   819fa:	7cfb      	ldrb	r3, [r7, #19]
   819fc:	009a      	lsls	r2, r3, #2
   819fe:	4b2c      	ldr	r3, [pc, #176]	; (81ab0 <udd_ep_alloc+0x2ec>)
   81a00:	4413      	add	r3, r2
   81a02:	7cfa      	ldrb	r2, [r7, #19]
   81a04:	0091      	lsls	r1, r2, #2
   81a06:	4a2a      	ldr	r2, [pc, #168]	; (81ab0 <udd_ep_alloc+0x2ec>)
   81a08:	440a      	add	r2, r1
   81a0a:	6812      	ldr	r2, [r2, #0]
   81a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   81a10:	601a      	str	r2, [r3, #0]
			if (b_restart) {
   81a12:	7afb      	ldrb	r3, [r7, #11]
   81a14:	2b00      	cmp	r3, #0
   81a16:	d03c      	beq.n	81a92 <udd_ep_alloc+0x2ce>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   81a18:	68fb      	ldr	r3, [r7, #12]
   81a1a:	68da      	ldr	r2, [r3, #12]
   81a1c:	68fb      	ldr	r3, [r7, #12]
   81a1e:	691b      	ldr	r3, [r3, #16]
   81a20:	1ad2      	subs	r2, r2, r3
   81a22:	68fb      	ldr	r3, [r7, #12]
   81a24:	60da      	str	r2, [r3, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   81a26:	7cfb      	ldrb	r3, [r7, #19]
   81a28:	009a      	lsls	r2, r3, #2
   81a2a:	4b21      	ldr	r3, [pc, #132]	; (81ab0 <udd_ep_alloc+0x2ec>)
   81a2c:	4413      	add	r3, r2
   81a2e:	681b      	ldr	r3, [r3, #0]
   81a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
   81a34:	2b00      	cmp	r3, #0
   81a36:	d004      	beq.n	81a42 <udd_ep_alloc+0x27e>
   81a38:	7cfb      	ldrb	r3, [r7, #19]
   81a3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   81a3e:	b2db      	uxtb	r3, r3
   81a40:	e000      	b.n	81a44 <udd_ep_alloc+0x280>
   81a42:	7cfb      	ldrb	r3, [r7, #19]
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   81a44:	68fa      	ldr	r2, [r7, #12]
   81a46:	7d12      	ldrb	r2, [r2, #20]
   81a48:	f3c2 0240 	ubfx	r2, r2, #1, #1
   81a4c:	b2d2      	uxtb	r2, r2
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   81a4e:	2a00      	cmp	r2, #0
   81a50:	bf14      	ite	ne
   81a52:	2201      	movne	r2, #1
   81a54:	2200      	moveq	r2, #0
   81a56:	b2d6      	uxtb	r6, r2
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
   81a58:	68fa      	ldr	r2, [r7, #12]
   81a5a:	6851      	ldr	r1, [r2, #4]
   81a5c:	68fa      	ldr	r2, [r7, #12]
   81a5e:	68d2      	ldr	r2, [r2, #12]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   81a60:	188d      	adds	r5, r1, r2
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
   81a62:	68fa      	ldr	r2, [r7, #12]
   81a64:	6891      	ldr	r1, [r2, #8]
							- ptr_job->buf_cnt,
   81a66:	68fa      	ldr	r2, [r7, #12]
   81a68:	68d2      	ldr	r2, [r2, #12]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   81a6a:	1a8c      	subs	r4, r1, r2
   81a6c:	68fa      	ldr	r2, [r7, #12]
   81a6e:	6812      	ldr	r2, [r2, #0]
   81a70:	9200      	str	r2, [sp, #0]
   81a72:	4618      	mov	r0, r3
   81a74:	4631      	mov	r1, r6
   81a76:	462a      	mov	r2, r5
   81a78:	4623      	mov	r3, r4
   81a7a:	4c10      	ldr	r4, [pc, #64]	; (81abc <udd_ep_alloc+0x2f8>)
   81a7c:	47a0      	blx	r4
   81a7e:	4603      	mov	r3, r0
   81a80:	72fb      	strb	r3, [r7, #11]
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   81a82:	7afb      	ldrb	r3, [r7, #11]
   81a84:	f083 0301 	eor.w	r3, r3, #1
   81a88:	b2db      	uxtb	r3, r3
   81a8a:	2b00      	cmp	r3, #0
   81a8c:	d001      	beq.n	81a92 <udd_ep_alloc+0x2ce>
					dbg_print("ErrReRun%d ", i);
					return false;
   81a8e:	2300      	movs	r3, #0
   81a90:	e007      	b.n	81aa2 <udd_ep_alloc+0x2de>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   81a92:	7cfb      	ldrb	r3, [r7, #19]
   81a94:	3301      	adds	r3, #1
   81a96:	74fb      	strb	r3, [r7, #19]
   81a98:	7cfb      	ldrb	r3, [r7, #19]
   81a9a:	2b01      	cmp	r3, #1
   81a9c:	f67f af52 	bls.w	81944 <udd_ep_alloc+0x180>
					return false;
				}
			}
		}
	}
	return true;
   81aa0:	2301      	movs	r3, #1
}
   81aa2:	4618      	mov	r0, r3
   81aa4:	371c      	adds	r7, #28
   81aa6:	46bd      	mov	sp, r7
   81aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81aaa:	bf00      	nop
   81aac:	400ac000 	.word	0x400ac000
   81ab0:	400ac100 	.word	0x400ac100
   81ab4:	2007075c 	.word	0x2007075c
   81ab8:	400ac130 	.word	0x400ac130
   81abc:	00081db9 	.word	0x00081db9

00081ac0 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   81ac0:	b580      	push	{r7, lr}
   81ac2:	b084      	sub	sp, #16
   81ac4:	af00      	add	r7, sp, #0
   81ac6:	4603      	mov	r3, r0
   81ac8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81aca:	79fb      	ldrb	r3, [r7, #7]
   81acc:	f003 030f 	and.w	r3, r3, #15
   81ad0:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep_index) {
   81ad2:	7bfb      	ldrb	r3, [r7, #15]
   81ad4:	2b01      	cmp	r3, #1
   81ad6:	d900      	bls.n	81ada <udd_ep_free+0x1a>
		return;
   81ad8:	e027      	b.n	81b2a <udd_ep_free+0x6a>
	}
	udd_disable_endpoint(ep_index);
   81ada:	4915      	ldr	r1, [pc, #84]	; (81b30 <udd_ep_free+0x70>)
   81adc:	4b14      	ldr	r3, [pc, #80]	; (81b30 <udd_ep_free+0x70>)
   81ade:	69da      	ldr	r2, [r3, #28]
   81ae0:	7bfb      	ldrb	r3, [r7, #15]
   81ae2:	2001      	movs	r0, #1
   81ae4:	fa00 f303 	lsl.w	r3, r0, r3
   81ae8:	43db      	mvns	r3, r3
   81aea:	4013      	ands	r3, r2
   81aec:	61cb      	str	r3, [r1, #28]
	udd_unallocate_memory(ep_index);
   81aee:	7bfb      	ldrb	r3, [r7, #15]
   81af0:	009a      	lsls	r2, r3, #2
   81af2:	4b10      	ldr	r3, [pc, #64]	; (81b34 <udd_ep_free+0x74>)
   81af4:	4413      	add	r3, r2
   81af6:	7bfa      	ldrb	r2, [r7, #15]
   81af8:	0091      	lsls	r1, r2, #2
   81afa:	4a0e      	ldr	r2, [pc, #56]	; (81b34 <udd_ep_free+0x74>)
   81afc:	440a      	add	r2, r1
   81afe:	6812      	ldr	r2, [r2, #0]
   81b00:	f022 0202 	bic.w	r2, r2, #2
   81b04:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   81b06:	79fb      	ldrb	r3, [r7, #7]
   81b08:	4618      	mov	r0, r3
   81b0a:	4b0b      	ldr	r3, [pc, #44]	; (81b38 <udd_ep_free+0x78>)
   81b0c:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   81b0e:	7bfb      	ldrb	r3, [r7, #15]
   81b10:	1e5a      	subs	r2, r3, #1
   81b12:	490a      	ldr	r1, [pc, #40]	; (81b3c <udd_ep_free+0x7c>)
   81b14:	4613      	mov	r3, r2
   81b16:	005b      	lsls	r3, r3, #1
   81b18:	4413      	add	r3, r2
   81b1a:	00db      	lsls	r3, r3, #3
   81b1c:	440b      	add	r3, r1
   81b1e:	f103 0210 	add.w	r2, r3, #16
   81b22:	7913      	ldrb	r3, [r2, #4]
   81b24:	f36f 0382 	bfc	r3, #2, #1
   81b28:	7113      	strb	r3, [r2, #4]
}
   81b2a:	3710      	adds	r7, #16
   81b2c:	46bd      	mov	sp, r7
   81b2e:	bd80      	pop	{r7, pc}
   81b30:	400ac000 	.word	0x400ac000
   81b34:	400ac100 	.word	0x400ac100
   81b38:	00082725 	.word	0x00082725
   81b3c:	2007075c 	.word	0x2007075c

00081b40 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   81b40:	b480      	push	{r7}
   81b42:	b085      	sub	sp, #20
   81b44:	af00      	add	r7, sp, #0
   81b46:	4603      	mov	r3, r0
   81b48:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81b4a:	79fb      	ldrb	r3, [r7, #7]
   81b4c:	f003 030f 	and.w	r3, r3, #15
   81b50:	73fb      	strb	r3, [r7, #15]
	return Is_udd_endpoint_stall_requested(ep_index);
   81b52:	7bfb      	ldrb	r3, [r7, #15]
   81b54:	009a      	lsls	r2, r3, #2
   81b56:	4b08      	ldr	r3, [pc, #32]	; (81b78 <udd_ep_is_halted+0x38>)
   81b58:	4413      	add	r3, r2
   81b5a:	681b      	ldr	r3, [r3, #0]
   81b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   81b60:	2b00      	cmp	r3, #0
   81b62:	bf14      	ite	ne
   81b64:	2301      	movne	r3, #1
   81b66:	2300      	moveq	r3, #0
   81b68:	b2db      	uxtb	r3, r3
}
   81b6a:	4618      	mov	r0, r3
   81b6c:	3714      	adds	r7, #20
   81b6e:	46bd      	mov	sp, r7
   81b70:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b74:	4770      	bx	lr
   81b76:	bf00      	nop
   81b78:	400ac1c0 	.word	0x400ac1c0

00081b7c <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   81b7c:	b580      	push	{r7, lr}
   81b7e:	b086      	sub	sp, #24
   81b80:	af00      	add	r7, sp, #0
   81b82:	4603      	mov	r3, r0
   81b84:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81b86:	79fb      	ldrb	r3, [r7, #7]
   81b88:	f003 030f 	and.w	r3, r3, #15
   81b8c:	75fb      	strb	r3, [r7, #23]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   81b8e:	7dfb      	ldrb	r3, [r7, #23]
   81b90:	1e5a      	subs	r2, r3, #1
   81b92:	4613      	mov	r3, r2
   81b94:	005b      	lsls	r3, r3, #1
   81b96:	4413      	add	r3, r2
   81b98:	00db      	lsls	r3, r3, #3
   81b9a:	4a36      	ldr	r2, [pc, #216]	; (81c74 <udd_ep_set_halt+0xf8>)
   81b9c:	4413      	add	r3, r2
   81b9e:	613b      	str	r3, [r7, #16]
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   81ba0:	7dfb      	ldrb	r3, [r7, #23]
   81ba2:	2b01      	cmp	r3, #1
   81ba4:	d901      	bls.n	81baa <udd_ep_set_halt+0x2e>
		return false;
   81ba6:	2300      	movs	r3, #0
   81ba8:	e060      	b.n	81c6c <udd_ep_set_halt+0xf0>
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   81baa:	7dfb      	ldrb	r3, [r7, #23]
   81bac:	009a      	lsls	r2, r3, #2
   81bae:	4b32      	ldr	r3, [pc, #200]	; (81c78 <udd_ep_set_halt+0xfc>)
   81bb0:	4413      	add	r3, r2
   81bb2:	681b      	ldr	r3, [r3, #0]
   81bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   81bb8:	2b00      	cmp	r3, #0
   81bba:	d106      	bne.n	81bca <udd_ep_set_halt+0x4e>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   81bbc:	693b      	ldr	r3, [r7, #16]
   81bbe:	7d1b      	ldrb	r3, [r3, #20]
   81bc0:	f003 0304 	and.w	r3, r3, #4
   81bc4:	b2db      	uxtb	r3, r3
   81bc6:	2b00      	cmp	r3, #0
   81bc8:	d001      	beq.n	81bce <udd_ep_set_halt+0x52>
		return true; // Already STALL
   81bca:	2301      	movs	r3, #1
   81bcc:	e04e      	b.n	81c6c <udd_ep_set_halt+0xf0>
	}

	if (ptr_job->busy == true) {
   81bce:	693b      	ldr	r3, [r7, #16]
   81bd0:	7d1b      	ldrb	r3, [r3, #20]
   81bd2:	f003 0301 	and.w	r3, r3, #1
   81bd6:	b2db      	uxtb	r3, r3
   81bd8:	2b00      	cmp	r3, #0
   81bda:	d001      	beq.n	81be0 <udd_ep_set_halt+0x64>
		return false; // Job on going, stall impossible
   81bdc:	2300      	movs	r3, #0
   81bde:	e045      	b.n	81c6c <udd_ep_set_halt+0xf0>
	}

	flags = cpu_irq_save();
   81be0:	4b26      	ldr	r3, [pc, #152]	; (81c7c <udd_ep_set_halt+0x100>)
   81be2:	4798      	blx	r3
   81be4:	60f8      	str	r0, [r7, #12]
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   81be6:	79fb      	ldrb	r3, [r7, #7]
   81be8:	b25b      	sxtb	r3, r3
   81bea:	2b00      	cmp	r3, #0
   81bec:	da21      	bge.n	81c32 <udd_ep_set_halt+0xb6>
   81bee:	7dfb      	ldrb	r3, [r7, #23]
   81bf0:	009a      	lsls	r2, r3, #2
   81bf2:	4b23      	ldr	r3, [pc, #140]	; (81c80 <udd_ep_set_halt+0x104>)
   81bf4:	4413      	add	r3, r2
   81bf6:	681b      	ldr	r3, [r3, #0]
   81bf8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   81bfc:	0b1b      	lsrs	r3, r3, #12
   81bfe:	2b00      	cmp	r3, #0
   81c00:	d017      	beq.n	81c32 <udd_ep_set_halt+0xb6>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   81c02:	693a      	ldr	r2, [r7, #16]
   81c04:	7d13      	ldrb	r3, [r2, #20]
   81c06:	f043 0304 	orr.w	r3, r3, #4
   81c0a:	7513      	strb	r3, [r2, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   81c0c:	7dfb      	ldrb	r3, [r7, #23]
   81c0e:	009a      	lsls	r2, r3, #2
   81c10:	4b1c      	ldr	r3, [pc, #112]	; (81c84 <udd_ep_set_halt+0x108>)
   81c12:	4413      	add	r3, r2
   81c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81c18:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_interrupt(ep_index);
   81c1a:	4a1b      	ldr	r2, [pc, #108]	; (81c88 <udd_ep_set_halt+0x10c>)
   81c1c:	7dfb      	ldrb	r3, [r7, #23]
   81c1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81c22:	fa01 f303 	lsl.w	r3, r1, r3
   81c26:	6193      	str	r3, [r2, #24]
		cpu_irq_restore(flags);
   81c28:	68f8      	ldr	r0, [r7, #12]
   81c2a:	4b18      	ldr	r3, [pc, #96]	; (81c8c <udd_ep_set_halt+0x110>)
   81c2c:	4798      	blx	r3
		return true;
   81c2e:	2301      	movs	r3, #1
   81c30:	e01c      	b.n	81c6c <udd_ep_set_halt+0xf0>
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   81c32:	7dfb      	ldrb	r3, [r7, #23]
   81c34:	009a      	lsls	r2, r3, #2
   81c36:	4b16      	ldr	r3, [pc, #88]	; (81c90 <udd_ep_set_halt+0x114>)
   81c38:	4413      	add	r3, r2
   81c3a:	7dfa      	ldrb	r2, [r7, #23]
   81c3c:	0091      	lsls	r1, r2, #2
   81c3e:	4a14      	ldr	r2, [pc, #80]	; (81c90 <udd_ep_set_halt+0x114>)
   81c40:	440a      	add	r2, r1
   81c42:	6812      	ldr	r2, [r2, #0]
   81c44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   81c48:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   81c4a:	7dfb      	ldrb	r3, [r7, #23]
   81c4c:	009a      	lsls	r2, r3, #2
   81c4e:	4b11      	ldr	r3, [pc, #68]	; (81c94 <udd_ep_set_halt+0x118>)
   81c50:	4413      	add	r3, r2
   81c52:	2240      	movs	r2, #64	; 0x40
   81c54:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   81c56:	7dfb      	ldrb	r3, [r7, #23]
   81c58:	009a      	lsls	r2, r3, #2
   81c5a:	4b0a      	ldr	r3, [pc, #40]	; (81c84 <udd_ep_set_halt+0x108>)
   81c5c:	4413      	add	r3, r2
   81c5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81c62:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
   81c64:	68f8      	ldr	r0, [r7, #12]
   81c66:	4b09      	ldr	r3, [pc, #36]	; (81c8c <udd_ep_set_halt+0x110>)
   81c68:	4798      	blx	r3
	return true;
   81c6a:	2301      	movs	r3, #1
}
   81c6c:	4618      	mov	r0, r3
   81c6e:	3718      	adds	r7, #24
   81c70:	46bd      	mov	sp, r7
   81c72:	bd80      	pop	{r7, pc}
   81c74:	2007075c 	.word	0x2007075c
   81c78:	400ac1c0 	.word	0x400ac1c0
   81c7c:	000811b5 	.word	0x000811b5
   81c80:	400ac130 	.word	0x400ac130
   81c84:	400ac1f0 	.word	0x400ac1f0
   81c88:	400ac000 	.word	0x400ac000
   81c8c:	0008120d 	.word	0x0008120d
   81c90:	400ac100 	.word	0x400ac100
   81c94:	400ac160 	.word	0x400ac160

00081c98 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   81c98:	b580      	push	{r7, lr}
   81c9a:	b084      	sub	sp, #16
   81c9c:	af00      	add	r7, sp, #0
   81c9e:	4603      	mov	r3, r0
   81ca0:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81ca2:	79fb      	ldrb	r3, [r7, #7]
   81ca4:	f003 030f 	and.w	r3, r3, #15
   81ca8:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   81caa:	7bbb      	ldrb	r3, [r7, #14]
   81cac:	1e5a      	subs	r2, r3, #1
   81cae:	4613      	mov	r3, r2
   81cb0:	005b      	lsls	r3, r3, #1
   81cb2:	4413      	add	r3, r2
   81cb4:	00db      	lsls	r3, r3, #3
   81cb6:	4a38      	ldr	r2, [pc, #224]	; (81d98 <udd_ep_clear_halt+0x100>)
   81cb8:	4413      	add	r3, r2
   81cba:	60bb      	str	r3, [r7, #8]
	bool b_stall_cleared = false;
   81cbc:	2300      	movs	r3, #0
   81cbe:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index)
   81cc0:	7bbb      	ldrb	r3, [r7, #14]
   81cc2:	2b01      	cmp	r3, #1
   81cc4:	d901      	bls.n	81cca <udd_ep_clear_halt+0x32>
		return false;
   81cc6:	2300      	movs	r3, #0
   81cc8:	e062      	b.n	81d90 <udd_ep_clear_halt+0xf8>

	if (ptr_job->stall_requested) {
   81cca:	68bb      	ldr	r3, [r7, #8]
   81ccc:	7d1b      	ldrb	r3, [r3, #20]
   81cce:	f003 0304 	and.w	r3, r3, #4
   81cd2:	b2db      	uxtb	r3, r3
   81cd4:	2b00      	cmp	r3, #0
   81cd6:	d014      	beq.n	81d02 <udd_ep_clear_halt+0x6a>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   81cd8:	68ba      	ldr	r2, [r7, #8]
   81cda:	7d13      	ldrb	r3, [r2, #20]
   81cdc:	f36f 0382 	bfc	r3, #2, #1
   81ce0:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
   81ce2:	7bbb      	ldrb	r3, [r7, #14]
   81ce4:	009a      	lsls	r2, r3, #2
   81ce6:	4b2d      	ldr	r3, [pc, #180]	; (81d9c <udd_ep_clear_halt+0x104>)
   81ce8:	4413      	add	r3, r2
   81cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81cee:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep_index);
   81cf0:	4a2b      	ldr	r2, [pc, #172]	; (81da0 <udd_ep_clear_halt+0x108>)
   81cf2:	7bbb      	ldrb	r3, [r7, #14]
   81cf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81cf8:	fa01 f303 	lsl.w	r3, r1, r3
   81cfc:	6153      	str	r3, [r2, #20]
		b_stall_cleared = true;
   81cfe:	2301      	movs	r3, #1
   81d00:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   81d02:	7bbb      	ldrb	r3, [r7, #14]
   81d04:	009a      	lsls	r2, r3, #2
   81d06:	4b27      	ldr	r3, [pc, #156]	; (81da4 <udd_ep_clear_halt+0x10c>)
   81d08:	4413      	add	r3, r2
   81d0a:	681b      	ldr	r3, [r3, #0]
   81d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   81d10:	2b00      	cmp	r3, #0
   81d12:	d02a      	beq.n	81d6a <udd_ep_clear_halt+0xd2>
		if (Is_udd_stall(ep_index)) {
   81d14:	7bbb      	ldrb	r3, [r7, #14]
   81d16:	009a      	lsls	r2, r3, #2
   81d18:	4b23      	ldr	r3, [pc, #140]	; (81da8 <udd_ep_clear_halt+0x110>)
   81d1a:	4413      	add	r3, r2
   81d1c:	681b      	ldr	r3, [r3, #0]
   81d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   81d22:	2b00      	cmp	r3, #0
   81d24:	d00c      	beq.n	81d40 <udd_ep_clear_halt+0xa8>
			udd_ack_stall(ep_index);
   81d26:	7bbb      	ldrb	r3, [r7, #14]
   81d28:	009a      	lsls	r2, r3, #2
   81d2a:	4b20      	ldr	r3, [pc, #128]	; (81dac <udd_ep_clear_halt+0x114>)
   81d2c:	4413      	add	r3, r2
   81d2e:	2240      	movs	r2, #64	; 0x40
   81d30:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   81d32:	7bbb      	ldrb	r3, [r7, #14]
   81d34:	009a      	lsls	r2, r3, #2
   81d36:	4b1e      	ldr	r3, [pc, #120]	; (81db0 <udd_ep_clear_halt+0x118>)
   81d38:	4413      	add	r3, r2
   81d3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   81d3e:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   81d40:	7bbb      	ldrb	r3, [r7, #14]
   81d42:	009a      	lsls	r2, r3, #2
   81d44:	4b15      	ldr	r3, [pc, #84]	; (81d9c <udd_ep_clear_halt+0x104>)
   81d46:	4413      	add	r3, r2
   81d48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81d4c:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   81d4e:	7bbb      	ldrb	r3, [r7, #14]
   81d50:	009a      	lsls	r2, r3, #2
   81d52:	4b18      	ldr	r3, [pc, #96]	; (81db4 <udd_ep_clear_halt+0x11c>)
   81d54:	4413      	add	r3, r2
   81d56:	7bba      	ldrb	r2, [r7, #14]
   81d58:	0091      	lsls	r1, r2, #2
   81d5a:	4a16      	ldr	r2, [pc, #88]	; (81db4 <udd_ep_clear_halt+0x11c>)
   81d5c:	440a      	add	r2, r1
   81d5e:	6812      	ldr	r2, [r2, #0]
   81d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   81d64:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   81d66:	2301      	movs	r3, #1
   81d68:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   81d6a:	7bfb      	ldrb	r3, [r7, #15]
   81d6c:	2b00      	cmp	r3, #0
   81d6e:	d00e      	beq.n	81d8e <udd_ep_clear_halt+0xf6>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   81d70:	68bb      	ldr	r3, [r7, #8]
   81d72:	7d1b      	ldrb	r3, [r3, #20]
   81d74:	f003 0301 	and.w	r3, r3, #1
   81d78:	b2db      	uxtb	r3, r3
   81d7a:	2b00      	cmp	r3, #0
   81d7c:	d007      	beq.n	81d8e <udd_ep_clear_halt+0xf6>
			ptr_job->busy = false;
   81d7e:	68ba      	ldr	r2, [r7, #8]
   81d80:	7d13      	ldrb	r3, [r2, #20]
   81d82:	f36f 0300 	bfc	r3, #0, #1
   81d86:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   81d88:	68bb      	ldr	r3, [r7, #8]
   81d8a:	681b      	ldr	r3, [r3, #0]
   81d8c:	4798      	blx	r3
		}
	}
	return true;
   81d8e:	2301      	movs	r3, #1
}
   81d90:	4618      	mov	r0, r3
   81d92:	3710      	adds	r7, #16
   81d94:	46bd      	mov	sp, r7
   81d96:	bd80      	pop	{r7, pc}
   81d98:	2007075c 	.word	0x2007075c
   81d9c:	400ac220 	.word	0x400ac220
   81da0:	400ac000 	.word	0x400ac000
   81da4:	400ac1c0 	.word	0x400ac1c0
   81da8:	400ac130 	.word	0x400ac130
   81dac:	400ac160 	.word	0x400ac160
   81db0:	400ac1f0 	.word	0x400ac1f0
   81db4:	400ac100 	.word	0x400ac100

00081db8 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   81db8:	b580      	push	{r7, lr}
   81dba:	b086      	sub	sp, #24
   81dbc:	af00      	add	r7, sp, #0
   81dbe:	60ba      	str	r2, [r7, #8]
   81dc0:	607b      	str	r3, [r7, #4]
   81dc2:	4603      	mov	r3, r0
   81dc4:	73fb      	strb	r3, [r7, #15]
   81dc6:	460b      	mov	r3, r1
   81dc8:	73bb      	strb	r3, [r7, #14]
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   81dca:	7bfb      	ldrb	r3, [r7, #15]
   81dcc:	f003 030f 	and.w	r3, r3, #15
   81dd0:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   81dd2:	7bfb      	ldrb	r3, [r7, #15]
   81dd4:	2b01      	cmp	r3, #1
   81dd6:	d901      	bls.n	81ddc <udd_ep_run+0x24>
		return false;
   81dd8:	2300      	movs	r3, #0
   81dda:	e060      	b.n	81e9e <udd_ep_run+0xe6>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   81ddc:	7bfb      	ldrb	r3, [r7, #15]
   81dde:	1e5a      	subs	r2, r3, #1
   81de0:	4613      	mov	r3, r2
   81de2:	005b      	lsls	r3, r3, #1
   81de4:	4413      	add	r3, r2
   81de6:	00db      	lsls	r3, r3, #3
   81de8:	4a2f      	ldr	r2, [pc, #188]	; (81ea8 <udd_ep_run+0xf0>)
   81dea:	4413      	add	r3, r2
   81dec:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   81dee:	4b2f      	ldr	r3, [pc, #188]	; (81eac <udd_ep_run+0xf4>)
   81df0:	69da      	ldr	r2, [r3, #28]
   81df2:	7bfb      	ldrb	r3, [r7, #15]
   81df4:	2101      	movs	r1, #1
   81df6:	fa01 f303 	lsl.w	r3, r1, r3
   81dfa:	4013      	ands	r3, r2
   81dfc:	2b00      	cmp	r3, #0
   81dfe:	d00f      	beq.n	81e20 <udd_ep_run+0x68>
			|| Is_udd_endpoint_stall_requested(ep)
   81e00:	7bfb      	ldrb	r3, [r7, #15]
   81e02:	009a      	lsls	r2, r3, #2
   81e04:	4b2a      	ldr	r3, [pc, #168]	; (81eb0 <udd_ep_run+0xf8>)
   81e06:	4413      	add	r3, r2
   81e08:	681b      	ldr	r3, [r3, #0]
   81e0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   81e0e:	2b00      	cmp	r3, #0
   81e10:	d106      	bne.n	81e20 <udd_ep_run+0x68>
			|| ptr_job->stall_requested) {
   81e12:	697b      	ldr	r3, [r7, #20]
   81e14:	7d1b      	ldrb	r3, [r3, #20]
   81e16:	f003 0304 	and.w	r3, r3, #4
   81e1a:	b2db      	uxtb	r3, r3
   81e1c:	2b00      	cmp	r3, #0
   81e1e:	d001      	beq.n	81e24 <udd_ep_run+0x6c>
		return false; // Endpoint is halted
   81e20:	2300      	movs	r3, #0
   81e22:	e03c      	b.n	81e9e <udd_ep_run+0xe6>
	}

	flags = cpu_irq_save();
   81e24:	4b23      	ldr	r3, [pc, #140]	; (81eb4 <udd_ep_run+0xfc>)
   81e26:	4798      	blx	r3
   81e28:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   81e2a:	697b      	ldr	r3, [r7, #20]
   81e2c:	7d1b      	ldrb	r3, [r3, #20]
   81e2e:	f003 0301 	and.w	r3, r3, #1
   81e32:	b2db      	uxtb	r3, r3
   81e34:	2b00      	cmp	r3, #0
   81e36:	d004      	beq.n	81e42 <udd_ep_run+0x8a>
		cpu_irq_restore(flags);
   81e38:	6938      	ldr	r0, [r7, #16]
   81e3a:	4b1f      	ldr	r3, [pc, #124]	; (81eb8 <udd_ep_run+0x100>)
   81e3c:	4798      	blx	r3
		return false; // Job already on going
   81e3e:	2300      	movs	r3, #0
   81e40:	e02d      	b.n	81e9e <udd_ep_run+0xe6>
	}
	ptr_job->busy = true;
   81e42:	697a      	ldr	r2, [r7, #20]
   81e44:	7d13      	ldrb	r3, [r2, #20]
   81e46:	f043 0301 	orr.w	r3, r3, #1
   81e4a:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   81e4c:	6938      	ldr	r0, [r7, #16]
   81e4e:	4b1a      	ldr	r3, [pc, #104]	; (81eb8 <udd_ep_run+0x100>)
   81e50:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   81e52:	697b      	ldr	r3, [r7, #20]
   81e54:	68ba      	ldr	r2, [r7, #8]
   81e56:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   81e58:	697b      	ldr	r3, [r7, #20]
   81e5a:	687a      	ldr	r2, [r7, #4]
   81e5c:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   81e5e:	697b      	ldr	r3, [r7, #20]
   81e60:	2200      	movs	r2, #0
   81e62:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   81e64:	697b      	ldr	r3, [r7, #20]
   81e66:	2200      	movs	r2, #0
   81e68:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   81e6a:	697b      	ldr	r3, [r7, #20]
   81e6c:	6a3a      	ldr	r2, [r7, #32]
   81e6e:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   81e70:	7bbb      	ldrb	r3, [r7, #14]
   81e72:	2b00      	cmp	r3, #0
   81e74:	d102      	bne.n	81e7c <udd_ep_run+0xc4>
   81e76:	687b      	ldr	r3, [r7, #4]
   81e78:	2b00      	cmp	r3, #0
   81e7a:	d101      	bne.n	81e80 <udd_ep_run+0xc8>
   81e7c:	2301      	movs	r3, #1
   81e7e:	e000      	b.n	81e82 <udd_ep_run+0xca>
   81e80:	2300      	movs	r3, #0
   81e82:	b2db      	uxtb	r3, r3
   81e84:	f003 0301 	and.w	r3, r3, #1
   81e88:	b2d9      	uxtb	r1, r3
   81e8a:	697a      	ldr	r2, [r7, #20]
   81e8c:	7d13      	ldrb	r3, [r2, #20]
   81e8e:	f361 0341 	bfi	r3, r1, #1, #1
   81e92:	7513      	strb	r3, [r2, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   81e94:	7bfb      	ldrb	r3, [r7, #15]
   81e96:	4618      	mov	r0, r3
   81e98:	4b08      	ldr	r3, [pc, #32]	; (81ebc <udd_ep_run+0x104>)
   81e9a:	4798      	blx	r3
	return true;
   81e9c:	2301      	movs	r3, #1
#endif
}
   81e9e:	4618      	mov	r0, r3
   81ea0:	3718      	adds	r7, #24
   81ea2:	46bd      	mov	sp, r7
   81ea4:	bd80      	pop	{r7, pc}
   81ea6:	bf00      	nop
   81ea8:	2007075c 	.word	0x2007075c
   81eac:	400ac000 	.word	0x400ac000
   81eb0:	400ac1c0 	.word	0x400ac1c0
   81eb4:	000811b5 	.word	0x000811b5
   81eb8:	0008120d 	.word	0x0008120d
   81ebc:	000827c9 	.word	0x000827c9

00081ec0 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   81ec0:	b580      	push	{r7, lr}
   81ec2:	b084      	sub	sp, #16
   81ec4:	af00      	add	r7, sp, #0
   81ec6:	4603      	mov	r3, r0
   81ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81eca:	79fb      	ldrb	r3, [r7, #7]
   81ecc:	f003 030f 	and.w	r3, r3, #15
   81ed0:	73fb      	strb	r3, [r7, #15]
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   81ed2:	4a1e      	ldr	r2, [pc, #120]	; (81f4c <udd_ep_abort+0x8c>)
   81ed4:	7bfb      	ldrb	r3, [r7, #15]
   81ed6:	3b01      	subs	r3, #1
   81ed8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   81edc:	fa01 f303 	lsl.w	r3, r1, r3
   81ee0:	6153      	str	r3, [r2, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   81ee2:	7bfb      	ldrb	r3, [r7, #15]
   81ee4:	011a      	lsls	r2, r3, #4
   81ee6:	4b1a      	ldr	r3, [pc, #104]	; (81f50 <udd_ep_abort+0x90>)
   81ee8:	4413      	add	r3, r2
   81eea:	2200      	movs	r2, #0
   81eec:	609a      	str	r2, [r3, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   81eee:	4a17      	ldr	r2, [pc, #92]	; (81f4c <udd_ep_abort+0x8c>)
   81ef0:	7bfb      	ldrb	r3, [r7, #15]
   81ef2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81ef6:	fa01 f303 	lsl.w	r3, r1, r3
   81efa:	6153      	str	r3, [r2, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   81efc:	79fb      	ldrb	r3, [r7, #7]
   81efe:	b25b      	sxtb	r3, r3
   81f00:	2b00      	cmp	r3, #0
   81f02:	da1b      	bge.n	81f3c <udd_ep_abort+0x7c>
		while(udd_nb_busy_bank(ep_index)) {
   81f04:	e010      	b.n	81f28 <udd_ep_abort+0x68>
			udd_kill_last_in_bank(ep_index);
   81f06:	7bfb      	ldrb	r3, [r7, #15]
   81f08:	009a      	lsls	r2, r3, #2
   81f0a:	4b12      	ldr	r3, [pc, #72]	; (81f54 <udd_ep_abort+0x94>)
   81f0c:	4413      	add	r3, r2
   81f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81f12:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   81f14:	bf00      	nop
   81f16:	7bfb      	ldrb	r3, [r7, #15]
   81f18:	009a      	lsls	r2, r3, #2
   81f1a:	4b0f      	ldr	r3, [pc, #60]	; (81f58 <udd_ep_abort+0x98>)
   81f1c:	4413      	add	r3, r2
   81f1e:	681b      	ldr	r3, [r3, #0]
   81f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   81f24:	2b00      	cmp	r3, #0
   81f26:	d1f6      	bne.n	81f16 <udd_ep_abort+0x56>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   81f28:	7bfb      	ldrb	r3, [r7, #15]
   81f2a:	009a      	lsls	r2, r3, #2
   81f2c:	4b0b      	ldr	r3, [pc, #44]	; (81f5c <udd_ep_abort+0x9c>)
   81f2e:	4413      	add	r3, r2
   81f30:	681b      	ldr	r3, [r3, #0]
   81f32:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   81f36:	0b1b      	lsrs	r3, r3, #12
   81f38:	2b00      	cmp	r3, #0
   81f3a:	d1e4      	bne.n	81f06 <udd_ep_abort+0x46>
			udd_kill_last_in_bank(ep_index);
			while(Is_udd_kill_last(ep_index));
		}
	}
	udd_ep_abort_job(ep);
   81f3c:	79fb      	ldrb	r3, [r7, #7]
   81f3e:	4618      	mov	r0, r3
   81f40:	4b07      	ldr	r3, [pc, #28]	; (81f60 <udd_ep_abort+0xa0>)
   81f42:	4798      	blx	r3
}
   81f44:	3710      	adds	r7, #16
   81f46:	46bd      	mov	sp, r7
   81f48:	bd80      	pop	{r7, pc}
   81f4a:	bf00      	nop
   81f4c:	400ac000 	.word	0x400ac000
   81f50:	400ac300 	.word	0x400ac300
   81f54:	400ac1f0 	.word	0x400ac1f0
   81f58:	400ac1c0 	.word	0x400ac1c0
   81f5c:	400ac130 	.word	0x400ac130
   81f60:	00082725 	.word	0x00082725

00081f64 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   81f64:	b580      	push	{r7, lr}
   81f66:	b082      	sub	sp, #8
   81f68:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   81f6a:	4a19      	ldr	r2, [pc, #100]	; (81fd0 <udd_reset_ep_ctrl+0x6c>)
   81f6c:	4b18      	ldr	r3, [pc, #96]	; (81fd0 <udd_reset_ep_ctrl+0x6c>)
   81f6e:	681b      	ldr	r3, [r3, #0]
   81f70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81f74:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   81f76:	4a16      	ldr	r2, [pc, #88]	; (81fd0 <udd_reset_ep_ctrl+0x6c>)
   81f78:	4b15      	ldr	r3, [pc, #84]	; (81fd0 <udd_reset_ep_ctrl+0x6c>)
   81f7a:	681b      	ldr	r3, [r3, #0]
   81f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81f80:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   81f82:	4a14      	ldr	r2, [pc, #80]	; (81fd4 <udd_reset_ep_ctrl+0x70>)
   81f84:	4b13      	ldr	r3, [pc, #76]	; (81fd4 <udd_reset_ep_ctrl+0x70>)
   81f86:	681b      	ldr	r3, [r3, #0]
   81f88:	f423 53cb 	bic.w	r3, r3, #6496	; 0x1960
   81f8c:	f023 031c 	bic.w	r3, r3, #28
   81f90:	6013      	str	r3, [r2, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   81f92:	4a10      	ldr	r2, [pc, #64]	; (81fd4 <udd_reset_ep_ctrl+0x70>)
   81f94:	4b0f      	ldr	r3, [pc, #60]	; (81fd4 <udd_reset_ep_ctrl+0x70>)
   81f96:	681b      	ldr	r3, [r3, #0]
   81f98:	f043 0302 	orr.w	r3, r3, #2
   81f9c:	6013      	str	r3, [r2, #0]
	udd_enable_endpoint(0);
   81f9e:	4a0c      	ldr	r2, [pc, #48]	; (81fd0 <udd_reset_ep_ctrl+0x6c>)
   81fa0:	4b0b      	ldr	r3, [pc, #44]	; (81fd0 <udd_reset_ep_ctrl+0x6c>)
   81fa2:	69db      	ldr	r3, [r3, #28]
   81fa4:	f043 0301 	orr.w	r3, r3, #1
   81fa8:	61d3      	str	r3, [r2, #28]
	flags = cpu_irq_save();
   81faa:	4b0b      	ldr	r3, [pc, #44]	; (81fd8 <udd_reset_ep_ctrl+0x74>)
   81fac:	4798      	blx	r3
   81fae:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   81fb0:	4b0a      	ldr	r3, [pc, #40]	; (81fdc <udd_reset_ep_ctrl+0x78>)
   81fb2:	2204      	movs	r2, #4
   81fb4:	601a      	str	r2, [r3, #0]
	udd_enable_out_received_interrupt(0);
   81fb6:	4b09      	ldr	r3, [pc, #36]	; (81fdc <udd_reset_ep_ctrl+0x78>)
   81fb8:	2202      	movs	r2, #2
   81fba:	601a      	str	r2, [r3, #0]
	udd_enable_endpoint_interrupt(0);
   81fbc:	4b04      	ldr	r3, [pc, #16]	; (81fd0 <udd_reset_ep_ctrl+0x6c>)
   81fbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81fc2:	619a      	str	r2, [r3, #24]
	cpu_irq_restore(flags);
   81fc4:	6878      	ldr	r0, [r7, #4]
   81fc6:	4b06      	ldr	r3, [pc, #24]	; (81fe0 <udd_reset_ep_ctrl+0x7c>)
   81fc8:	4798      	blx	r3
}
   81fca:	3708      	adds	r7, #8
   81fcc:	46bd      	mov	sp, r7
   81fce:	bd80      	pop	{r7, pc}
   81fd0:	400ac000 	.word	0x400ac000
   81fd4:	400ac100 	.word	0x400ac100
   81fd8:	000811b5 	.word	0x000811b5
   81fdc:	400ac1f0 	.word	0x400ac1f0
   81fe0:	0008120d 	.word	0x0008120d

00081fe4 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   81fe4:	b580      	push	{r7, lr}
   81fe6:	b082      	sub	sp, #8
   81fe8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   81fea:	4b0d      	ldr	r3, [pc, #52]	; (82020 <udd_ctrl_init+0x3c>)
   81fec:	4798      	blx	r3
   81fee:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   81ff0:	4b0c      	ldr	r3, [pc, #48]	; (82024 <udd_ctrl_init+0x40>)
   81ff2:	2201      	movs	r2, #1
   81ff4:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
   81ff6:	6878      	ldr	r0, [r7, #4]
   81ff8:	4b0b      	ldr	r3, [pc, #44]	; (82028 <udd_ctrl_init+0x44>)
   81ffa:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   81ffc:	4b0b      	ldr	r3, [pc, #44]	; (8202c <udd_ctrl_init+0x48>)
   81ffe:	2202      	movs	r2, #2
   82000:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
   82002:	4b0b      	ldr	r3, [pc, #44]	; (82030 <udd_ctrl_init+0x4c>)
   82004:	2200      	movs	r2, #0
   82006:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   82008:	4b09      	ldr	r3, [pc, #36]	; (82030 <udd_ctrl_init+0x4c>)
   8200a:	2200      	movs	r2, #0
   8200c:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   8200e:	4b08      	ldr	r3, [pc, #32]	; (82030 <udd_ctrl_init+0x4c>)
   82010:	2200      	movs	r2, #0
   82012:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   82014:	4b07      	ldr	r3, [pc, #28]	; (82034 <udd_ctrl_init+0x50>)
   82016:	2200      	movs	r2, #0
   82018:	701a      	strb	r2, [r3, #0]
}
   8201a:	3708      	adds	r7, #8
   8201c:	46bd      	mov	sp, r7
   8201e:	bd80      	pop	{r7, pc}
   82020:	000811b5 	.word	0x000811b5
   82024:	400ac220 	.word	0x400ac220
   82028:	0008120d 	.word	0x0008120d
   8202c:	400ac160 	.word	0x400ac160
   82030:	20070874 	.word	0x20070874
   82034:	20070754 	.word	0x20070754

00082038 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   82038:	b580      	push	{r7, lr}
   8203a:	b084      	sub	sp, #16
   8203c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   8203e:	4b3b      	ldr	r3, [pc, #236]	; (8212c <udd_ctrl_setup_received+0xf4>)
   82040:	781b      	ldrb	r3, [r3, #0]
   82042:	2b00      	cmp	r3, #0
   82044:	d003      	beq.n	8204e <udd_ctrl_setup_received+0x16>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   82046:	4b3a      	ldr	r3, [pc, #232]	; (82130 <udd_ctrl_setup_received+0xf8>)
   82048:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   8204a:	4b3a      	ldr	r3, [pc, #232]	; (82134 <udd_ctrl_setup_received+0xfc>)
   8204c:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   8204e:	4b3a      	ldr	r3, [pc, #232]	; (82138 <udd_ctrl_setup_received+0x100>)
   82050:	681a      	ldr	r2, [r3, #0]
   82052:	4b3a      	ldr	r3, [pc, #232]	; (8213c <udd_ctrl_setup_received+0x104>)
   82054:	4013      	ands	r3, r2
   82056:	0d1b      	lsrs	r3, r3, #20
   82058:	2b08      	cmp	r3, #8
   8205a:	d005      	beq.n	82068 <udd_ctrl_setup_received+0x30>
		udd_ctrl_stall_data();
   8205c:	4b38      	ldr	r3, [pc, #224]	; (82140 <udd_ctrl_setup_received+0x108>)
   8205e:	4798      	blx	r3
		udd_ack_setup_received(0);
   82060:	4b38      	ldr	r3, [pc, #224]	; (82144 <udd_ctrl_setup_received+0x10c>)
   82062:	2204      	movs	r2, #4
   82064:	601a      	str	r2, [r3, #0]
		return; // Error data number doesn't correspond to SETUP packet
   82066:	e05d      	b.n	82124 <udd_ctrl_setup_received+0xec>
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
   82068:	4b37      	ldr	r3, [pc, #220]	; (82148 <udd_ctrl_setup_received+0x110>)
   8206a:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   8206c:	2300      	movs	r3, #0
   8206e:	73fb      	strb	r3, [r7, #15]
   82070:	e00a      	b.n	82088 <udd_ctrl_setup_received+0x50>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   82072:	7bfb      	ldrb	r3, [r7, #15]
   82074:	4a35      	ldr	r2, [pc, #212]	; (8214c <udd_ctrl_setup_received+0x114>)
   82076:	441a      	add	r2, r3
   82078:	68bb      	ldr	r3, [r7, #8]
   8207a:	1c59      	adds	r1, r3, #1
   8207c:	60b9      	str	r1, [r7, #8]
   8207e:	781b      	ldrb	r3, [r3, #0]
   82080:	7013      	strb	r3, [r2, #0]
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
   82082:	7bfb      	ldrb	r3, [r7, #15]
   82084:	3301      	adds	r3, #1
   82086:	73fb      	strb	r3, [r7, #15]
   82088:	7bfb      	ldrb	r3, [r7, #15]
   8208a:	2b07      	cmp	r3, #7
   8208c:	d9f1      	bls.n	82072 <udd_ctrl_setup_received+0x3a>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   8208e:	4b2f      	ldr	r3, [pc, #188]	; (8214c <udd_ctrl_setup_received+0x114>)
   82090:	885a      	ldrh	r2, [r3, #2]
   82092:	4b2e      	ldr	r3, [pc, #184]	; (8214c <udd_ctrl_setup_received+0x114>)
   82094:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   82096:	4b2d      	ldr	r3, [pc, #180]	; (8214c <udd_ctrl_setup_received+0x114>)
   82098:	889a      	ldrh	r2, [r3, #4]
   8209a:	4b2c      	ldr	r3, [pc, #176]	; (8214c <udd_ctrl_setup_received+0x114>)
   8209c:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   8209e:	4b2b      	ldr	r3, [pc, #172]	; (8214c <udd_ctrl_setup_received+0x114>)
   820a0:	88da      	ldrh	r2, [r3, #6]
   820a2:	4b2a      	ldr	r3, [pc, #168]	; (8214c <udd_ctrl_setup_received+0x114>)
   820a4:	80da      	strh	r2, [r3, #6]

	// Decode setup request
	if (udc_process_setup() == false) {
   820a6:	4b2a      	ldr	r3, [pc, #168]	; (82150 <udd_ctrl_setup_received+0x118>)
   820a8:	4798      	blx	r3
   820aa:	4603      	mov	r3, r0
   820ac:	f083 0301 	eor.w	r3, r3, #1
   820b0:	b2db      	uxtb	r3, r3
   820b2:	2b00      	cmp	r3, #0
   820b4:	d005      	beq.n	820c2 <udd_ctrl_setup_received+0x8a>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   820b6:	4b22      	ldr	r3, [pc, #136]	; (82140 <udd_ctrl_setup_received+0x108>)
   820b8:	4798      	blx	r3
		udd_ack_setup_received(0);
   820ba:	4b22      	ldr	r3, [pc, #136]	; (82144 <udd_ctrl_setup_received+0x10c>)
   820bc:	2204      	movs	r2, #4
   820be:	601a      	str	r2, [r3, #0]
		return;
   820c0:	e030      	b.n	82124 <udd_ctrl_setup_received+0xec>
	}
	udd_ack_setup_received(0);
   820c2:	4b20      	ldr	r3, [pc, #128]	; (82144 <udd_ctrl_setup_received+0x10c>)
   820c4:	2204      	movs	r2, #4
   820c6:	601a      	str	r2, [r3, #0]

	if (Udd_setup_is_in()) {
   820c8:	4b20      	ldr	r3, [pc, #128]	; (8214c <udd_ctrl_setup_received+0x114>)
   820ca:	781b      	ldrb	r3, [r3, #0]
   820cc:	b2db      	uxtb	r3, r3
   820ce:	b25b      	sxtb	r3, r3
   820d0:	2b00      	cmp	r3, #0
   820d2:	da0b      	bge.n	820ec <udd_ctrl_setup_received+0xb4>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   820d4:	4b1f      	ldr	r3, [pc, #124]	; (82154 <udd_ctrl_setup_received+0x11c>)
   820d6:	2200      	movs	r2, #0
   820d8:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   820da:	4b1f      	ldr	r3, [pc, #124]	; (82158 <udd_ctrl_setup_received+0x120>)
   820dc:	2200      	movs	r2, #0
   820de:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   820e0:	4b12      	ldr	r3, [pc, #72]	; (8212c <udd_ctrl_setup_received+0xf4>)
   820e2:	2202      	movs	r2, #2
   820e4:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   820e6:	4b1d      	ldr	r3, [pc, #116]	; (8215c <udd_ctrl_setup_received+0x124>)
   820e8:	4798      	blx	r3
   820ea:	e01b      	b.n	82124 <udd_ctrl_setup_received+0xec>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   820ec:	4b17      	ldr	r3, [pc, #92]	; (8214c <udd_ctrl_setup_received+0x114>)
   820ee:	88db      	ldrh	r3, [r3, #6]
   820f0:	2b00      	cmp	r3, #0
   820f2:	d102      	bne.n	820fa <udd_ctrl_setup_received+0xc2>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   820f4:	4b1a      	ldr	r3, [pc, #104]	; (82160 <udd_ctrl_setup_received+0x128>)
   820f6:	4798      	blx	r3
			return;
   820f8:	e014      	b.n	82124 <udd_ctrl_setup_received+0xec>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   820fa:	4b16      	ldr	r3, [pc, #88]	; (82154 <udd_ctrl_setup_received+0x11c>)
   820fc:	2200      	movs	r2, #0
   820fe:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   82100:	4b15      	ldr	r3, [pc, #84]	; (82158 <udd_ctrl_setup_received+0x120>)
   82102:	2200      	movs	r2, #0
   82104:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   82106:	4b09      	ldr	r3, [pc, #36]	; (8212c <udd_ctrl_setup_received+0xf4>)
   82108:	2201      	movs	r2, #1
   8210a:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   8210c:	4b0d      	ldr	r3, [pc, #52]	; (82144 <udd_ctrl_setup_received+0x10c>)
   8210e:	2210      	movs	r2, #16
   82110:	601a      	str	r2, [r3, #0]
		flags = cpu_irq_save();
   82112:	4b14      	ldr	r3, [pc, #80]	; (82164 <udd_ctrl_setup_received+0x12c>)
   82114:	4798      	blx	r3
   82116:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   82118:	4b13      	ldr	r3, [pc, #76]	; (82168 <udd_ctrl_setup_received+0x130>)
   8211a:	2210      	movs	r2, #16
   8211c:	601a      	str	r2, [r3, #0]
		cpu_irq_restore(flags);
   8211e:	6878      	ldr	r0, [r7, #4]
   82120:	4b12      	ldr	r3, [pc, #72]	; (8216c <udd_ctrl_setup_received+0x134>)
   82122:	4798      	blx	r3
	}
}
   82124:	3710      	adds	r7, #16
   82126:	46bd      	mov	sp, r7
   82128:	bd80      	pop	{r7, pc}
   8212a:	bf00      	nop
   8212c:	20070754 	.word	0x20070754
   82130:	000825a1 	.word	0x000825a1
   82134:	00081fe5 	.word	0x00081fe5
   82138:	400ac130 	.word	0x400ac130
   8213c:	7ff00000 	.word	0x7ff00000
   82140:	000824f1 	.word	0x000824f1
   82144:	400ac160 	.word	0x400ac160
   82148:	20180000 	.word	0x20180000
   8214c:	20070874 	.word	0x20070874
   82150:	0008109d 	.word	0x0008109d
   82154:	20070756 	.word	0x20070756
   82158:	20070758 	.word	0x20070758
   8215c:	00082171 	.word	0x00082171
   82160:	00082515 	.word	0x00082515
   82164:	000811b5 	.word	0x000811b5
   82168:	400ac1f0 	.word	0x400ac1f0
   8216c:	0008120d 	.word	0x0008120d

00082170 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   82170:	b580      	push	{r7, lr}
   82172:	b084      	sub	sp, #16
   82174:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   82176:	4b46      	ldr	r3, [pc, #280]	; (82290 <udd_ctrl_in_sent+0x120>)
   82178:	4798      	blx	r3
   8217a:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   8217c:	4b45      	ldr	r3, [pc, #276]	; (82294 <udd_ctrl_in_sent+0x124>)
   8217e:	2201      	movs	r2, #1
   82180:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
   82182:	6838      	ldr	r0, [r7, #0]
   82184:	4b44      	ldr	r3, [pc, #272]	; (82298 <udd_ctrl_in_sent+0x128>)
   82186:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82188:	4b44      	ldr	r3, [pc, #272]	; (8229c <udd_ctrl_in_sent+0x12c>)
   8218a:	781b      	ldrb	r3, [r3, #0]
   8218c:	2b03      	cmp	r3, #3
   8218e:	d104      	bne.n	8219a <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   82190:	4b43      	ldr	r3, [pc, #268]	; (822a0 <udd_ctrl_in_sent+0x130>)
   82192:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   82194:	4b43      	ldr	r3, [pc, #268]	; (822a4 <udd_ctrl_in_sent+0x134>)
   82196:	4798      	blx	r3
		return;
   82198:	e077      	b.n	8228a <udd_ctrl_in_sent+0x11a>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8219a:	4b43      	ldr	r3, [pc, #268]	; (822a8 <udd_ctrl_in_sent+0x138>)
   8219c:	899a      	ldrh	r2, [r3, #12]
   8219e:	4b43      	ldr	r3, [pc, #268]	; (822ac <udd_ctrl_in_sent+0x13c>)
   821a0:	881b      	ldrh	r3, [r3, #0]
   821a2:	1ad3      	subs	r3, r2, r3
   821a4:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   821a6:	89fb      	ldrh	r3, [r7, #14]
   821a8:	2b00      	cmp	r3, #0
   821aa:	d127      	bne.n	821fc <udd_ctrl_in_sent+0x8c>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   821ac:	4b40      	ldr	r3, [pc, #256]	; (822b0 <udd_ctrl_in_sent+0x140>)
   821ae:	881a      	ldrh	r2, [r3, #0]
   821b0:	4b3e      	ldr	r3, [pc, #248]	; (822ac <udd_ctrl_in_sent+0x13c>)
   821b2:	881b      	ldrh	r3, [r3, #0]
   821b4:	4413      	add	r3, r2
   821b6:	b29a      	uxth	r2, r3
   821b8:	4b3d      	ldr	r3, [pc, #244]	; (822b0 <udd_ctrl_in_sent+0x140>)
   821ba:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   821bc:	4b3a      	ldr	r3, [pc, #232]	; (822a8 <udd_ctrl_in_sent+0x138>)
   821be:	88da      	ldrh	r2, [r3, #6]
   821c0:	4b3b      	ldr	r3, [pc, #236]	; (822b0 <udd_ctrl_in_sent+0x140>)
   821c2:	881b      	ldrh	r3, [r3, #0]
   821c4:	429a      	cmp	r2, r3
   821c6:	d003      	beq.n	821d0 <udd_ctrl_in_sent+0x60>
					|| b_shortpacket) {
   821c8:	4b3a      	ldr	r3, [pc, #232]	; (822b4 <udd_ctrl_in_sent+0x144>)
   821ca:	781b      	ldrb	r3, [r3, #0]
   821cc:	2b00      	cmp	r3, #0
   821ce:	d002      	beq.n	821d6 <udd_ctrl_in_sent+0x66>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
   821d0:	4b39      	ldr	r3, [pc, #228]	; (822b8 <udd_ctrl_in_sent+0x148>)
   821d2:	4798      	blx	r3
			return;
   821d4:	e059      	b.n	8228a <udd_ctrl_in_sent+0x11a>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   821d6:	4b34      	ldr	r3, [pc, #208]	; (822a8 <udd_ctrl_in_sent+0x138>)
   821d8:	695b      	ldr	r3, [r3, #20]
   821da:	2b00      	cmp	r3, #0
   821dc:	d00e      	beq.n	821fc <udd_ctrl_in_sent+0x8c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   821de:	4b32      	ldr	r3, [pc, #200]	; (822a8 <udd_ctrl_in_sent+0x138>)
   821e0:	695b      	ldr	r3, [r3, #20]
   821e2:	4798      	blx	r3
   821e4:	4603      	mov	r3, r0
   821e6:	f083 0301 	eor.w	r3, r3, #1
   821ea:	b2db      	uxtb	r3, r3
   821ec:	2b00      	cmp	r3, #0
   821ee:	d105      	bne.n	821fc <udd_ctrl_in_sent+0x8c>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   821f0:	4b2e      	ldr	r3, [pc, #184]	; (822ac <udd_ctrl_in_sent+0x13c>)
   821f2:	2200      	movs	r2, #0
   821f4:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   821f6:	4b2c      	ldr	r3, [pc, #176]	; (822a8 <udd_ctrl_in_sent+0x138>)
   821f8:	899b      	ldrh	r3, [r3, #12]
   821fa:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   821fc:	89fb      	ldrh	r3, [r7, #14]
   821fe:	2b07      	cmp	r3, #7
   82200:	d905      	bls.n	8220e <udd_ctrl_in_sent+0x9e>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   82202:	2308      	movs	r3, #8
   82204:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   82206:	4b2b      	ldr	r3, [pc, #172]	; (822b4 <udd_ctrl_in_sent+0x144>)
   82208:	2200      	movs	r2, #0
   8220a:	701a      	strb	r2, [r3, #0]
   8220c:	e002      	b.n	82214 <udd_ctrl_in_sent+0xa4>
	} else {
		b_shortpacket = true;
   8220e:	4b29      	ldr	r3, [pc, #164]	; (822b4 <udd_ctrl_in_sent+0x144>)
   82210:	2201      	movs	r2, #1
   82212:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82214:	4b29      	ldr	r3, [pc, #164]	; (822bc <udd_ctrl_in_sent+0x14c>)
   82216:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82218:	4b23      	ldr	r3, [pc, #140]	; (822a8 <udd_ctrl_in_sent+0x138>)
   8221a:	689b      	ldr	r3, [r3, #8]
   8221c:	4a23      	ldr	r2, [pc, #140]	; (822ac <udd_ctrl_in_sent+0x13c>)
   8221e:	8812      	ldrh	r2, [r2, #0]
   82220:	4413      	add	r3, r2
   82222:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   82224:	4b1a      	ldr	r3, [pc, #104]	; (82290 <udd_ctrl_in_sent+0x120>)
   82226:	4798      	blx	r3
   82228:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   8222a:	4b25      	ldr	r3, [pc, #148]	; (822c0 <udd_ctrl_in_sent+0x150>)
   8222c:	681b      	ldr	r3, [r3, #0]
   8222e:	f003 0302 	and.w	r3, r3, #2
   82232:	2b00      	cmp	r3, #0
   82234:	d006      	beq.n	82244 <udd_ctrl_in_sent+0xd4>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   82236:	6838      	ldr	r0, [r7, #0]
   82238:	4b17      	ldr	r3, [pc, #92]	; (82298 <udd_ctrl_in_sent+0x128>)
   8223a:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8223c:	4b17      	ldr	r3, [pc, #92]	; (8229c <udd_ctrl_in_sent+0x12c>)
   8223e:	2204      	movs	r2, #4
   82240:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   82242:	e022      	b.n	8228a <udd_ctrl_in_sent+0x11a>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   82244:	2300      	movs	r3, #0
   82246:	737b      	strb	r3, [r7, #13]
   82248:	e00a      	b.n	82260 <udd_ctrl_in_sent+0xf0>
		*ptr_dest++ = *ptr_src++;
   8224a:	68bb      	ldr	r3, [r7, #8]
   8224c:	1c5a      	adds	r2, r3, #1
   8224e:	60ba      	str	r2, [r7, #8]
   82250:	687a      	ldr	r2, [r7, #4]
   82252:	1c51      	adds	r1, r2, #1
   82254:	6079      	str	r1, [r7, #4]
   82256:	7812      	ldrb	r2, [r2, #0]
   82258:	701a      	strb	r2, [r3, #0]
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8225a:	7b7b      	ldrb	r3, [r7, #13]
   8225c:	3301      	adds	r3, #1
   8225e:	737b      	strb	r3, [r7, #13]
   82260:	7b7b      	ldrb	r3, [r7, #13]
   82262:	b29b      	uxth	r3, r3
   82264:	89fa      	ldrh	r2, [r7, #14]
   82266:	429a      	cmp	r2, r3
   82268:	d8ef      	bhi.n	8224a <udd_ctrl_in_sent+0xda>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   8226a:	4b10      	ldr	r3, [pc, #64]	; (822ac <udd_ctrl_in_sent+0x13c>)
   8226c:	881a      	ldrh	r2, [r3, #0]
   8226e:	89fb      	ldrh	r3, [r7, #14]
   82270:	4413      	add	r3, r2
   82272:	b29a      	uxth	r2, r3
   82274:	4b0d      	ldr	r3, [pc, #52]	; (822ac <udd_ctrl_in_sent+0x13c>)
   82276:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   82278:	4b12      	ldr	r3, [pc, #72]	; (822c4 <udd_ctrl_in_sent+0x154>)
   8227a:	2201      	movs	r2, #1
   8227c:	601a      	str	r2, [r3, #0]
	udd_enable_in_send_interrupt(0);
   8227e:	4b12      	ldr	r3, [pc, #72]	; (822c8 <udd_ctrl_in_sent+0x158>)
   82280:	2201      	movs	r2, #1
   82282:	601a      	str	r2, [r3, #0]
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   82284:	6838      	ldr	r0, [r7, #0]
   82286:	4b04      	ldr	r3, [pc, #16]	; (82298 <udd_ctrl_in_sent+0x128>)
   82288:	4798      	blx	r3
}
   8228a:	3710      	adds	r7, #16
   8228c:	46bd      	mov	sp, r7
   8228e:	bd80      	pop	{r7, pc}
   82290:	000811b5 	.word	0x000811b5
   82294:	400ac220 	.word	0x400ac220
   82298:	0008120d 	.word	0x0008120d
   8229c:	20070754 	.word	0x20070754
   822a0:	000825a1 	.word	0x000825a1
   822a4:	00081fe5 	.word	0x00081fe5
   822a8:	20070874 	.word	0x20070874
   822ac:	20070758 	.word	0x20070758
   822b0:	20070756 	.word	0x20070756
   822b4:	20070774 	.word	0x20070774
   822b8:	00082561 	.word	0x00082561
   822bc:	20180000 	.word	0x20180000
   822c0:	400ac130 	.word	0x400ac130
   822c4:	400ac160 	.word	0x400ac160
   822c8:	400ac1f0 	.word	0x400ac1f0

000822cc <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   822cc:	b580      	push	{r7, lr}
   822ce:	b084      	sub	sp, #16
   822d0:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   822d2:	4b59      	ldr	r3, [pc, #356]	; (82438 <udd_ctrl_out_received+0x16c>)
   822d4:	781b      	ldrb	r3, [r3, #0]
   822d6:	2b01      	cmp	r3, #1
   822d8:	d00f      	beq.n	822fa <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   822da:	4b57      	ldr	r3, [pc, #348]	; (82438 <udd_ctrl_out_received+0x16c>)
   822dc:	781b      	ldrb	r3, [r3, #0]
   822de:	2b02      	cmp	r3, #2
   822e0:	d003      	beq.n	822ea <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   822e2:	4b55      	ldr	r3, [pc, #340]	; (82438 <udd_ctrl_out_received+0x16c>)
   822e4:	781b      	ldrb	r3, [r3, #0]
   822e6:	2b04      	cmp	r3, #4
   822e8:	d102      	bne.n	822f0 <udd_ctrl_out_received+0x24>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   822ea:	4b54      	ldr	r3, [pc, #336]	; (8243c <udd_ctrl_out_received+0x170>)
   822ec:	4798      	blx	r3
   822ee:	e001      	b.n	822f4 <udd_ctrl_out_received+0x28>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   822f0:	4b53      	ldr	r3, [pc, #332]	; (82440 <udd_ctrl_out_received+0x174>)
   822f2:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   822f4:	4b53      	ldr	r3, [pc, #332]	; (82444 <udd_ctrl_out_received+0x178>)
   822f6:	4798      	blx	r3
		return;
   822f8:	e09b      	b.n	82432 <udd_ctrl_out_received+0x166>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   822fa:	4b53      	ldr	r3, [pc, #332]	; (82448 <udd_ctrl_out_received+0x17c>)
   822fc:	681a      	ldr	r2, [r3, #0]
   822fe:	4b53      	ldr	r3, [pc, #332]	; (8244c <udd_ctrl_out_received+0x180>)
   82300:	4013      	ands	r3, r2
   82302:	0d1b      	lsrs	r3, r3, #20
   82304:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   82306:	4b52      	ldr	r3, [pc, #328]	; (82450 <udd_ctrl_out_received+0x184>)
   82308:	899b      	ldrh	r3, [r3, #12]
   8230a:	461a      	mov	r2, r3
   8230c:	4b51      	ldr	r3, [pc, #324]	; (82454 <udd_ctrl_out_received+0x188>)
   8230e:	881b      	ldrh	r3, [r3, #0]
   82310:	4619      	mov	r1, r3
   82312:	89bb      	ldrh	r3, [r7, #12]
   82314:	440b      	add	r3, r1
   82316:	429a      	cmp	r2, r3
   82318:	da05      	bge.n	82326 <udd_ctrl_out_received+0x5a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8231a:	4b4d      	ldr	r3, [pc, #308]	; (82450 <udd_ctrl_out_received+0x184>)
   8231c:	899a      	ldrh	r2, [r3, #12]
   8231e:	4b4d      	ldr	r3, [pc, #308]	; (82454 <udd_ctrl_out_received+0x188>)
   82320:	881b      	ldrh	r3, [r3, #0]
   82322:	1ad3      	subs	r3, r2, r3
   82324:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82326:	4b4c      	ldr	r3, [pc, #304]	; (82458 <udd_ctrl_out_received+0x18c>)
   82328:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8232a:	4b49      	ldr	r3, [pc, #292]	; (82450 <udd_ctrl_out_received+0x184>)
   8232c:	689b      	ldr	r3, [r3, #8]
   8232e:	4a49      	ldr	r2, [pc, #292]	; (82454 <udd_ctrl_out_received+0x188>)
   82330:	8812      	ldrh	r2, [r2, #0]
   82332:	4413      	add	r3, r2
   82334:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   82336:	2300      	movs	r3, #0
   82338:	73fb      	strb	r3, [r7, #15]
   8233a:	e00a      	b.n	82352 <udd_ctrl_out_received+0x86>
		*ptr_dest++ = *ptr_src++;
   8233c:	687b      	ldr	r3, [r7, #4]
   8233e:	1c5a      	adds	r2, r3, #1
   82340:	607a      	str	r2, [r7, #4]
   82342:	68ba      	ldr	r2, [r7, #8]
   82344:	1c51      	adds	r1, r2, #1
   82346:	60b9      	str	r1, [r7, #8]
   82348:	7812      	ldrb	r2, [r2, #0]
   8234a:	701a      	strb	r2, [r3, #0]
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   8234c:	7bfb      	ldrb	r3, [r7, #15]
   8234e:	3301      	adds	r3, #1
   82350:	73fb      	strb	r3, [r7, #15]
   82352:	7bfb      	ldrb	r3, [r7, #15]
   82354:	b29b      	uxth	r3, r3
   82356:	89ba      	ldrh	r2, [r7, #12]
   82358:	429a      	cmp	r2, r3
   8235a:	d8ef      	bhi.n	8233c <udd_ctrl_out_received+0x70>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   8235c:	4b3d      	ldr	r3, [pc, #244]	; (82454 <udd_ctrl_out_received+0x188>)
   8235e:	881a      	ldrh	r2, [r3, #0]
   82360:	89bb      	ldrh	r3, [r7, #12]
   82362:	4413      	add	r3, r2
   82364:	b29a      	uxth	r2, r3
   82366:	4b3b      	ldr	r3, [pc, #236]	; (82454 <udd_ctrl_out_received+0x188>)
   82368:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   8236a:	89bb      	ldrh	r3, [r7, #12]
   8236c:	2b08      	cmp	r3, #8
   8236e:	d10a      	bne.n	82386 <udd_ctrl_out_received+0xba>
			|| (udd_g_ctrlreq.req.wLength <=
   82370:	4b37      	ldr	r3, [pc, #220]	; (82450 <udd_ctrl_out_received+0x184>)
   82372:	88db      	ldrh	r3, [r3, #6]
   82374:	461a      	mov	r2, r3
					(udd_ctrl_prev_payload_buf_cnt +
   82376:	4b39      	ldr	r3, [pc, #228]	; (8245c <udd_ctrl_out_received+0x190>)
   82378:	881b      	ldrh	r3, [r3, #0]
   8237a:	4619      	mov	r1, r3
   8237c:	4b35      	ldr	r3, [pc, #212]	; (82454 <udd_ctrl_out_received+0x188>)
   8237e:	881b      	ldrh	r3, [r3, #0]
   82380:	440b      	add	r3, r1
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   82382:	429a      	cmp	r2, r3
   82384:	dc1c      	bgt.n	823c0 <udd_ctrl_out_received+0xf4>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   82386:	4b33      	ldr	r3, [pc, #204]	; (82454 <udd_ctrl_out_received+0x188>)
   82388:	881a      	ldrh	r2, [r3, #0]
   8238a:	4b31      	ldr	r3, [pc, #196]	; (82450 <udd_ctrl_out_received+0x184>)
   8238c:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   8238e:	4b30      	ldr	r3, [pc, #192]	; (82450 <udd_ctrl_out_received+0x184>)
   82390:	695b      	ldr	r3, [r3, #20]
   82392:	2b00      	cmp	r3, #0
   82394:	d00e      	beq.n	823b4 <udd_ctrl_out_received+0xe8>
			if (!udd_g_ctrlreq.over_under_run()) {
   82396:	4b2e      	ldr	r3, [pc, #184]	; (82450 <udd_ctrl_out_received+0x184>)
   82398:	695b      	ldr	r3, [r3, #20]
   8239a:	4798      	blx	r3
   8239c:	4603      	mov	r3, r0
   8239e:	f083 0301 	eor.w	r3, r3, #1
   823a2:	b2db      	uxtb	r3, r3
   823a4:	2b00      	cmp	r3, #0
   823a6:	d005      	beq.n	823b4 <udd_ctrl_out_received+0xe8>
				// Stall ZLP
				udd_ctrl_stall_data();
   823a8:	4b25      	ldr	r3, [pc, #148]	; (82440 <udd_ctrl_out_received+0x174>)
   823aa:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   823ac:	4b2c      	ldr	r3, [pc, #176]	; (82460 <udd_ctrl_out_received+0x194>)
   823ae:	2202      	movs	r2, #2
   823b0:	601a      	str	r2, [r3, #0]
				return;
   823b2:	e03e      	b.n	82432 <udd_ctrl_out_received+0x166>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   823b4:	4b2a      	ldr	r3, [pc, #168]	; (82460 <udd_ctrl_out_received+0x194>)
   823b6:	2202      	movs	r2, #2
   823b8:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
   823ba:	4b2a      	ldr	r3, [pc, #168]	; (82464 <udd_ctrl_out_received+0x198>)
   823bc:	4798      	blx	r3
		return;
   823be:	e038      	b.n	82432 <udd_ctrl_out_received+0x166>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   823c0:	4b23      	ldr	r3, [pc, #140]	; (82450 <udd_ctrl_out_received+0x184>)
   823c2:	899a      	ldrh	r2, [r3, #12]
   823c4:	4b23      	ldr	r3, [pc, #140]	; (82454 <udd_ctrl_out_received+0x188>)
   823c6:	881b      	ldrh	r3, [r3, #0]
   823c8:	429a      	cmp	r2, r3
   823ca:	d123      	bne.n	82414 <udd_ctrl_out_received+0x148>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   823cc:	4b20      	ldr	r3, [pc, #128]	; (82450 <udd_ctrl_out_received+0x184>)
   823ce:	695b      	ldr	r3, [r3, #20]
   823d0:	2b00      	cmp	r3, #0
   823d2:	d105      	bne.n	823e0 <udd_ctrl_out_received+0x114>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   823d4:	4b1a      	ldr	r3, [pc, #104]	; (82440 <udd_ctrl_out_received+0x174>)
   823d6:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   823d8:	4b21      	ldr	r3, [pc, #132]	; (82460 <udd_ctrl_out_received+0x194>)
   823da:	2202      	movs	r2, #2
   823dc:	601a      	str	r2, [r3, #0]
			return;
   823de:	e028      	b.n	82432 <udd_ctrl_out_received+0x166>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   823e0:	4b1b      	ldr	r3, [pc, #108]	; (82450 <udd_ctrl_out_received+0x184>)
   823e2:	695b      	ldr	r3, [r3, #20]
   823e4:	4798      	blx	r3
   823e6:	4603      	mov	r3, r0
   823e8:	f083 0301 	eor.w	r3, r3, #1
   823ec:	b2db      	uxtb	r3, r3
   823ee:	2b00      	cmp	r3, #0
   823f0:	d005      	beq.n	823fe <udd_ctrl_out_received+0x132>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   823f2:	4b13      	ldr	r3, [pc, #76]	; (82440 <udd_ctrl_out_received+0x174>)
   823f4:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   823f6:	4b1a      	ldr	r3, [pc, #104]	; (82460 <udd_ctrl_out_received+0x194>)
   823f8:	2202      	movs	r2, #2
   823fa:	601a      	str	r2, [r3, #0]
			return;
   823fc:	e019      	b.n	82432 <udd_ctrl_out_received+0x166>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   823fe:	4b17      	ldr	r3, [pc, #92]	; (8245c <udd_ctrl_out_received+0x190>)
   82400:	881a      	ldrh	r2, [r3, #0]
   82402:	4b14      	ldr	r3, [pc, #80]	; (82454 <udd_ctrl_out_received+0x188>)
   82404:	881b      	ldrh	r3, [r3, #0]
   82406:	4413      	add	r3, r2
   82408:	b29a      	uxth	r2, r3
   8240a:	4b14      	ldr	r3, [pc, #80]	; (8245c <udd_ctrl_out_received+0x190>)
   8240c:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   8240e:	4b11      	ldr	r3, [pc, #68]	; (82454 <udd_ctrl_out_received+0x188>)
   82410:	2200      	movs	r2, #0
   82412:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   82414:	4b12      	ldr	r3, [pc, #72]	; (82460 <udd_ctrl_out_received+0x194>)
   82416:	2202      	movs	r2, #2
   82418:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   8241a:	4b11      	ldr	r3, [pc, #68]	; (82460 <udd_ctrl_out_received+0x194>)
   8241c:	2210      	movs	r2, #16
   8241e:	601a      	str	r2, [r3, #0]
	flags = cpu_irq_save();
   82420:	4b11      	ldr	r3, [pc, #68]	; (82468 <udd_ctrl_out_received+0x19c>)
   82422:	4798      	blx	r3
   82424:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   82426:	4b11      	ldr	r3, [pc, #68]	; (8246c <udd_ctrl_out_received+0x1a0>)
   82428:	2210      	movs	r2, #16
   8242a:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
   8242c:	6838      	ldr	r0, [r7, #0]
   8242e:	4b10      	ldr	r3, [pc, #64]	; (82470 <udd_ctrl_out_received+0x1a4>)
   82430:	4798      	blx	r3
}
   82432:	3710      	adds	r7, #16
   82434:	46bd      	mov	sp, r7
   82436:	bd80      	pop	{r7, pc}
   82438:	20070754 	.word	0x20070754
   8243c:	000825a1 	.word	0x000825a1
   82440:	000824f1 	.word	0x000824f1
   82444:	00081fe5 	.word	0x00081fe5
   82448:	400ac130 	.word	0x400ac130
   8244c:	7ff00000 	.word	0x7ff00000
   82450:	20070874 	.word	0x20070874
   82454:	20070758 	.word	0x20070758
   82458:	20180000 	.word	0x20180000
   8245c:	20070756 	.word	0x20070756
   82460:	400ac160 	.word	0x400ac160
   82464:	00082515 	.word	0x00082515
   82468:	000811b5 	.word	0x000811b5
   8246c:	400ac1f0 	.word	0x400ac1f0
   82470:	0008120d 	.word	0x0008120d

00082474 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   82474:	b580      	push	{r7, lr}
   82476:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   82478:	4b0b      	ldr	r3, [pc, #44]	; (824a8 <udd_ctrl_underflow+0x34>)
   8247a:	681b      	ldr	r3, [r3, #0]
   8247c:	f003 0302 	and.w	r3, r3, #2
   82480:	2b00      	cmp	r3, #0
   82482:	d000      	beq.n	82486 <udd_ctrl_underflow+0x12>
		return; // Underflow ignored if OUT data is received
   82484:	e00e      	b.n	824a4 <udd_ctrl_underflow+0x30>

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   82486:	4b09      	ldr	r3, [pc, #36]	; (824ac <udd_ctrl_underflow+0x38>)
   82488:	781b      	ldrb	r3, [r3, #0]
   8248a:	2b01      	cmp	r3, #1
   8248c:	d102      	bne.n	82494 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   8248e:	4b08      	ldr	r3, [pc, #32]	; (824b0 <udd_ctrl_underflow+0x3c>)
   82490:	4798      	blx	r3
   82492:	e007      	b.n	824a4 <udd_ctrl_underflow+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   82494:	4b05      	ldr	r3, [pc, #20]	; (824ac <udd_ctrl_underflow+0x38>)
   82496:	781b      	ldrb	r3, [r3, #0]
   82498:	2b04      	cmp	r3, #4
   8249a:	d103      	bne.n	824a4 <udd_ctrl_underflow+0x30>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   8249c:	4b05      	ldr	r3, [pc, #20]	; (824b4 <udd_ctrl_underflow+0x40>)
   8249e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   824a2:	601a      	str	r2, [r3, #0]
	}
}
   824a4:	bd80      	pop	{r7, pc}
   824a6:	bf00      	nop
   824a8:	400ac130 	.word	0x400ac130
   824ac:	20070754 	.word	0x20070754
   824b0:	00082515 	.word	0x00082515
   824b4:	400ac1f0 	.word	0x400ac1f0

000824b8 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   824b8:	b480      	push	{r7}
   824ba:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   824bc:	4b09      	ldr	r3, [pc, #36]	; (824e4 <udd_ctrl_overflow+0x2c>)
   824be:	681b      	ldr	r3, [r3, #0]
   824c0:	f003 0301 	and.w	r3, r3, #1
   824c4:	2b00      	cmp	r3, #0
   824c6:	d000      	beq.n	824ca <udd_ctrl_overflow+0x12>
		return; // Overflow ignored if IN data is received
   824c8:	e007      	b.n	824da <udd_ctrl_overflow+0x22>

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   824ca:	4b07      	ldr	r3, [pc, #28]	; (824e8 <udd_ctrl_overflow+0x30>)
   824cc:	781b      	ldrb	r3, [r3, #0]
   824ce:	2b03      	cmp	r3, #3
   824d0:	d103      	bne.n	824da <udd_ctrl_overflow+0x22>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   824d2:	4b06      	ldr	r3, [pc, #24]	; (824ec <udd_ctrl_overflow+0x34>)
   824d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   824d8:	601a      	str	r2, [r3, #0]
	}
}
   824da:	46bd      	mov	sp, r7
   824dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   824e0:	4770      	bx	lr
   824e2:	bf00      	nop
   824e4:	400ac130 	.word	0x400ac130
   824e8:	20070754 	.word	0x20070754
   824ec:	400ac1f0 	.word	0x400ac1f0

000824f0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   824f0:	b480      	push	{r7}
   824f2:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   824f4:	4b05      	ldr	r3, [pc, #20]	; (8250c <udd_ctrl_stall_data+0x1c>)
   824f6:	2205      	movs	r2, #5
   824f8:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   824fa:	4b05      	ldr	r3, [pc, #20]	; (82510 <udd_ctrl_stall_data+0x20>)
   824fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82500:	601a      	str	r2, [r3, #0]
}
   82502:	46bd      	mov	sp, r7
   82504:	f85d 7b04 	ldr.w	r7, [sp], #4
   82508:	4770      	bx	lr
   8250a:	bf00      	nop
   8250c:	20070754 	.word	0x20070754
   82510:	400ac1f0 	.word	0x400ac1f0

00082514 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   82514:	b580      	push	{r7, lr}
   82516:	b082      	sub	sp, #8
   82518:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8251a:	4b0c      	ldr	r3, [pc, #48]	; (8254c <udd_ctrl_send_zlp_in+0x38>)
   8251c:	2203      	movs	r2, #3
   8251e:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   82520:	4b0b      	ldr	r3, [pc, #44]	; (82550 <udd_ctrl_send_zlp_in+0x3c>)
   82522:	4798      	blx	r3
   82524:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   82526:	4b0b      	ldr	r3, [pc, #44]	; (82554 <udd_ctrl_send_zlp_in+0x40>)
   82528:	2201      	movs	r2, #1
   8252a:	601a      	str	r2, [r3, #0]
	udd_enable_in_send_interrupt(0);
   8252c:	4b0a      	ldr	r3, [pc, #40]	; (82558 <udd_ctrl_send_zlp_in+0x44>)
   8252e:	2201      	movs	r2, #1
   82530:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   82532:	4b08      	ldr	r3, [pc, #32]	; (82554 <udd_ctrl_send_zlp_in+0x40>)
   82534:	2208      	movs	r2, #8
   82536:	601a      	str	r2, [r3, #0]
	udd_enable_nak_out_interrupt(0);
   82538:	4b07      	ldr	r3, [pc, #28]	; (82558 <udd_ctrl_send_zlp_in+0x44>)
   8253a:	2208      	movs	r2, #8
   8253c:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
   8253e:	6878      	ldr	r0, [r7, #4]
   82540:	4b06      	ldr	r3, [pc, #24]	; (8255c <udd_ctrl_send_zlp_in+0x48>)
   82542:	4798      	blx	r3
}
   82544:	3708      	adds	r7, #8
   82546:	46bd      	mov	sp, r7
   82548:	bd80      	pop	{r7, pc}
   8254a:	bf00      	nop
   8254c:	20070754 	.word	0x20070754
   82550:	000811b5 	.word	0x000811b5
   82554:	400ac160 	.word	0x400ac160
   82558:	400ac1f0 	.word	0x400ac1f0
   8255c:	0008120d 	.word	0x0008120d

00082560 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   82560:	b580      	push	{r7, lr}
   82562:	b082      	sub	sp, #8
   82564:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   82566:	4b09      	ldr	r3, [pc, #36]	; (8258c <udd_ctrl_send_zlp_out+0x2c>)
   82568:	2204      	movs	r2, #4
   8256a:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   8256c:	4b08      	ldr	r3, [pc, #32]	; (82590 <udd_ctrl_send_zlp_out+0x30>)
   8256e:	4798      	blx	r3
   82570:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   82572:	4b08      	ldr	r3, [pc, #32]	; (82594 <udd_ctrl_send_zlp_out+0x34>)
   82574:	2210      	movs	r2, #16
   82576:	601a      	str	r2, [r3, #0]
	udd_enable_nak_in_interrupt(0);
   82578:	4b07      	ldr	r3, [pc, #28]	; (82598 <udd_ctrl_send_zlp_out+0x38>)
   8257a:	2210      	movs	r2, #16
   8257c:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
   8257e:	6878      	ldr	r0, [r7, #4]
   82580:	4b06      	ldr	r3, [pc, #24]	; (8259c <udd_ctrl_send_zlp_out+0x3c>)
   82582:	4798      	blx	r3
}
   82584:	3708      	adds	r7, #8
   82586:	46bd      	mov	sp, r7
   82588:	bd80      	pop	{r7, pc}
   8258a:	bf00      	nop
   8258c:	20070754 	.word	0x20070754
   82590:	000811b5 	.word	0x000811b5
   82594:	400ac160 	.word	0x400ac160
   82598:	400ac1f0 	.word	0x400ac1f0
   8259c:	0008120d 	.word	0x0008120d

000825a0 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   825a0:	b580      	push	{r7, lr}
   825a2:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   825a4:	4b03      	ldr	r3, [pc, #12]	; (825b4 <udd_ctrl_endofrequest+0x14>)
   825a6:	691b      	ldr	r3, [r3, #16]
   825a8:	2b00      	cmp	r3, #0
   825aa:	d002      	beq.n	825b2 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   825ac:	4b01      	ldr	r3, [pc, #4]	; (825b4 <udd_ctrl_endofrequest+0x14>)
   825ae:	691b      	ldr	r3, [r3, #16]
   825b0:	4798      	blx	r3
	}
}
   825b2:	bd80      	pop	{r7, pc}
   825b4:	20070874 	.word	0x20070874

000825b8 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   825b8:	b580      	push	{r7, lr}
   825ba:	af00      	add	r7, sp, #0

	if (!Is_udd_endpoint_interrupt(0)) {
   825bc:	4b27      	ldr	r3, [pc, #156]	; (8265c <udd_ctrl_interrupt+0xa4>)
   825be:	685b      	ldr	r3, [r3, #4]
   825c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   825c4:	2b00      	cmp	r3, #0
   825c6:	d101      	bne.n	825cc <udd_ctrl_interrupt+0x14>
		return false; // No interrupt events on control endpoint
   825c8:	2300      	movs	r3, #0
   825ca:	e044      	b.n	82656 <udd_ctrl_interrupt+0x9e>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   825cc:	4b24      	ldr	r3, [pc, #144]	; (82660 <udd_ctrl_interrupt+0xa8>)
   825ce:	2210      	movs	r2, #16
   825d0:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
   825d2:	4b23      	ldr	r3, [pc, #140]	; (82660 <udd_ctrl_interrupt+0xa8>)
   825d4:	2208      	movs	r2, #8
   825d6:	601a      	str	r2, [r3, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   825d8:	4b22      	ldr	r3, [pc, #136]	; (82664 <udd_ctrl_interrupt+0xac>)
   825da:	681b      	ldr	r3, [r3, #0]
   825dc:	f003 0304 	and.w	r3, r3, #4
   825e0:	2b00      	cmp	r3, #0
   825e2:	d003      	beq.n	825ec <udd_ctrl_interrupt+0x34>
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
   825e4:	4b20      	ldr	r3, [pc, #128]	; (82668 <udd_ctrl_interrupt+0xb0>)
   825e6:	4798      	blx	r3
		return true;
   825e8:	2301      	movs	r3, #1
   825ea:	e034      	b.n	82656 <udd_ctrl_interrupt+0x9e>
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   825ec:	4b1d      	ldr	r3, [pc, #116]	; (82664 <udd_ctrl_interrupt+0xac>)
   825ee:	681b      	ldr	r3, [r3, #0]
   825f0:	f003 0301 	and.w	r3, r3, #1
   825f4:	2b00      	cmp	r3, #0
   825f6:	d009      	beq.n	8260c <udd_ctrl_interrupt+0x54>
   825f8:	4b1c      	ldr	r3, [pc, #112]	; (8266c <udd_ctrl_interrupt+0xb4>)
   825fa:	681b      	ldr	r3, [r3, #0]
   825fc:	f003 0301 	and.w	r3, r3, #1
   82600:	2b00      	cmp	r3, #0
   82602:	d003      	beq.n	8260c <udd_ctrl_interrupt+0x54>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   82604:	4b1a      	ldr	r3, [pc, #104]	; (82670 <udd_ctrl_interrupt+0xb8>)
   82606:	4798      	blx	r3
		return true;
   82608:	2301      	movs	r3, #1
   8260a:	e024      	b.n	82656 <udd_ctrl_interrupt+0x9e>
	}
	if (Is_udd_out_received(0)) {
   8260c:	4b15      	ldr	r3, [pc, #84]	; (82664 <udd_ctrl_interrupt+0xac>)
   8260e:	681b      	ldr	r3, [r3, #0]
   82610:	f003 0302 	and.w	r3, r3, #2
   82614:	2b00      	cmp	r3, #0
   82616:	d003      	beq.n	82620 <udd_ctrl_interrupt+0x68>
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
   82618:	4b16      	ldr	r3, [pc, #88]	; (82674 <udd_ctrl_interrupt+0xbc>)
   8261a:	4798      	blx	r3
		return true;
   8261c:	2301      	movs	r3, #1
   8261e:	e01a      	b.n	82656 <udd_ctrl_interrupt+0x9e>
	}
	if (Is_udd_nak_out(0)) {
   82620:	4b10      	ldr	r3, [pc, #64]	; (82664 <udd_ctrl_interrupt+0xac>)
   82622:	681b      	ldr	r3, [r3, #0]
   82624:	f003 0308 	and.w	r3, r3, #8
   82628:	2b00      	cmp	r3, #0
   8262a:	d006      	beq.n	8263a <udd_ctrl_interrupt+0x82>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   8262c:	4b12      	ldr	r3, [pc, #72]	; (82678 <udd_ctrl_interrupt+0xc0>)
   8262e:	2208      	movs	r2, #8
   82630:	601a      	str	r2, [r3, #0]
		udd_ctrl_overflow();
   82632:	4b12      	ldr	r3, [pc, #72]	; (8267c <udd_ctrl_interrupt+0xc4>)
   82634:	4798      	blx	r3
		return true;
   82636:	2301      	movs	r3, #1
   82638:	e00d      	b.n	82656 <udd_ctrl_interrupt+0x9e>
	}
	if (Is_udd_nak_in(0)) {
   8263a:	4b0a      	ldr	r3, [pc, #40]	; (82664 <udd_ctrl_interrupt+0xac>)
   8263c:	681b      	ldr	r3, [r3, #0]
   8263e:	f003 0310 	and.w	r3, r3, #16
   82642:	2b00      	cmp	r3, #0
   82644:	d006      	beq.n	82654 <udd_ctrl_interrupt+0x9c>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   82646:	4b0c      	ldr	r3, [pc, #48]	; (82678 <udd_ctrl_interrupt+0xc0>)
   82648:	2210      	movs	r2, #16
   8264a:	601a      	str	r2, [r3, #0]
		udd_ctrl_underflow();
   8264c:	4b0c      	ldr	r3, [pc, #48]	; (82680 <udd_ctrl_interrupt+0xc8>)
   8264e:	4798      	blx	r3
		return true;
   82650:	2301      	movs	r3, #1
   82652:	e000      	b.n	82656 <udd_ctrl_interrupt+0x9e>
	}
	dbg_print("n%x ", UOTGHS_ARRAY(UOTGHS_DEVEPTISR[0], 0));
	return false;
   82654:	2300      	movs	r3, #0
}
   82656:	4618      	mov	r0, r3
   82658:	bd80      	pop	{r7, pc}
   8265a:	bf00      	nop
   8265c:	400ac000 	.word	0x400ac000
   82660:	400ac220 	.word	0x400ac220
   82664:	400ac130 	.word	0x400ac130
   82668:	00082039 	.word	0x00082039
   8266c:	400ac1c0 	.word	0x400ac1c0
   82670:	00082171 	.word	0x00082171
   82674:	000822cd 	.word	0x000822cd
   82678:	400ac160 	.word	0x400ac160
   8267c:	000824b9 	.word	0x000824b9
   82680:	00082475 	.word	0x00082475

00082684 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0 != USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   82684:	b480      	push	{r7}
   82686:	b083      	sub	sp, #12
   82688:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8268a:	2300      	movs	r3, #0
   8268c:	71fb      	strb	r3, [r7, #7]
   8268e:	e01c      	b.n	826ca <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   82690:	79fa      	ldrb	r2, [r7, #7]
   82692:	4912      	ldr	r1, [pc, #72]	; (826dc <udd_ep_job_table_reset+0x58>)
   82694:	4613      	mov	r3, r2
   82696:	005b      	lsls	r3, r3, #1
   82698:	4413      	add	r3, r2
   8269a:	00db      	lsls	r3, r3, #3
   8269c:	440b      	add	r3, r1
   8269e:	f103 0210 	add.w	r2, r3, #16
   826a2:	7913      	ldrb	r3, [r2, #4]
   826a4:	f36f 0300 	bfc	r3, #0, #1
   826a8:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   826aa:	79fa      	ldrb	r2, [r7, #7]
   826ac:	490b      	ldr	r1, [pc, #44]	; (826dc <udd_ep_job_table_reset+0x58>)
   826ae:	4613      	mov	r3, r2
   826b0:	005b      	lsls	r3, r3, #1
   826b2:	4413      	add	r3, r2
   826b4:	00db      	lsls	r3, r3, #3
   826b6:	440b      	add	r3, r1
   826b8:	f103 0210 	add.w	r2, r3, #16
   826bc:	7913      	ldrb	r3, [r2, #4]
   826be:	f36f 0382 	bfc	r3, #2, #1
   826c2:	7113      	strb	r3, [r2, #4]
#if (0 != USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   826c4:	79fb      	ldrb	r3, [r7, #7]
   826c6:	3301      	adds	r3, #1
   826c8:	71fb      	strb	r3, [r7, #7]
   826ca:	79fb      	ldrb	r3, [r7, #7]
   826cc:	2b00      	cmp	r3, #0
   826ce:	d0df      	beq.n	82690 <udd_ep_job_table_reset+0xc>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].stall_requested = false;
	}
}
   826d0:	370c      	adds	r7, #12
   826d2:	46bd      	mov	sp, r7
   826d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   826d8:	4770      	bx	lr
   826da:	bf00      	nop
   826dc:	2007075c 	.word	0x2007075c

000826e0 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   826e0:	b580      	push	{r7, lr}
   826e2:	b082      	sub	sp, #8
   826e4:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   826e6:	2300      	movs	r3, #0
   826e8:	71fb      	strb	r3, [r7, #7]
   826ea:	e011      	b.n	82710 <udd_ep_job_table_kill+0x30>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   826ec:	79fa      	ldrb	r2, [r7, #7]
   826ee:	4613      	mov	r3, r2
   826f0:	005b      	lsls	r3, r3, #1
   826f2:	4413      	add	r3, r2
   826f4:	00db      	lsls	r3, r3, #3
   826f6:	4a09      	ldr	r2, [pc, #36]	; (8271c <udd_ep_job_table_kill+0x3c>)
   826f8:	441a      	add	r2, r3
   826fa:	79fb      	ldrb	r3, [r7, #7]
   826fc:	3301      	adds	r3, #1
   826fe:	b2db      	uxtb	r3, r3
   82700:	4610      	mov	r0, r2
   82702:	2101      	movs	r1, #1
   82704:	461a      	mov	r2, r3
   82706:	4b06      	ldr	r3, [pc, #24]	; (82720 <udd_ep_job_table_kill+0x40>)
   82708:	4798      	blx	r3
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8270a:	79fb      	ldrb	r3, [r7, #7]
   8270c:	3301      	adds	r3, #1
   8270e:	71fb      	strb	r3, [r7, #7]
   82710:	79fb      	ldrb	r3, [r7, #7]
   82712:	2b00      	cmp	r3, #0
   82714:	d0ea      	beq.n	826ec <udd_ep_job_table_kill+0xc>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
	}
}
   82716:	3708      	adds	r7, #8
   82718:	46bd      	mov	sp, r7
   8271a:	bd80      	pop	{r7, pc}
   8271c:	2007075c 	.word	0x2007075c
   82720:	00082761 	.word	0x00082761

00082724 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   82724:	b580      	push	{r7, lr}
   82726:	b082      	sub	sp, #8
   82728:	af00      	add	r7, sp, #0
   8272a:	4603      	mov	r3, r0
   8272c:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   8272e:	79fb      	ldrb	r3, [r7, #7]
   82730:	f003 030f 	and.w	r3, r3, #15
   82734:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   82736:	79fb      	ldrb	r3, [r7, #7]
   82738:	1e5a      	subs	r2, r3, #1
   8273a:	4613      	mov	r3, r2
   8273c:	005b      	lsls	r3, r3, #1
   8273e:	4413      	add	r3, r2
   82740:	00db      	lsls	r3, r3, #3
   82742:	4a05      	ldr	r2, [pc, #20]	; (82758 <udd_ep_abort_job+0x34>)
   82744:	441a      	add	r2, r3
   82746:	79fb      	ldrb	r3, [r7, #7]
   82748:	4610      	mov	r0, r2
   8274a:	2101      	movs	r1, #1
   8274c:	461a      	mov	r2, r3
   8274e:	4b03      	ldr	r3, [pc, #12]	; (8275c <udd_ep_abort_job+0x38>)
   82750:	4798      	blx	r3
}
   82752:	3708      	adds	r7, #8
   82754:	46bd      	mov	sp, r7
   82756:	bd80      	pop	{r7, pc}
   82758:	2007075c 	.word	0x2007075c
   8275c:	00082761 	.word	0x00082761

00082760 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   82760:	b580      	push	{r7, lr}
   82762:	b082      	sub	sp, #8
   82764:	af00      	add	r7, sp, #0
   82766:	6078      	str	r0, [r7, #4]
   82768:	460b      	mov	r3, r1
   8276a:	70fb      	strb	r3, [r7, #3]
   8276c:	4613      	mov	r3, r2
   8276e:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   82770:	687b      	ldr	r3, [r7, #4]
   82772:	7d1b      	ldrb	r3, [r3, #20]
   82774:	f003 0301 	and.w	r3, r3, #1
   82778:	b2db      	uxtb	r3, r3
   8277a:	2b00      	cmp	r3, #0
   8277c:	d100      	bne.n	82780 <udd_ep_finish_job+0x20>
		return; // No on-going job
   8277e:	e01d      	b.n	827bc <udd_ep_finish_job+0x5c>
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   82780:	687a      	ldr	r2, [r7, #4]
   82782:	7d13      	ldrb	r3, [r2, #20]
   82784:	f36f 0300 	bfc	r3, #0, #1
   82788:	7513      	strb	r3, [r2, #20]
	if (NULL == ptr_job->call_trans) {
   8278a:	687b      	ldr	r3, [r7, #4]
   8278c:	681b      	ldr	r3, [r3, #0]
   8278e:	2b00      	cmp	r3, #0
   82790:	d100      	bne.n	82794 <udd_ep_finish_job+0x34>
		return; // No callback linked to job
   82792:	e013      	b.n	827bc <udd_ep_finish_job+0x5c>
	}
	if (Is_udd_endpoint_in(ep_num)) {
   82794:	78bb      	ldrb	r3, [r7, #2]
   82796:	009a      	lsls	r2, r3, #2
   82798:	4b0a      	ldr	r3, [pc, #40]	; (827c4 <udd_ep_finish_job+0x64>)
   8279a:	4413      	add	r3, r2
   8279c:	681b      	ldr	r3, [r3, #0]
   8279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   827a2:	2b00      	cmp	r3, #0
   827a4:	d003      	beq.n	827ae <udd_ep_finish_job+0x4e>
		ep_num |= USB_EP_DIR_IN;
   827a6:	78bb      	ldrb	r3, [r7, #2]
   827a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   827ac:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   827ae:	687b      	ldr	r3, [r7, #4]
   827b0:	681b      	ldr	r3, [r3, #0]
   827b2:	78f8      	ldrb	r0, [r7, #3]
   827b4:	687a      	ldr	r2, [r7, #4]
   827b6:	6891      	ldr	r1, [r2, #8]
   827b8:	78ba      	ldrb	r2, [r7, #2]
   827ba:	4798      	blx	r3
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   827bc:	3708      	adds	r7, #8
   827be:	46bd      	mov	sp, r7
   827c0:	bd80      	pop	{r7, pc}
   827c2:	bf00      	nop
   827c4:	400ac100 	.word	0x400ac100

000827c8 <udd_ep_trans_done>:

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   827c8:	b580      	push	{r7, lr}
   827ca:	b086      	sub	sp, #24
   827cc:	af00      	add	r7, sp, #0
   827ce:	4603      	mov	r3, r0
   827d0:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   827d2:	2300      	movs	r3, #0
   827d4:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   827d6:	79fb      	ldrb	r3, [r7, #7]
   827d8:	1e5a      	subs	r2, r3, #1
   827da:	4613      	mov	r3, r2
   827dc:	005b      	lsls	r3, r3, #1
   827de:	4413      	add	r3, r2
   827e0:	00db      	lsls	r3, r3, #3
   827e2:	4a6f      	ldr	r2, [pc, #444]	; (829a0 <udd_ep_trans_done+0x1d8>)
   827e4:	4413      	add	r3, r2
   827e6:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   827e8:	68fb      	ldr	r3, [r7, #12]
   827ea:	7d1b      	ldrb	r3, [r3, #20]
   827ec:	f003 0301 	and.w	r3, r3, #1
   827f0:	b2db      	uxtb	r3, r3
   827f2:	2b00      	cmp	r3, #0
   827f4:	d100      	bne.n	827f8 <udd_ep_trans_done+0x30>
		return; // No job is running, then ignore it (system error)
   827f6:	e0cf      	b.n	82998 <udd_ep_trans_done+0x1d0>
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   827f8:	68fb      	ldr	r3, [r7, #12]
   827fa:	68da      	ldr	r2, [r3, #12]
   827fc:	68fb      	ldr	r3, [r7, #12]
   827fe:	689b      	ldr	r3, [r3, #8]
   82800:	429a      	cmp	r2, r3
   82802:	f000 8090 	beq.w	82926 <udd_ep_trans_done+0x15e>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   82806:	68fb      	ldr	r3, [r7, #12]
   82808:	689a      	ldr	r2, [r3, #8]
   8280a:	68fb      	ldr	r3, [r7, #12]
   8280c:	68db      	ldr	r3, [r3, #12]
   8280e:	1ad3      	subs	r3, r2, r3
   82810:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   82812:	693b      	ldr	r3, [r7, #16]
   82814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   82818:	d905      	bls.n	82826 <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   8281a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   8281e:	613b      	str	r3, [r7, #16]

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   82820:	2300      	movs	r3, #0
   82822:	617b      	str	r3, [r7, #20]
   82824:	e002      	b.n	8282c <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   82826:	693b      	ldr	r3, [r7, #16]
   82828:	041b      	lsls	r3, r3, #16
   8282a:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   8282c:	79fb      	ldrb	r3, [r7, #7]
   8282e:	009a      	lsls	r2, r3, #2
   82830:	4b5c      	ldr	r3, [pc, #368]	; (829a4 <udd_ep_trans_done+0x1dc>)
   82832:	4413      	add	r3, r2
   82834:	681b      	ldr	r3, [r3, #0]
   82836:	f403 7380 	and.w	r3, r3, #256	; 0x100
   8283a:	2b00      	cmp	r3, #0
   8283c:	d01a      	beq.n	82874 <udd_ep_trans_done+0xac>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   8283e:	79fb      	ldrb	r3, [r7, #7]
   82840:	009a      	lsls	r2, r3, #2
   82842:	4b58      	ldr	r3, [pc, #352]	; (829a4 <udd_ep_trans_done+0x1dc>)
   82844:	4413      	add	r3, r2
   82846:	681b      	ldr	r3, [r3, #0]
   82848:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8284c:	091b      	lsrs	r3, r3, #4
   8284e:	461a      	mov	r2, r3
   82850:	2308      	movs	r3, #8
   82852:	4093      	lsls	r3, r2
   82854:	3b01      	subs	r3, #1
   82856:	461a      	mov	r2, r3
   82858:	693b      	ldr	r3, [r7, #16]
   8285a:	4013      	ands	r3, r2
   8285c:	2b00      	cmp	r3, #0
   8285e:	d026      	beq.n	828ae <udd_ep_trans_done+0xe6>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   82860:	697b      	ldr	r3, [r7, #20]
   82862:	f043 0308 	orr.w	r3, r3, #8
   82866:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   82868:	68fa      	ldr	r2, [r7, #12]
   8286a:	7d13      	ldrb	r3, [r2, #20]
   8286c:	f36f 0341 	bfc	r3, #1, #1
   82870:	7513      	strb	r3, [r2, #20]
   82872:	e01c      	b.n	828ae <udd_ep_trans_done+0xe6>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   82874:	79fb      	ldrb	r3, [r7, #7]
   82876:	009a      	lsls	r2, r3, #2
   82878:	4b4a      	ldr	r3, [pc, #296]	; (829a4 <udd_ep_trans_done+0x1dc>)
   8287a:	4413      	add	r3, r2
   8287c:	681b      	ldr	r3, [r3, #0]
   8287e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   82882:	0adb      	lsrs	r3, r3, #11
   82884:	2b01      	cmp	r3, #1
   82886:	d10e      	bne.n	828a6 <udd_ep_trans_done+0xde>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   82888:	79fb      	ldrb	r3, [r7, #7]
   8288a:	009a      	lsls	r2, r3, #2
   8288c:	4b45      	ldr	r3, [pc, #276]	; (829a4 <udd_ep_trans_done+0x1dc>)
   8288e:	4413      	add	r3, r2
   82890:	681b      	ldr	r3, [r3, #0]
   82892:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82896:	091b      	lsrs	r3, r3, #4
   82898:	461a      	mov	r2, r3
   8289a:	2308      	movs	r3, #8
   8289c:	4093      	lsls	r3, r2
   8289e:	461a      	mov	r2, r3
   828a0:	693b      	ldr	r3, [r7, #16]
   828a2:	429a      	cmp	r2, r3
   828a4:	d303      	bcc.n	828ae <udd_ep_trans_done+0xe6>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   828a6:	697b      	ldr	r3, [r7, #20]
   828a8:	f043 0314 	orr.w	r3, r3, #20
   828ac:	617b      	str	r3, [r7, #20]
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   828ae:	79fb      	ldrb	r3, [r7, #7]
   828b0:	011a      	lsls	r2, r3, #4
   828b2:	4b3d      	ldr	r3, [pc, #244]	; (829a8 <udd_ep_trans_done+0x1e0>)
   828b4:	4413      	add	r3, r2
   828b6:	68fa      	ldr	r2, [r7, #12]
   828b8:	6851      	ldr	r1, [r2, #4]
   828ba:	68fa      	ldr	r2, [r7, #12]
   828bc:	68d2      	ldr	r2, [r2, #12]
   828be:	440a      	add	r2, r1
   828c0:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   828c2:	697b      	ldr	r3, [r7, #20]
   828c4:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   828c8:	617b      	str	r3, [r7, #20]
				UOTGHS_DEVDMACONTROL_CHANN_ENB;


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   828ca:	4b38      	ldr	r3, [pc, #224]	; (829ac <udd_ep_trans_done+0x1e4>)
   828cc:	4798      	blx	r3
   828ce:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   828d0:	79fb      	ldrb	r3, [r7, #7]
   828d2:	011a      	lsls	r2, r3, #4
   828d4:	4b34      	ldr	r3, [pc, #208]	; (829a8 <udd_ep_trans_done+0x1e0>)
   828d6:	4413      	add	r3, r2
   828d8:	68db      	ldr	r3, [r3, #12]
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
   828da:	f003 0310 	and.w	r3, r3, #16


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   828de:	2b00      	cmp	r3, #0
   828e0:	d11a      	bne.n	82918 <udd_ep_trans_done+0x150>
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   828e2:	79fb      	ldrb	r3, [r7, #7]
   828e4:	011a      	lsls	r2, r3, #4
   828e6:	4b30      	ldr	r3, [pc, #192]	; (829a8 <udd_ep_trans_done+0x1e0>)
   828e8:	4413      	add	r3, r2
   828ea:	697a      	ldr	r2, [r7, #20]
   828ec:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   828ee:	68fb      	ldr	r3, [r7, #12]
   828f0:	68da      	ldr	r2, [r3, #12]
   828f2:	693b      	ldr	r3, [r7, #16]
   828f4:	441a      	add	r2, r3
   828f6:	68fb      	ldr	r3, [r7, #12]
   828f8:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   828fa:	68fb      	ldr	r3, [r7, #12]
   828fc:	693a      	ldr	r2, [r7, #16]
   828fe:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   82900:	4a2b      	ldr	r2, [pc, #172]	; (829b0 <udd_ep_trans_done+0x1e8>)
   82902:	79fb      	ldrb	r3, [r7, #7]
   82904:	3b01      	subs	r3, #1
   82906:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8290a:	fa01 f303 	lsl.w	r3, r1, r3
   8290e:	6193      	str	r3, [r2, #24]
			cpu_irq_restore(flags);
   82910:	68b8      	ldr	r0, [r7, #8]
   82912:	4b28      	ldr	r3, [pc, #160]	; (829b4 <udd_ep_trans_done+0x1ec>)
   82914:	4798      	blx	r3
			return;
   82916:	e03f      	b.n	82998 <udd_ep_trans_done+0x1d0>
		}
		cpu_irq_restore(flags);
   82918:	68b8      	ldr	r0, [r7, #8]
   8291a:	4b26      	ldr	r3, [pc, #152]	; (829b4 <udd_ep_trans_done+0x1ec>)
   8291c:	4798      	blx	r3

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   8291e:	68fb      	ldr	r3, [r7, #12]
   82920:	68da      	ldr	r2, [r3, #12]
   82922:	68fb      	ldr	r3, [r7, #12]
   82924:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   82926:	79fb      	ldrb	r3, [r7, #7]
   82928:	009a      	lsls	r2, r3, #2
   8292a:	4b1e      	ldr	r3, [pc, #120]	; (829a4 <udd_ep_trans_done+0x1dc>)
   8292c:	4413      	add	r3, r2
   8292e:	681b      	ldr	r3, [r3, #0]
   82930:	f403 7380 	and.w	r3, r3, #256	; 0x100
   82934:	2b00      	cmp	r3, #0
   82936:	d029      	beq.n	8298c <udd_ep_trans_done+0x1c4>
		if (ptr_job->b_shortpacket) {
   82938:	68fb      	ldr	r3, [r7, #12]
   8293a:	7d1b      	ldrb	r3, [r3, #20]
   8293c:	f003 0302 	and.w	r3, r3, #2
   82940:	b2db      	uxtb	r3, r3
   82942:	2b00      	cmp	r3, #0
   82944:	d022      	beq.n	8298c <udd_ep_trans_done+0x1c4>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   82946:	79fb      	ldrb	r3, [r7, #7]
   82948:	009a      	lsls	r2, r3, #2
   8294a:	4b1b      	ldr	r3, [pc, #108]	; (829b8 <udd_ep_trans_done+0x1f0>)
   8294c:	4413      	add	r3, r2
   8294e:	2201      	movs	r2, #1
   82950:	601a      	str	r2, [r3, #0]
			if (Is_udd_write_enabled(ep)) {
   82952:	79fb      	ldrb	r3, [r7, #7]
   82954:	009a      	lsls	r2, r3, #2
   82956:	4b19      	ldr	r3, [pc, #100]	; (829bc <udd_ep_trans_done+0x1f4>)
   82958:	4413      	add	r3, r2
   8295a:	681b      	ldr	r3, [r3, #0]
   8295c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   82960:	2b00      	cmp	r3, #0
   82962:	d005      	beq.n	82970 <udd_ep_trans_done+0x1a8>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   82964:	79fb      	ldrb	r3, [r7, #7]
   82966:	009a      	lsls	r2, r3, #2
   82968:	4b15      	ldr	r3, [pc, #84]	; (829c0 <udd_ep_trans_done+0x1f8>)
   8296a:	4413      	add	r3, r2
   8296c:	2201      	movs	r2, #1
   8296e:	601a      	str	r2, [r3, #0]
			}
			udd_enable_in_send_interrupt(ep);
   82970:	79fb      	ldrb	r3, [r7, #7]
   82972:	009a      	lsls	r2, r3, #2
   82974:	4b13      	ldr	r3, [pc, #76]	; (829c4 <udd_ep_trans_done+0x1fc>)
   82976:	4413      	add	r3, r2
   82978:	2201      	movs	r2, #1
   8297a:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   8297c:	4a0c      	ldr	r2, [pc, #48]	; (829b0 <udd_ep_trans_done+0x1e8>)
   8297e:	79fb      	ldrb	r3, [r7, #7]
   82980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82984:	fa01 f303 	lsl.w	r3, r1, r3
   82988:	6193      	str	r3, [r2, #24]
			return;
   8298a:	e005      	b.n	82998 <udd_ep_trans_done+0x1d0>
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   8298c:	79fb      	ldrb	r3, [r7, #7]
   8298e:	68f8      	ldr	r0, [r7, #12]
   82990:	2100      	movs	r1, #0
   82992:	461a      	mov	r2, r3
   82994:	4b0c      	ldr	r3, [pc, #48]	; (829c8 <udd_ep_trans_done+0x200>)
   82996:	4798      	blx	r3
}
   82998:	3718      	adds	r7, #24
   8299a:	46bd      	mov	sp, r7
   8299c:	bd80      	pop	{r7, pc}
   8299e:	bf00      	nop
   829a0:	2007075c 	.word	0x2007075c
   829a4:	400ac100 	.word	0x400ac100
   829a8:	400ac300 	.word	0x400ac300
   829ac:	000811b5 	.word	0x000811b5
   829b0:	400ac000 	.word	0x400ac000
   829b4:	0008120d 	.word	0x0008120d
   829b8:	400ac160 	.word	0x400ac160
   829bc:	400ac130 	.word	0x400ac130
   829c0:	400ac190 	.word	0x400ac190
   829c4:	400ac1f0 	.word	0x400ac1f0
   829c8:	00082761 	.word	0x00082761

000829cc <udd_ep_interrupt>:
	}
}
#endif // #ifdef UDD_EP_FIFO_SUPPORTED

static bool udd_ep_interrupt(void)
{
   829cc:	b580      	push	{r7, lr}
   829ce:	b084      	sub	sp, #16
   829d0:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   829d2:	2301      	movs	r3, #1
   829d4:	73fb      	strb	r3, [r7, #15]
   829d6:	e0c7      	b.n	82b68 <udd_ep_interrupt+0x19c>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   829d8:	7bfb      	ldrb	r3, [r7, #15]
   829da:	1e5a      	subs	r2, r3, #1
   829dc:	4613      	mov	r3, r2
   829de:	005b      	lsls	r3, r3, #1
   829e0:	4413      	add	r3, r2
   829e2:	00db      	lsls	r3, r3, #3
   829e4:	4a65      	ldr	r2, [pc, #404]	; (82b7c <udd_ep_interrupt+0x1b0>)
   829e6:	4413      	add	r3, r2
   829e8:	60bb      	str	r3, [r7, #8]

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   829ea:	4b65      	ldr	r3, [pc, #404]	; (82b80 <udd_ep_interrupt+0x1b4>)
   829ec:	691a      	ldr	r2, [r3, #16]
   829ee:	7bfb      	ldrb	r3, [r7, #15]
   829f0:	3b01      	subs	r3, #1
   829f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   829f6:	fa01 f303 	lsl.w	r3, r1, r3
   829fa:	4013      	ands	r3, r2
   829fc:	2b00      	cmp	r3, #0
   829fe:	d037      	beq.n	82a70 <udd_ep_interrupt+0xa4>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   82a00:	4b5f      	ldr	r3, [pc, #380]	; (82b80 <udd_ep_interrupt+0x1b4>)
   82a02:	685a      	ldr	r2, [r3, #4]
   82a04:	7bfb      	ldrb	r3, [r7, #15]
   82a06:	3b01      	subs	r3, #1
   82a08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   82a0c:	fa01 f303 	lsl.w	r3, r1, r3
   82a10:	4013      	ands	r3, r2
   82a12:	2b00      	cmp	r3, #0
   82a14:	d02c      	beq.n	82a70 <udd_ep_interrupt+0xa4>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   82a16:	7bfb      	ldrb	r3, [r7, #15]
   82a18:	011a      	lsls	r2, r3, #4
   82a1a:	4b5a      	ldr	r3, [pc, #360]	; (82b84 <udd_ep_interrupt+0x1b8>)
   82a1c:	4413      	add	r3, r2
   82a1e:	68db      	ldr	r3, [r3, #12]
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
   82a20:	f003 0301 	and.w	r3, r3, #1
#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   82a24:	2b00      	cmp	r3, #0
   82a26:	d001      	beq.n	82a2c <udd_ep_interrupt+0x60>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
   82a28:	2301      	movs	r3, #1
   82a2a:	e0a2      	b.n	82b72 <udd_ep_interrupt+0x1a6>
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   82a2c:	4a54      	ldr	r2, [pc, #336]	; (82b80 <udd_ep_interrupt+0x1b4>)
   82a2e:	7bfb      	ldrb	r3, [r7, #15]
   82a30:	3b01      	subs	r3, #1
   82a32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   82a36:	fa01 f303 	lsl.w	r3, r1, r3
   82a3a:	6153      	str	r3, [r2, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   82a3c:	7bfb      	ldrb	r3, [r7, #15]
   82a3e:	011a      	lsls	r2, r3, #4
   82a40:	4b50      	ldr	r3, [pc, #320]	; (82b84 <udd_ep_interrupt+0x1b8>)
   82a42:	4413      	add	r3, r2
   82a44:	68db      	ldr	r3, [r3, #12]
   82a46:	0c1b      	lsrs	r3, r3, #16
   82a48:	607b      	str	r3, [r7, #4]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   82a4a:	687b      	ldr	r3, [r7, #4]
   82a4c:	2b00      	cmp	r3, #0
   82a4e:	d009      	beq.n	82a64 <udd_ep_interrupt+0x98>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   82a50:	68bb      	ldr	r3, [r7, #8]
   82a52:	68da      	ldr	r2, [r3, #12]
   82a54:	687b      	ldr	r3, [r7, #4]
   82a56:	1ad2      	subs	r2, r2, r3
   82a58:	68bb      	ldr	r3, [r7, #8]
   82a5a:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   82a5c:	68bb      	ldr	r3, [r7, #8]
   82a5e:	68da      	ldr	r2, [r3, #12]
   82a60:	68bb      	ldr	r3, [r7, #8]
   82a62:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   82a64:	7bfb      	ldrb	r3, [r7, #15]
   82a66:	4618      	mov	r0, r3
   82a68:	4b47      	ldr	r3, [pc, #284]	; (82b88 <udd_ep_interrupt+0x1bc>)
   82a6a:	4798      	blx	r3
			return true;
   82a6c:	2301      	movs	r3, #1
   82a6e:	e080      	b.n	82b72 <udd_ep_interrupt+0x1a6>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   82a70:	4b43      	ldr	r3, [pc, #268]	; (82b80 <udd_ep_interrupt+0x1b4>)
   82a72:	691a      	ldr	r2, [r3, #16]
   82a74:	7bfb      	ldrb	r3, [r7, #15]
   82a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82a7a:	fa01 f303 	lsl.w	r3, r1, r3
   82a7e:	4013      	ands	r3, r2
   82a80:	2b00      	cmp	r3, #0
   82a82:	d06e      	beq.n	82b62 <udd_ep_interrupt+0x196>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   82a84:	7bfb      	ldrb	r3, [r7, #15]
   82a86:	009a      	lsls	r2, r3, #2
   82a88:	4b40      	ldr	r3, [pc, #256]	; (82b8c <udd_ep_interrupt+0x1c0>)
   82a8a:	4413      	add	r3, r2
   82a8c:	681b      	ldr	r3, [r3, #0]
   82a8e:	f003 0301 	and.w	r3, r3, #1
   82a92:	2b00      	cmp	r3, #0
   82a94:	d023      	beq.n	82ade <udd_ep_interrupt+0x112>
					&& Is_udd_in_send(ep)) {
   82a96:	7bfb      	ldrb	r3, [r7, #15]
   82a98:	009a      	lsls	r2, r3, #2
   82a9a:	4b3d      	ldr	r3, [pc, #244]	; (82b90 <udd_ep_interrupt+0x1c4>)
   82a9c:	4413      	add	r3, r2
   82a9e:	681b      	ldr	r3, [r3, #0]
   82aa0:	f003 0301 	and.w	r3, r3, #1
   82aa4:	2b00      	cmp	r3, #0
   82aa6:	d01a      	beq.n	82ade <udd_ep_interrupt+0x112>
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   82aa8:	7bfb      	ldrb	r3, [r7, #15]
   82aaa:	009a      	lsls	r2, r3, #2
   82aac:	4b39      	ldr	r3, [pc, #228]	; (82b94 <udd_ep_interrupt+0x1c8>)
   82aae:	4413      	add	r3, r2
   82ab0:	2201      	movs	r2, #1
   82ab2:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   82ab4:	7bfb      	ldrb	r3, [r7, #15]
   82ab6:	009a      	lsls	r2, r3, #2
   82ab8:	4b37      	ldr	r3, [pc, #220]	; (82b98 <udd_ep_interrupt+0x1cc>)
   82aba:	4413      	add	r3, r2
   82abc:	2201      	movs	r2, #1
   82abe:	601a      	str	r2, [r3, #0]
				udd_ack_fifocon(ep);
   82ac0:	7bfb      	ldrb	r3, [r7, #15]
   82ac2:	009a      	lsls	r2, r3, #2
   82ac4:	4b33      	ldr	r3, [pc, #204]	; (82b94 <udd_ep_interrupt+0x1c8>)
   82ac6:	4413      	add	r3, r2
   82ac8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82acc:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   82ace:	7bfb      	ldrb	r3, [r7, #15]
   82ad0:	68b8      	ldr	r0, [r7, #8]
   82ad2:	2100      	movs	r1, #0
   82ad4:	461a      	mov	r2, r3
   82ad6:	4b31      	ldr	r3, [pc, #196]	; (82b9c <udd_ep_interrupt+0x1d0>)
   82ad8:	4798      	blx	r3
				return true;
   82ada:	2301      	movs	r3, #1
   82adc:	e049      	b.n	82b72 <udd_ep_interrupt+0x1a6>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   82ade:	7bfb      	ldrb	r3, [r7, #15]
   82ae0:	009a      	lsls	r2, r3, #2
   82ae2:	4b2a      	ldr	r3, [pc, #168]	; (82b8c <udd_ep_interrupt+0x1c0>)
   82ae4:	4413      	add	r3, r2
   82ae6:	681b      	ldr	r3, [r3, #0]
   82ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   82aec:	2b00      	cmp	r3, #0
   82aee:	d038      	beq.n	82b62 <udd_ep_interrupt+0x196>
					&& (0 == udd_nb_busy_bank(ep))) {
   82af0:	7bfb      	ldrb	r3, [r7, #15]
   82af2:	009a      	lsls	r2, r3, #2
   82af4:	4b26      	ldr	r3, [pc, #152]	; (82b90 <udd_ep_interrupt+0x1c4>)
   82af6:	4413      	add	r3, r2
   82af8:	681b      	ldr	r3, [r3, #0]
   82afa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   82afe:	0b1b      	lsrs	r3, r3, #12
   82b00:	2b00      	cmp	r3, #0
   82b02:	d12e      	bne.n	82b62 <udd_ep_interrupt+0x196>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   82b04:	7bfb      	ldrb	r3, [r7, #15]
   82b06:	009a      	lsls	r2, r3, #2
   82b08:	4b22      	ldr	r3, [pc, #136]	; (82b94 <udd_ep_interrupt+0x1c8>)
   82b0a:	4413      	add	r3, r2
   82b0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82b10:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   82b12:	4a1b      	ldr	r2, [pc, #108]	; (82b80 <udd_ep_interrupt+0x1b4>)
   82b14:	7bfb      	ldrb	r3, [r7, #15]
   82b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82b1a:	fa01 f303 	lsl.w	r3, r1, r3
   82b1e:	6153      	str	r3, [r2, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   82b20:	68ba      	ldr	r2, [r7, #8]
   82b22:	7d13      	ldrb	r3, [r2, #20]
   82b24:	f36f 0382 	bfc	r3, #2, #1
   82b28:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   82b2a:	7bfb      	ldrb	r3, [r7, #15]
   82b2c:	009a      	lsls	r2, r3, #2
   82b2e:	4b1c      	ldr	r3, [pc, #112]	; (82ba0 <udd_ep_interrupt+0x1d4>)
   82b30:	4413      	add	r3, r2
   82b32:	7bfa      	ldrb	r2, [r7, #15]
   82b34:	0091      	lsls	r1, r2, #2
   82b36:	4a1a      	ldr	r2, [pc, #104]	; (82ba0 <udd_ep_interrupt+0x1d4>)
   82b38:	440a      	add	r2, r1
   82b3a:	6812      	ldr	r2, [r2, #0]
   82b3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   82b40:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   82b42:	7bfb      	ldrb	r3, [r7, #15]
   82b44:	009a      	lsls	r2, r3, #2
   82b46:	4b17      	ldr	r3, [pc, #92]	; (82ba4 <udd_ep_interrupt+0x1d8>)
   82b48:	4413      	add	r3, r2
   82b4a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82b4e:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   82b50:	7bfb      	ldrb	r3, [r7, #15]
   82b52:	009a      	lsls	r2, r3, #2
   82b54:	4b13      	ldr	r3, [pc, #76]	; (82ba4 <udd_ep_interrupt+0x1d8>)
   82b56:	4413      	add	r3, r2
   82b58:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   82b5c:	601a      	str	r2, [r3, #0]
				return true;
   82b5e:	2301      	movs	r3, #1
   82b60:	e007      	b.n	82b72 <udd_ep_interrupt+0x1a6>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   82b62:	7bfb      	ldrb	r3, [r7, #15]
   82b64:	3301      	adds	r3, #1
   82b66:	73fb      	strb	r3, [r7, #15]
   82b68:	7bfb      	ldrb	r3, [r7, #15]
   82b6a:	2b01      	cmp	r3, #1
   82b6c:	f67f af34 	bls.w	829d8 <udd_ep_interrupt+0xc>
				udd_reset_data_toggle(ep);
				return true;
			}
		}
	}
	return false;
   82b70:	2300      	movs	r3, #0
}
   82b72:	4618      	mov	r0, r3
   82b74:	3710      	adds	r7, #16
   82b76:	46bd      	mov	sp, r7
   82b78:	bd80      	pop	{r7, pc}
   82b7a:	bf00      	nop
   82b7c:	2007075c 	.word	0x2007075c
   82b80:	400ac000 	.word	0x400ac000
   82b84:	400ac300 	.word	0x400ac300
   82b88:	000827c9 	.word	0x000827c9
   82b8c:	400ac1c0 	.word	0x400ac1c0
   82b90:	400ac130 	.word	0x400ac130
   82b94:	400ac220 	.word	0x400ac220
   82b98:	400ac160 	.word	0x400ac160
   82b9c:	00082761 	.word	0x00082761
   82ba0:	400ac100 	.word	0x400ac100
   82ba4:	400ac1f0 	.word	0x400ac1f0

00082ba8 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
   82ba8:	b580      	push	{r7, lr}
   82baa:	b084      	sub	sp, #16
   82bac:	af00      	add	r7, sp, #0
   82bae:	60f8      	str	r0, [r7, #12]
   82bb0:	60b9      	str	r1, [r7, #8]
   82bb2:	607a      	str	r2, [r7, #4]
   82bb4:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
   82bb6:	4b35      	ldr	r3, [pc, #212]	; (82c8c <udi_hid_setup+0xe4>)
   82bb8:	781b      	ldrb	r3, [r3, #0]
   82bba:	b2db      	uxtb	r3, r3
   82bbc:	b25b      	sxtb	r3, r3
   82bbe:	2b00      	cmp	r3, #0
   82bc0:	da30      	bge.n	82c24 <udi_hid_setup+0x7c>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   82bc2:	4b32      	ldr	r3, [pc, #200]	; (82c8c <udi_hid_setup+0xe4>)
   82bc4:	781b      	ldrb	r3, [r3, #0]
   82bc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
   82bca:	2b00      	cmp	r3, #0
   82bcc:	d108      	bne.n	82be0 <udi_hid_setup+0x38>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   82bce:	4b2f      	ldr	r3, [pc, #188]	; (82c8c <udi_hid_setup+0xe4>)
   82bd0:	785b      	ldrb	r3, [r3, #1]
   82bd2:	2b06      	cmp	r3, #6
   82bd4:	d104      	bne.n	82be0 <udi_hid_setup+0x38>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
   82bd6:	6878      	ldr	r0, [r7, #4]
   82bd8:	4b2d      	ldr	r3, [pc, #180]	; (82c90 <udi_hid_setup+0xe8>)
   82bda:	4798      	blx	r3
   82bdc:	4603      	mov	r3, r0
   82bde:	e050      	b.n	82c82 <udi_hid_setup+0xda>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   82be0:	4b2a      	ldr	r3, [pc, #168]	; (82c8c <udi_hid_setup+0xe4>)
   82be2:	781b      	ldrb	r3, [r3, #0]
   82be4:	f003 0360 	and.w	r3, r3, #96	; 0x60
   82be8:	2b20      	cmp	r3, #32
   82bea:	d11b      	bne.n	82c24 <udi_hid_setup+0x7c>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   82bec:	4b27      	ldr	r3, [pc, #156]	; (82c8c <udi_hid_setup+0xe4>)
   82bee:	785b      	ldrb	r3, [r3, #1]
   82bf0:	2b02      	cmp	r3, #2
   82bf2:	d007      	beq.n	82c04 <udi_hid_setup+0x5c>
   82bf4:	2b03      	cmp	r3, #3
   82bf6:	d00d      	beq.n	82c14 <udi_hid_setup+0x6c>
   82bf8:	2b01      	cmp	r3, #1
   82bfa:	d113      	bne.n	82c24 <udi_hid_setup+0x7c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
   82bfc:	683b      	ldr	r3, [r7, #0]
   82bfe:	4798      	blx	r3
   82c00:	4603      	mov	r3, r0
   82c02:	e03e      	b.n	82c82 <udi_hid_setup+0xda>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
   82c04:	4a21      	ldr	r2, [pc, #132]	; (82c8c <udi_hid_setup+0xe4>)
   82c06:	68fb      	ldr	r3, [r7, #12]
   82c08:	6093      	str	r3, [r2, #8]
				udd_g_ctrlreq.payload_size = 1;
   82c0a:	4b20      	ldr	r3, [pc, #128]	; (82c8c <udi_hid_setup+0xe4>)
   82c0c:	2201      	movs	r2, #1
   82c0e:	819a      	strh	r2, [r3, #12]
				return true;
   82c10:	2301      	movs	r3, #1
   82c12:	e036      	b.n	82c82 <udi_hid_setup+0xda>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
   82c14:	4a1d      	ldr	r2, [pc, #116]	; (82c8c <udi_hid_setup+0xe4>)
   82c16:	68bb      	ldr	r3, [r7, #8]
   82c18:	6093      	str	r3, [r2, #8]
				udd_g_ctrlreq.payload_size = 1;
   82c1a:	4b1c      	ldr	r3, [pc, #112]	; (82c8c <udi_hid_setup+0xe4>)
   82c1c:	2201      	movs	r2, #1
   82c1e:	819a      	strh	r2, [r3, #12]
				return true;
   82c20:	2301      	movs	r3, #1
   82c22:	e02e      	b.n	82c82 <udi_hid_setup+0xda>
			}
		}
	}
	if (Udd_setup_is_out()) {
   82c24:	4b19      	ldr	r3, [pc, #100]	; (82c8c <udi_hid_setup+0xe4>)
   82c26:	781b      	ldrb	r3, [r3, #0]
   82c28:	b2db      	uxtb	r3, r3
   82c2a:	b25b      	sxtb	r3, r3
   82c2c:	2b00      	cmp	r3, #0
   82c2e:	db27      	blt.n	82c80 <udi_hid_setup+0xd8>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   82c30:	4b16      	ldr	r3, [pc, #88]	; (82c8c <udi_hid_setup+0xe4>)
   82c32:	781b      	ldrb	r3, [r3, #0]
   82c34:	f003 0360 	and.w	r3, r3, #96	; 0x60
   82c38:	2b20      	cmp	r3, #32
   82c3a:	d121      	bne.n	82c80 <udi_hid_setup+0xd8>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   82c3c:	4b13      	ldr	r3, [pc, #76]	; (82c8c <udi_hid_setup+0xe4>)
   82c3e:	785b      	ldrb	r3, [r3, #1]
   82c40:	2b0a      	cmp	r3, #10
   82c42:	d007      	beq.n	82c54 <udi_hid_setup+0xac>
   82c44:	2b0b      	cmp	r3, #11
   82c46:	d00e      	beq.n	82c66 <udi_hid_setup+0xbe>
   82c48:	2b09      	cmp	r3, #9
   82c4a:	d119      	bne.n	82c80 <udi_hid_setup+0xd8>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
   82c4c:	683b      	ldr	r3, [r7, #0]
   82c4e:	4798      	blx	r3
   82c50:	4603      	mov	r3, r0
   82c52:	e016      	b.n	82c82 <udi_hid_setup+0xda>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
   82c54:	4b0d      	ldr	r3, [pc, #52]	; (82c8c <udi_hid_setup+0xe4>)
   82c56:	885b      	ldrh	r3, [r3, #2]
   82c58:	0a1b      	lsrs	r3, r3, #8
   82c5a:	b29b      	uxth	r3, r3
   82c5c:	b2da      	uxtb	r2, r3
   82c5e:	68fb      	ldr	r3, [r7, #12]
   82c60:	701a      	strb	r2, [r3, #0]
				return true;
   82c62:	2301      	movs	r3, #1
   82c64:	e00d      	b.n	82c82 <udi_hid_setup+0xda>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
   82c66:	4b09      	ldr	r3, [pc, #36]	; (82c8c <udi_hid_setup+0xe4>)
   82c68:	88db      	ldrh	r3, [r3, #6]
   82c6a:	2b00      	cmp	r3, #0
   82c6c:	d001      	beq.n	82c72 <udi_hid_setup+0xca>
					return false;
   82c6e:	2300      	movs	r3, #0
   82c70:	e007      	b.n	82c82 <udi_hid_setup+0xda>
				*protocol = udd_g_ctrlreq.req.wValue;
   82c72:	4b06      	ldr	r3, [pc, #24]	; (82c8c <udi_hid_setup+0xe4>)
   82c74:	885b      	ldrh	r3, [r3, #2]
   82c76:	b2da      	uxtb	r2, r3
   82c78:	68bb      	ldr	r3, [r7, #8]
   82c7a:	701a      	strb	r2, [r3, #0]
				return true;
   82c7c:	2301      	movs	r3, #1
   82c7e:	e000      	b.n	82c82 <udi_hid_setup+0xda>
			}
		}
	}
	return false;	// Request not supported
   82c80:	2300      	movs	r3, #0
}
   82c82:	4618      	mov	r0, r3
   82c84:	3710      	adds	r7, #16
   82c86:	46bd      	mov	sp, r7
   82c88:	bd80      	pop	{r7, pc}
   82c8a:	bf00      	nop
   82c8c:	20070874 	.word	0x20070874
   82c90:	00082c95 	.word	0x00082c95

00082c94 <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
   82c94:	b580      	push	{r7, lr}
   82c96:	b084      	sub	sp, #16
   82c98:	af00      	add	r7, sp, #0
   82c9a:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
   82c9c:	4b20      	ldr	r3, [pc, #128]	; (82d20 <udi_hid_reqstdifaceget_descriptor+0x8c>)
   82c9e:	4798      	blx	r3
   82ca0:	4603      	mov	r3, r0
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
   82ca2:	3309      	adds	r3, #9
   82ca4:	60fb      	str	r3, [r7, #12]
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
   82ca6:	68fb      	ldr	r3, [r7, #12]
   82ca8:	785b      	ldrb	r3, [r3, #1]
   82caa:	2b21      	cmp	r3, #33	; 0x21
   82cac:	d001      	beq.n	82cb2 <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
   82cae:	2300      	movs	r3, #0
   82cb0:	e031      	b.n	82d16 <udi_hid_reqstdifaceget_descriptor+0x82>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   82cb2:	4b1c      	ldr	r3, [pc, #112]	; (82d24 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82cb4:	885b      	ldrh	r3, [r3, #2]
   82cb6:	0a1b      	lsrs	r3, r3, #8
   82cb8:	b29b      	uxth	r3, r3
   82cba:	b2db      	uxtb	r3, r3
   82cbc:	2b21      	cmp	r3, #33	; 0x21
   82cbe:	d10f      	bne.n	82ce0 <udi_hid_reqstdifaceget_descriptor+0x4c>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
   82cc0:	4a18      	ldr	r2, [pc, #96]	; (82d24 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82cc2:	68fb      	ldr	r3, [r7, #12]
   82cc4:	6093      	str	r3, [r2, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
   82cc6:	68fb      	ldr	r3, [r7, #12]
   82cc8:	781b      	ldrb	r3, [r3, #0]
   82cca:	b29a      	uxth	r2, r3
   82ccc:	4b15      	ldr	r3, [pc, #84]	; (82d24 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82cce:	88db      	ldrh	r3, [r3, #6]
   82cd0:	4293      	cmp	r3, r2
   82cd2:	bf28      	it	cs
   82cd4:	4613      	movcs	r3, r2
   82cd6:	b29a      	uxth	r2, r3
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
   82cd8:	4b12      	ldr	r3, [pc, #72]	; (82d24 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82cda:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
   82cdc:	2301      	movs	r3, #1
   82cde:	e01a      	b.n	82d16 <udi_hid_reqstdifaceget_descriptor+0x82>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
   82ce0:	68fb      	ldr	r3, [r7, #12]
   82ce2:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   82ce4:	4b0f      	ldr	r3, [pc, #60]	; (82d24 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82ce6:	885b      	ldrh	r3, [r3, #2]
   82ce8:	0a1b      	lsrs	r3, r3, #8
   82cea:	b29b      	uxth	r3, r3
   82cec:	b2db      	uxtb	r3, r3
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
   82cee:	429a      	cmp	r2, r3
   82cf0:	d110      	bne.n	82d14 <udi_hid_reqstdifaceget_descriptor+0x80>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
   82cf2:	4a0c      	ldr	r2, [pc, #48]	; (82d24 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82cf4:	687b      	ldr	r3, [r7, #4]
   82cf6:	6093      	str	r3, [r2, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
   82cf8:	68fb      	ldr	r3, [r7, #12]
   82cfa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
   82cfe:	b29a      	uxth	r2, r3
   82d00:	4b08      	ldr	r3, [pc, #32]	; (82d24 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82d02:	88db      	ldrh	r3, [r3, #6]
   82d04:	4293      	cmp	r3, r2
   82d06:	bf28      	it	cs
   82d08:	4613      	movcs	r3, r2
   82d0a:	b29a      	uxth	r2, r3
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
   82d0c:	4b05      	ldr	r3, [pc, #20]	; (82d24 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82d0e:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
   82d10:	2301      	movs	r3, #1
   82d12:	e000      	b.n	82d16 <udi_hid_reqstdifaceget_descriptor+0x82>
	}
	return false;
   82d14:	2300      	movs	r3, #0
}
   82d16:	4618      	mov	r0, r3
   82d18:	3710      	adds	r7, #16
   82d1a:	46bd      	mov	sp, r7
   82d1c:	bd80      	pop	{r7, pc}
   82d1e:	bf00      	nop
   82d20:	00080545 	.word	0x00080545
   82d24:	20070874 	.word	0x20070874

00082d28 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   82d28:	b580      	push	{r7, lr}
   82d2a:	b082      	sub	sp, #8
   82d2c:	af00      	add	r7, sp, #0
   82d2e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82d30:	687b      	ldr	r3, [r7, #4]
   82d32:	2b07      	cmp	r3, #7
   82d34:	d830      	bhi.n	82d98 <osc_enable+0x70>
   82d36:	a201      	add	r2, pc, #4	; (adr r2, 82d3c <osc_enable+0x14>)
   82d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82d3c:	00082d99 	.word	0x00082d99
   82d40:	00082d5d 	.word	0x00082d5d
   82d44:	00082d65 	.word	0x00082d65
   82d48:	00082d6d 	.word	0x00082d6d
   82d4c:	00082d75 	.word	0x00082d75
   82d50:	00082d7d 	.word	0x00082d7d
   82d54:	00082d85 	.word	0x00082d85
   82d58:	00082d8f 	.word	0x00082d8f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   82d5c:	2000      	movs	r0, #0
   82d5e:	4b10      	ldr	r3, [pc, #64]	; (82da0 <osc_enable+0x78>)
   82d60:	4798      	blx	r3
		break;
   82d62:	e019      	b.n	82d98 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   82d64:	2001      	movs	r0, #1
   82d66:	4b0e      	ldr	r3, [pc, #56]	; (82da0 <osc_enable+0x78>)
   82d68:	4798      	blx	r3
		break;
   82d6a:	e015      	b.n	82d98 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   82d6c:	2000      	movs	r0, #0
   82d6e:	4b0d      	ldr	r3, [pc, #52]	; (82da4 <osc_enable+0x7c>)
   82d70:	4798      	blx	r3
		break;
   82d72:	e011      	b.n	82d98 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   82d74:	2010      	movs	r0, #16
   82d76:	4b0b      	ldr	r3, [pc, #44]	; (82da4 <osc_enable+0x7c>)
   82d78:	4798      	blx	r3
		break;
   82d7a:	e00d      	b.n	82d98 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   82d7c:	2020      	movs	r0, #32
   82d7e:	4b09      	ldr	r3, [pc, #36]	; (82da4 <osc_enable+0x7c>)
   82d80:	4798      	blx	r3
		break;
   82d82:	e009      	b.n	82d98 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82d84:	2000      	movs	r0, #0
   82d86:	213e      	movs	r1, #62	; 0x3e
   82d88:	4b07      	ldr	r3, [pc, #28]	; (82da8 <osc_enable+0x80>)
   82d8a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   82d8c:	e004      	b.n	82d98 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   82d8e:	2001      	movs	r0, #1
   82d90:	213e      	movs	r1, #62	; 0x3e
   82d92:	4b05      	ldr	r3, [pc, #20]	; (82da8 <osc_enable+0x80>)
   82d94:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   82d96:	bf00      	nop
	}
}
   82d98:	3708      	adds	r7, #8
   82d9a:	46bd      	mov	sp, r7
   82d9c:	bd80      	pop	{r7, pc}
   82d9e:	bf00      	nop
   82da0:	00083719 	.word	0x00083719
   82da4:	00083785 	.word	0x00083785
   82da8:	000837f5 	.word	0x000837f5

00082dac <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   82dac:	b580      	push	{r7, lr}
   82dae:	b082      	sub	sp, #8
   82db0:	af00      	add	r7, sp, #0
   82db2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82db4:	687b      	ldr	r3, [r7, #4]
   82db6:	2b07      	cmp	r3, #7
   82db8:	d826      	bhi.n	82e08 <osc_is_ready+0x5c>
   82dba:	a201      	add	r2, pc, #4	; (adr r2, 82dc0 <osc_is_ready+0x14>)
   82dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82dc0:	00082de1 	.word	0x00082de1
   82dc4:	00082de5 	.word	0x00082de5
   82dc8:	00082de5 	.word	0x00082de5
   82dcc:	00082df7 	.word	0x00082df7
   82dd0:	00082df7 	.word	0x00082df7
   82dd4:	00082df7 	.word	0x00082df7
   82dd8:	00082df7 	.word	0x00082df7
   82ddc:	00082df7 	.word	0x00082df7
	case OSC_SLCK_32K_RC:
		return 1;
   82de0:	2301      	movs	r3, #1
   82de2:	e012      	b.n	82e0a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   82de4:	4b0b      	ldr	r3, [pc, #44]	; (82e14 <osc_is_ready+0x68>)
   82de6:	4798      	blx	r3
   82de8:	4603      	mov	r3, r0
   82dea:	2b00      	cmp	r3, #0
   82dec:	bf14      	ite	ne
   82dee:	2301      	movne	r3, #1
   82df0:	2300      	moveq	r3, #0
   82df2:	b2db      	uxtb	r3, r3
   82df4:	e009      	b.n	82e0a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82df6:	4b08      	ldr	r3, [pc, #32]	; (82e18 <osc_is_ready+0x6c>)
   82df8:	4798      	blx	r3
   82dfa:	4603      	mov	r3, r0
   82dfc:	2b00      	cmp	r3, #0
   82dfe:	bf14      	ite	ne
   82e00:	2301      	movne	r3, #1
   82e02:	2300      	moveq	r3, #0
   82e04:	b2db      	uxtb	r3, r3
   82e06:	e000      	b.n	82e0a <osc_is_ready+0x5e>
	}

	return 0;
   82e08:	2300      	movs	r3, #0
}
   82e0a:	4618      	mov	r0, r3
   82e0c:	3708      	adds	r7, #8
   82e0e:	46bd      	mov	sp, r7
   82e10:	bd80      	pop	{r7, pc}
   82e12:	bf00      	nop
   82e14:	00083751 	.word	0x00083751
   82e18:	0008386d 	.word	0x0008386d

00082e1c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   82e1c:	b480      	push	{r7}
   82e1e:	b083      	sub	sp, #12
   82e20:	af00      	add	r7, sp, #0
   82e22:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82e24:	687b      	ldr	r3, [r7, #4]
   82e26:	2b07      	cmp	r3, #7
   82e28:	d825      	bhi.n	82e76 <osc_get_rate+0x5a>
   82e2a:	a201      	add	r2, pc, #4	; (adr r2, 82e30 <osc_get_rate+0x14>)
   82e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82e30:	00082e51 	.word	0x00082e51
   82e34:	00082e57 	.word	0x00082e57
   82e38:	00082e5d 	.word	0x00082e5d
   82e3c:	00082e63 	.word	0x00082e63
   82e40:	00082e67 	.word	0x00082e67
   82e44:	00082e6b 	.word	0x00082e6b
   82e48:	00082e6f 	.word	0x00082e6f
   82e4c:	00082e73 	.word	0x00082e73
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   82e50:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   82e54:	e010      	b.n	82e78 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   82e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82e5a:	e00d      	b.n	82e78 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   82e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82e60:	e00a      	b.n	82e78 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   82e62:	4b08      	ldr	r3, [pc, #32]	; (82e84 <osc_get_rate+0x68>)
   82e64:	e008      	b.n	82e78 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   82e66:	4b08      	ldr	r3, [pc, #32]	; (82e88 <osc_get_rate+0x6c>)
   82e68:	e006      	b.n	82e78 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   82e6a:	4b08      	ldr	r3, [pc, #32]	; (82e8c <osc_get_rate+0x70>)
   82e6c:	e004      	b.n	82e78 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   82e6e:	4b07      	ldr	r3, [pc, #28]	; (82e8c <osc_get_rate+0x70>)
   82e70:	e002      	b.n	82e78 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   82e72:	4b06      	ldr	r3, [pc, #24]	; (82e8c <osc_get_rate+0x70>)
   82e74:	e000      	b.n	82e78 <osc_get_rate+0x5c>
	}

	return 0;
   82e76:	2300      	movs	r3, #0
}
   82e78:	4618      	mov	r0, r3
   82e7a:	370c      	adds	r7, #12
   82e7c:	46bd      	mov	sp, r7
   82e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e82:	4770      	bx	lr
   82e84:	003d0900 	.word	0x003d0900
   82e88:	007a1200 	.word	0x007a1200
   82e8c:	00b71b00 	.word	0x00b71b00

00082e90 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   82e90:	b580      	push	{r7, lr}
   82e92:	b082      	sub	sp, #8
   82e94:	af00      	add	r7, sp, #0
   82e96:	4603      	mov	r3, r0
   82e98:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   82e9a:	bf00      	nop
   82e9c:	79fb      	ldrb	r3, [r7, #7]
   82e9e:	4618      	mov	r0, r3
   82ea0:	4b05      	ldr	r3, [pc, #20]	; (82eb8 <osc_wait_ready+0x28>)
   82ea2:	4798      	blx	r3
   82ea4:	4603      	mov	r3, r0
   82ea6:	f083 0301 	eor.w	r3, r3, #1
   82eaa:	b2db      	uxtb	r3, r3
   82eac:	2b00      	cmp	r3, #0
   82eae:	d1f5      	bne.n	82e9c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   82eb0:	3708      	adds	r7, #8
   82eb2:	46bd      	mov	sp, r7
   82eb4:	bd80      	pop	{r7, pc}
   82eb6:	bf00      	nop
   82eb8:	00082dad 	.word	0x00082dad

00082ebc <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   82ebc:	b580      	push	{r7, lr}
   82ebe:	b086      	sub	sp, #24
   82ec0:	af00      	add	r7, sp, #0
   82ec2:	60f8      	str	r0, [r7, #12]
   82ec4:	607a      	str	r2, [r7, #4]
   82ec6:	603b      	str	r3, [r7, #0]
   82ec8:	460b      	mov	r3, r1
   82eca:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   82ecc:	687b      	ldr	r3, [r7, #4]
   82ece:	2b00      	cmp	r3, #0
   82ed0:	d107      	bne.n	82ee2 <pll_config_init+0x26>
   82ed2:	683b      	ldr	r3, [r7, #0]
   82ed4:	2b00      	cmp	r3, #0
   82ed6:	d104      	bne.n	82ee2 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   82ed8:	68fb      	ldr	r3, [r7, #12]
   82eda:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   82ede:	601a      	str	r2, [r3, #0]
   82ee0:	e019      	b.n	82f16 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   82ee2:	7afb      	ldrb	r3, [r7, #11]
   82ee4:	4618      	mov	r0, r3
   82ee6:	4b0d      	ldr	r3, [pc, #52]	; (82f1c <pll_config_init+0x60>)
   82ee8:	4798      	blx	r3
   82eea:	4602      	mov	r2, r0
   82eec:	687b      	ldr	r3, [r7, #4]
   82eee:	fbb2 f3f3 	udiv	r3, r2, r3
   82ef2:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   82ef4:	697b      	ldr	r3, [r7, #20]
   82ef6:	683a      	ldr	r2, [r7, #0]
   82ef8:	fb02 f303 	mul.w	r3, r2, r3
   82efc:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   82efe:	683b      	ldr	r3, [r7, #0]
   82f00:	3b01      	subs	r3, #1
   82f02:	041a      	lsls	r2, r3, #16
   82f04:	4b06      	ldr	r3, [pc, #24]	; (82f20 <pll_config_init+0x64>)
   82f06:	4013      	ands	r3, r2
   82f08:	687a      	ldr	r2, [r7, #4]
   82f0a:	b2d2      	uxtb	r2, r2
   82f0c:	4313      	orrs	r3, r2
   82f0e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   82f12:	68fb      	ldr	r3, [r7, #12]
   82f14:	601a      	str	r2, [r3, #0]
	}
}
   82f16:	3718      	adds	r7, #24
   82f18:	46bd      	mov	sp, r7
   82f1a:	bd80      	pop	{r7, pc}
   82f1c:	00082e1d 	.word	0x00082e1d
   82f20:	07ff0000 	.word	0x07ff0000

00082f24 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   82f24:	b580      	push	{r7, lr}
   82f26:	b082      	sub	sp, #8
   82f28:	af00      	add	r7, sp, #0
   82f2a:	6078      	str	r0, [r7, #4]
   82f2c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82f2e:	683b      	ldr	r3, [r7, #0]
   82f30:	2b00      	cmp	r3, #0
   82f32:	d108      	bne.n	82f46 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   82f34:	4b08      	ldr	r3, [pc, #32]	; (82f58 <pll_enable+0x34>)
   82f36:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82f38:	4a08      	ldr	r2, [pc, #32]	; (82f5c <pll_enable+0x38>)
   82f3a:	687b      	ldr	r3, [r7, #4]
   82f3c:	681b      	ldr	r3, [r3, #0]
   82f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82f42:	6293      	str	r3, [r2, #40]	; 0x28
   82f44:	e005      	b.n	82f52 <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82f46:	4a05      	ldr	r2, [pc, #20]	; (82f5c <pll_enable+0x38>)
   82f48:	687b      	ldr	r3, [r7, #4]
   82f4a:	681b      	ldr	r3, [r3, #0]
   82f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82f50:	61d3      	str	r3, [r2, #28]
	}
}
   82f52:	3708      	adds	r7, #8
   82f54:	46bd      	mov	sp, r7
   82f56:	bd80      	pop	{r7, pc}
   82f58:	00083889 	.word	0x00083889
   82f5c:	400e0600 	.word	0x400e0600

00082f60 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   82f60:	b580      	push	{r7, lr}
   82f62:	b082      	sub	sp, #8
   82f64:	af00      	add	r7, sp, #0
   82f66:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82f68:	687b      	ldr	r3, [r7, #4]
   82f6a:	2b00      	cmp	r3, #0
   82f6c:	d103      	bne.n	82f76 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   82f6e:	4b05      	ldr	r3, [pc, #20]	; (82f84 <pll_is_locked+0x24>)
   82f70:	4798      	blx	r3
   82f72:	4603      	mov	r3, r0
   82f74:	e002      	b.n	82f7c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   82f76:	4b04      	ldr	r3, [pc, #16]	; (82f88 <pll_is_locked+0x28>)
   82f78:	4798      	blx	r3
   82f7a:	4603      	mov	r3, r0
	}
}
   82f7c:	4618      	mov	r0, r3
   82f7e:	3708      	adds	r7, #8
   82f80:	46bd      	mov	sp, r7
   82f82:	bd80      	pop	{r7, pc}
   82f84:	000838a1 	.word	0x000838a1
   82f88:	000838e5 	.word	0x000838e5

00082f8c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   82f8c:	b580      	push	{r7, lr}
   82f8e:	b082      	sub	sp, #8
   82f90:	af00      	add	r7, sp, #0
   82f92:	4603      	mov	r3, r0
   82f94:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   82f96:	79fb      	ldrb	r3, [r7, #7]
   82f98:	3b03      	subs	r3, #3
   82f9a:	2b04      	cmp	r3, #4
   82f9c:	d808      	bhi.n	82fb0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   82f9e:	79fb      	ldrb	r3, [r7, #7]
   82fa0:	4618      	mov	r0, r3
   82fa2:	4b05      	ldr	r3, [pc, #20]	; (82fb8 <pll_enable_source+0x2c>)
   82fa4:	4798      	blx	r3
		osc_wait_ready(e_src);
   82fa6:	79fb      	ldrb	r3, [r7, #7]
   82fa8:	4618      	mov	r0, r3
   82faa:	4b04      	ldr	r3, [pc, #16]	; (82fbc <pll_enable_source+0x30>)
   82fac:	4798      	blx	r3
		break;
   82fae:	e000      	b.n	82fb2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   82fb0:	bf00      	nop
	}
}
   82fb2:	3708      	adds	r7, #8
   82fb4:	46bd      	mov	sp, r7
   82fb6:	bd80      	pop	{r7, pc}
   82fb8:	00082d29 	.word	0x00082d29
   82fbc:	00082e91 	.word	0x00082e91

00082fc0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   82fc0:	b580      	push	{r7, lr}
   82fc2:	b082      	sub	sp, #8
   82fc4:	af00      	add	r7, sp, #0
   82fc6:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82fc8:	bf00      	nop
   82fca:	6878      	ldr	r0, [r7, #4]
   82fcc:	4b04      	ldr	r3, [pc, #16]	; (82fe0 <pll_wait_for_lock+0x20>)
   82fce:	4798      	blx	r3
   82fd0:	4603      	mov	r3, r0
   82fd2:	2b00      	cmp	r3, #0
   82fd4:	d0f9      	beq.n	82fca <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   82fd6:	2300      	movs	r3, #0
}
   82fd8:	4618      	mov	r0, r3
   82fda:	3708      	adds	r7, #8
   82fdc:	46bd      	mov	sp, r7
   82fde:	bd80      	pop	{r7, pc}
   82fe0:	00082f61 	.word	0x00082f61

00082fe4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   82fe4:	b580      	push	{r7, lr}
   82fe6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   82fe8:	2006      	movs	r0, #6
   82fea:	4b04      	ldr	r3, [pc, #16]	; (82ffc <sysclk_get_main_hz+0x18>)
   82fec:	4798      	blx	r3
   82fee:	4602      	mov	r2, r0
   82ff0:	4613      	mov	r3, r2
   82ff2:	00db      	lsls	r3, r3, #3
   82ff4:	1a9b      	subs	r3, r3, r2
   82ff6:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   82ff8:	4618      	mov	r0, r3
   82ffa:	bd80      	pop	{r7, pc}
   82ffc:	00082e1d 	.word	0x00082e1d

00083000 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   83000:	b580      	push	{r7, lr}
   83002:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   83004:	4b02      	ldr	r3, [pc, #8]	; (83010 <sysclk_get_cpu_hz+0x10>)
   83006:	4798      	blx	r3
   83008:	4603      	mov	r3, r0
   8300a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   8300c:	4618      	mov	r0, r3
   8300e:	bd80      	pop	{r7, pc}
   83010:	00082fe5 	.word	0x00082fe5

00083014 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   83014:	b580      	push	{r7, lr}
   83016:	b082      	sub	sp, #8
   83018:	af00      	add	r7, sp, #0
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   8301a:	4b05      	ldr	r3, [pc, #20]	; (83030 <sysclk_enable_usb+0x1c>)
   8301c:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   8301e:	2000      	movs	r0, #0
   83020:	4b04      	ldr	r3, [pc, #16]	; (83034 <sysclk_enable_usb+0x20>)
   83022:	4798      	blx	r3
		pmc_enable_udpck();
   83024:	4b04      	ldr	r3, [pc, #16]	; (83038 <sysclk_enable_usb+0x24>)
   83026:	4798      	blx	r3
		return;
   83028:	bf00      	nop
	}
}
   8302a:	3708      	adds	r7, #8
   8302c:	46bd      	mov	sp, r7
   8302e:	bd80      	pop	{r7, pc}
   83030:	000838bd 	.word	0x000838bd
   83034:	00083985 	.word	0x00083985
   83038:	000839ad 	.word	0x000839ad

0008303c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8303c:	b590      	push	{r4, r7, lr}
   8303e:	b083      	sub	sp, #12
   83040:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83042:	4811      	ldr	r0, [pc, #68]	; (83088 <sysclk_init+0x4c>)
   83044:	4b11      	ldr	r3, [pc, #68]	; (8308c <sysclk_init+0x50>)
   83046:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83048:	2006      	movs	r0, #6
   8304a:	4b11      	ldr	r3, [pc, #68]	; (83090 <sysclk_init+0x54>)
   8304c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   8304e:	1d3b      	adds	r3, r7, #4
   83050:	4618      	mov	r0, r3
   83052:	2106      	movs	r1, #6
   83054:	2201      	movs	r2, #1
   83056:	230e      	movs	r3, #14
   83058:	4c0e      	ldr	r4, [pc, #56]	; (83094 <sysclk_init+0x58>)
   8305a:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8305c:	1d3b      	adds	r3, r7, #4
   8305e:	4618      	mov	r0, r3
   83060:	2100      	movs	r1, #0
   83062:	4b0d      	ldr	r3, [pc, #52]	; (83098 <sysclk_init+0x5c>)
   83064:	4798      	blx	r3
		pll_wait_for_lock(0);
   83066:	2000      	movs	r0, #0
   83068:	4b0c      	ldr	r3, [pc, #48]	; (8309c <sysclk_init+0x60>)
   8306a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8306c:	2010      	movs	r0, #16
   8306e:	4b0c      	ldr	r3, [pc, #48]	; (830a0 <sysclk_init+0x64>)
   83070:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83072:	4b0c      	ldr	r3, [pc, #48]	; (830a4 <sysclk_init+0x68>)
   83074:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83076:	4b0c      	ldr	r3, [pc, #48]	; (830a8 <sysclk_init+0x6c>)
   83078:	4798      	blx	r3
   8307a:	4603      	mov	r3, r0
   8307c:	4618      	mov	r0, r3
   8307e:	4b03      	ldr	r3, [pc, #12]	; (8308c <sysclk_init+0x50>)
   83080:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83082:	370c      	adds	r7, #12
   83084:	46bd      	mov	sp, r7
   83086:	bd90      	pop	{r4, r7, pc}
   83088:	0501bd00 	.word	0x0501bd00
   8308c:	200700d1 	.word	0x200700d1
   83090:	00082f8d 	.word	0x00082f8d
   83094:	00082ebd 	.word	0x00082ebd
   83098:	00082f25 	.word	0x00082f25
   8309c:	00082fc1 	.word	0x00082fc1
   830a0:	00083695 	.word	0x00083695
   830a4:	00083ad1 	.word	0x00083ad1
   830a8:	00083001 	.word	0x00083001

000830ac <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   830ac:	b580      	push	{r7, lr}
   830ae:	b082      	sub	sp, #8
   830b0:	af00      	add	r7, sp, #0
   830b2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   830b4:	6878      	ldr	r0, [r7, #4]
   830b6:	4b02      	ldr	r3, [pc, #8]	; (830c0 <sysclk_enable_peripheral_clock+0x14>)
   830b8:	4798      	blx	r3
}
   830ba:	3708      	adds	r7, #8
   830bc:	46bd      	mov	sp, r7
   830be:	bd80      	pop	{r7, pc}
   830c0:	00083901 	.word	0x00083901

000830c4 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   830c4:	b580      	push	{r7, lr}
   830c6:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   830c8:	200b      	movs	r0, #11
   830ca:	4b06      	ldr	r3, [pc, #24]	; (830e4 <ioport_init+0x20>)
   830cc:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   830ce:	200c      	movs	r0, #12
   830d0:	4b04      	ldr	r3, [pc, #16]	; (830e4 <ioport_init+0x20>)
   830d2:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   830d4:	200d      	movs	r0, #13
   830d6:	4b03      	ldr	r3, [pc, #12]	; (830e4 <ioport_init+0x20>)
   830d8:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   830da:	200e      	movs	r0, #14
   830dc:	4b01      	ldr	r3, [pc, #4]	; (830e4 <ioport_init+0x20>)
   830de:	4798      	blx	r3
	arch_ioport_init();
}
   830e0:	bd80      	pop	{r7, pc}
   830e2:	bf00      	nop
   830e4:	000830ad 	.word	0x000830ad

000830e8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   830e8:	b580      	push	{r7, lr}
   830ea:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   830ec:	4b16      	ldr	r3, [pc, #88]	; (83148 <board_init+0x60>)
   830ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   830f2:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   830f4:	4b15      	ldr	r3, [pc, #84]	; (8314c <board_init+0x64>)
   830f6:	4798      	blx	r3
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   830f8:	203b      	movs	r0, #59	; 0x3b
   830fa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   830fe:	4b14      	ldr	r3, [pc, #80]	; (83150 <board_init+0x68>)
   83100:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   83102:	2055      	movs	r0, #85	; 0x55
   83104:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83108:	4b11      	ldr	r3, [pc, #68]	; (83150 <board_init+0x68>)
   8310a:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8310c:	2056      	movs	r0, #86	; 0x56
   8310e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83112:	4b0f      	ldr	r3, [pc, #60]	; (83150 <board_init+0x68>)
   83114:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   83116:	2068      	movs	r0, #104	; 0x68
   83118:	490e      	ldr	r1, [pc, #56]	; (83154 <board_init+0x6c>)
   8311a:	4b0d      	ldr	r3, [pc, #52]	; (83150 <board_init+0x68>)
   8311c:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8311e:	205c      	movs	r0, #92	; 0x5c
   83120:	490d      	ldr	r1, [pc, #52]	; (83158 <board_init+0x70>)
   83122:	4b0b      	ldr	r3, [pc, #44]	; (83150 <board_init+0x68>)
   83124:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   83126:	480d      	ldr	r0, [pc, #52]	; (8315c <board_init+0x74>)
   83128:	f44f 7140 	mov.w	r1, #768	; 0x300
   8312c:	4a0c      	ldr	r2, [pc, #48]	; (83160 <board_init+0x78>)
   8312e:	4b0d      	ldr	r3, [pc, #52]	; (83164 <board_init+0x7c>)
   83130:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   83132:	202b      	movs	r0, #43	; 0x2b
   83134:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83138:	4b05      	ldr	r3, [pc, #20]	; (83150 <board_init+0x68>)
   8313a:	4798      	blx	r3
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8313c:	202a      	movs	r0, #42	; 0x2a
   8313e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83142:	4b03      	ldr	r3, [pc, #12]	; (83150 <board_init+0x68>)
   83144:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   83146:	bd80      	pop	{r7, pc}
   83148:	400e1a50 	.word	0x400e1a50
   8314c:	000830c5 	.word	0x000830c5
   83150:	00083341 	.word	0x00083341
   83154:	28000079 	.word	0x28000079
   83158:	28000001 	.word	0x28000001
   8315c:	400e0e00 	.word	0x400e0e00
   83160:	08000001 	.word	0x08000001
   83164:	0008347d 	.word	0x0008347d

00083168 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   83168:	b480      	push	{r7}
   8316a:	b085      	sub	sp, #20
   8316c:	af00      	add	r7, sp, #0
   8316e:	60f8      	str	r0, [r7, #12]
   83170:	60b9      	str	r1, [r7, #8]
   83172:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   83174:	687b      	ldr	r3, [r7, #4]
   83176:	2b00      	cmp	r3, #0
   83178:	d003      	beq.n	83182 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   8317a:	68fb      	ldr	r3, [r7, #12]
   8317c:	68ba      	ldr	r2, [r7, #8]
   8317e:	665a      	str	r2, [r3, #100]	; 0x64
   83180:	e002      	b.n	83188 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   83182:	68fb      	ldr	r3, [r7, #12]
   83184:	68ba      	ldr	r2, [r7, #8]
   83186:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   83188:	3714      	adds	r7, #20
   8318a:	46bd      	mov	sp, r7
   8318c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83190:	4770      	bx	lr
   83192:	bf00      	nop

00083194 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   83194:	b480      	push	{r7}
   83196:	b087      	sub	sp, #28
   83198:	af00      	add	r7, sp, #0
   8319a:	60f8      	str	r0, [r7, #12]
   8319c:	60b9      	str	r1, [r7, #8]
   8319e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   831a0:	68fb      	ldr	r3, [r7, #12]
   831a2:	687a      	ldr	r2, [r7, #4]
   831a4:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   831a6:	68bb      	ldr	r3, [r7, #8]
   831a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   831ac:	d01f      	beq.n	831ee <pio_set_peripheral+0x5a>
   831ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   831b2:	d805      	bhi.n	831c0 <pio_set_peripheral+0x2c>
   831b4:	2b00      	cmp	r3, #0
   831b6:	d027      	beq.n	83208 <pio_set_peripheral+0x74>
   831b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   831bc:	d00a      	beq.n	831d4 <pio_set_peripheral+0x40>
   831be:	e01f      	b.n	83200 <pio_set_peripheral+0x6c>
   831c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   831c4:	d020      	beq.n	83208 <pio_set_peripheral+0x74>
   831c6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   831ca:	d01d      	beq.n	83208 <pio_set_peripheral+0x74>
   831cc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   831d0:	d01a      	beq.n	83208 <pio_set_peripheral+0x74>
   831d2:	e015      	b.n	83200 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   831d4:	68fb      	ldr	r3, [r7, #12]
   831d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   831d8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   831da:	68fb      	ldr	r3, [r7, #12]
   831dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   831de:	687b      	ldr	r3, [r7, #4]
   831e0:	43d9      	mvns	r1, r3
   831e2:	697b      	ldr	r3, [r7, #20]
   831e4:	400b      	ands	r3, r1
   831e6:	401a      	ands	r2, r3
   831e8:	68fb      	ldr	r3, [r7, #12]
   831ea:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   831ec:	e008      	b.n	83200 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   831ee:	68fb      	ldr	r3, [r7, #12]
   831f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   831f2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   831f4:	687a      	ldr	r2, [r7, #4]
   831f6:	697b      	ldr	r3, [r7, #20]
   831f8:	431a      	orrs	r2, r3
   831fa:	68fb      	ldr	r3, [r7, #12]
   831fc:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   831fe:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   83200:	68fb      	ldr	r3, [r7, #12]
   83202:	687a      	ldr	r2, [r7, #4]
   83204:	605a      	str	r2, [r3, #4]
   83206:	e000      	b.n	8320a <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   83208:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   8320a:	371c      	adds	r7, #28
   8320c:	46bd      	mov	sp, r7
   8320e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83212:	4770      	bx	lr

00083214 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   83214:	b580      	push	{r7, lr}
   83216:	b084      	sub	sp, #16
   83218:	af00      	add	r7, sp, #0
   8321a:	60f8      	str	r0, [r7, #12]
   8321c:	60b9      	str	r1, [r7, #8]
   8321e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   83220:	68f8      	ldr	r0, [r7, #12]
   83222:	68b9      	ldr	r1, [r7, #8]
   83224:	4b18      	ldr	r3, [pc, #96]	; (83288 <pio_set_input+0x74>)
   83226:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   83228:	687b      	ldr	r3, [r7, #4]
   8322a:	f003 0301 	and.w	r3, r3, #1
   8322e:	68f8      	ldr	r0, [r7, #12]
   83230:	68b9      	ldr	r1, [r7, #8]
   83232:	461a      	mov	r2, r3
   83234:	4b15      	ldr	r3, [pc, #84]	; (8328c <pio_set_input+0x78>)
   83236:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83238:	687b      	ldr	r3, [r7, #4]
   8323a:	f003 030a 	and.w	r3, r3, #10
   8323e:	2b00      	cmp	r3, #0
   83240:	d003      	beq.n	8324a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   83242:	68fb      	ldr	r3, [r7, #12]
   83244:	68ba      	ldr	r2, [r7, #8]
   83246:	621a      	str	r2, [r3, #32]
   83248:	e002      	b.n	83250 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8324a:	68fb      	ldr	r3, [r7, #12]
   8324c:	68ba      	ldr	r2, [r7, #8]
   8324e:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   83250:	687b      	ldr	r3, [r7, #4]
   83252:	f003 0302 	and.w	r3, r3, #2
   83256:	2b00      	cmp	r3, #0
   83258:	d004      	beq.n	83264 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   8325a:	68fb      	ldr	r3, [r7, #12]
   8325c:	68ba      	ldr	r2, [r7, #8]
   8325e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   83262:	e008      	b.n	83276 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   83264:	687b      	ldr	r3, [r7, #4]
   83266:	f003 0308 	and.w	r3, r3, #8
   8326a:	2b00      	cmp	r3, #0
   8326c:	d003      	beq.n	83276 <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   8326e:	68fb      	ldr	r3, [r7, #12]
   83270:	68ba      	ldr	r2, [r7, #8]
   83272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   83276:	68fb      	ldr	r3, [r7, #12]
   83278:	68ba      	ldr	r2, [r7, #8]
   8327a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   8327c:	68fb      	ldr	r3, [r7, #12]
   8327e:	68ba      	ldr	r2, [r7, #8]
   83280:	601a      	str	r2, [r3, #0]
}
   83282:	3710      	adds	r7, #16
   83284:	46bd      	mov	sp, r7
   83286:	bd80      	pop	{r7, pc}
   83288:	000832f5 	.word	0x000832f5
   8328c:	00083169 	.word	0x00083169

00083290 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   83290:	b580      	push	{r7, lr}
   83292:	b084      	sub	sp, #16
   83294:	af00      	add	r7, sp, #0
   83296:	60f8      	str	r0, [r7, #12]
   83298:	60b9      	str	r1, [r7, #8]
   8329a:	607a      	str	r2, [r7, #4]
   8329c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   8329e:	68f8      	ldr	r0, [r7, #12]
   832a0:	68b9      	ldr	r1, [r7, #8]
   832a2:	4b12      	ldr	r3, [pc, #72]	; (832ec <pio_set_output+0x5c>)
   832a4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   832a6:	68f8      	ldr	r0, [r7, #12]
   832a8:	68b9      	ldr	r1, [r7, #8]
   832aa:	69ba      	ldr	r2, [r7, #24]
   832ac:	4b10      	ldr	r3, [pc, #64]	; (832f0 <pio_set_output+0x60>)
   832ae:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   832b0:	683b      	ldr	r3, [r7, #0]
   832b2:	2b00      	cmp	r3, #0
   832b4:	d003      	beq.n	832be <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   832b6:	68fb      	ldr	r3, [r7, #12]
   832b8:	68ba      	ldr	r2, [r7, #8]
   832ba:	651a      	str	r2, [r3, #80]	; 0x50
   832bc:	e002      	b.n	832c4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   832be:	68fb      	ldr	r3, [r7, #12]
   832c0:	68ba      	ldr	r2, [r7, #8]
   832c2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   832c4:	687b      	ldr	r3, [r7, #4]
   832c6:	2b00      	cmp	r3, #0
   832c8:	d003      	beq.n	832d2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   832ca:	68fb      	ldr	r3, [r7, #12]
   832cc:	68ba      	ldr	r2, [r7, #8]
   832ce:	631a      	str	r2, [r3, #48]	; 0x30
   832d0:	e002      	b.n	832d8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   832d2:	68fb      	ldr	r3, [r7, #12]
   832d4:	68ba      	ldr	r2, [r7, #8]
   832d6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   832d8:	68fb      	ldr	r3, [r7, #12]
   832da:	68ba      	ldr	r2, [r7, #8]
   832dc:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   832de:	68fb      	ldr	r3, [r7, #12]
   832e0:	68ba      	ldr	r2, [r7, #8]
   832e2:	601a      	str	r2, [r3, #0]
}
   832e4:	3710      	adds	r7, #16
   832e6:	46bd      	mov	sp, r7
   832e8:	bd80      	pop	{r7, pc}
   832ea:	bf00      	nop
   832ec:	000832f5 	.word	0x000832f5
   832f0:	00083169 	.word	0x00083169

000832f4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   832f4:	b480      	push	{r7}
   832f6:	b083      	sub	sp, #12
   832f8:	af00      	add	r7, sp, #0
   832fa:	6078      	str	r0, [r7, #4]
   832fc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   832fe:	687b      	ldr	r3, [r7, #4]
   83300:	683a      	ldr	r2, [r7, #0]
   83302:	645a      	str	r2, [r3, #68]	; 0x44
}
   83304:	370c      	adds	r7, #12
   83306:	46bd      	mov	sp, r7
   83308:	f85d 7b04 	ldr.w	r7, [sp], #4
   8330c:	4770      	bx	lr
   8330e:	bf00      	nop

00083310 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   83310:	b480      	push	{r7}
   83312:	b083      	sub	sp, #12
   83314:	af00      	add	r7, sp, #0
   83316:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   83318:	687b      	ldr	r3, [r7, #4]
   8331a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   8331c:	4618      	mov	r0, r3
   8331e:	370c      	adds	r7, #12
   83320:	46bd      	mov	sp, r7
   83322:	f85d 7b04 	ldr.w	r7, [sp], #4
   83326:	4770      	bx	lr

00083328 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   83328:	b480      	push	{r7}
   8332a:	b083      	sub	sp, #12
   8332c:	af00      	add	r7, sp, #0
   8332e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   83330:	687b      	ldr	r3, [r7, #4]
   83332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   83334:	4618      	mov	r0, r3
   83336:	370c      	adds	r7, #12
   83338:	46bd      	mov	sp, r7
   8333a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8333e:	4770      	bx	lr

00083340 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   83340:	b590      	push	{r4, r7, lr}
   83342:	b087      	sub	sp, #28
   83344:	af02      	add	r7, sp, #8
   83346:	6078      	str	r0, [r7, #4]
   83348:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   8334a:	6878      	ldr	r0, [r7, #4]
   8334c:	4b46      	ldr	r3, [pc, #280]	; (83468 <pio_configure_pin+0x128>)
   8334e:	4798      	blx	r3
   83350:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   83352:	683b      	ldr	r3, [r7, #0]
   83354:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   83358:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8335c:	d048      	beq.n	833f0 <pio_configure_pin+0xb0>
   8335e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83362:	d806      	bhi.n	83372 <pio_configure_pin+0x32>
   83364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83368:	d00a      	beq.n	83380 <pio_configure_pin+0x40>
   8336a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8336e:	d023      	beq.n	833b8 <pio_configure_pin+0x78>
   83370:	e072      	b.n	83458 <pio_configure_pin+0x118>
   83372:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83376:	d047      	beq.n	83408 <pio_configure_pin+0xc8>
   83378:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8337c:	d044      	beq.n	83408 <pio_configure_pin+0xc8>
   8337e:	e06b      	b.n	83458 <pio_configure_pin+0x118>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   83380:	687b      	ldr	r3, [r7, #4]
   83382:	f003 031f 	and.w	r3, r3, #31
   83386:	2201      	movs	r2, #1
   83388:	fa02 f303 	lsl.w	r3, r2, r3
   8338c:	68f8      	ldr	r0, [r7, #12]
   8338e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83392:	461a      	mov	r2, r3
   83394:	4b35      	ldr	r3, [pc, #212]	; (8346c <pio_configure_pin+0x12c>)
   83396:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   83398:	687b      	ldr	r3, [r7, #4]
   8339a:	f003 031f 	and.w	r3, r3, #31
   8339e:	2201      	movs	r2, #1
   833a0:	fa02 f303 	lsl.w	r3, r2, r3
   833a4:	461a      	mov	r2, r3
   833a6:	683b      	ldr	r3, [r7, #0]
   833a8:	f003 0301 	and.w	r3, r3, #1
   833ac:	68f8      	ldr	r0, [r7, #12]
   833ae:	4611      	mov	r1, r2
   833b0:	461a      	mov	r2, r3
   833b2:	4b2f      	ldr	r3, [pc, #188]	; (83470 <pio_configure_pin+0x130>)
   833b4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   833b6:	e051      	b.n	8345c <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   833b8:	687b      	ldr	r3, [r7, #4]
   833ba:	f003 031f 	and.w	r3, r3, #31
   833be:	2201      	movs	r2, #1
   833c0:	fa02 f303 	lsl.w	r3, r2, r3
   833c4:	68f8      	ldr	r0, [r7, #12]
   833c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   833ca:	461a      	mov	r2, r3
   833cc:	4b27      	ldr	r3, [pc, #156]	; (8346c <pio_configure_pin+0x12c>)
   833ce:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   833d0:	687b      	ldr	r3, [r7, #4]
   833d2:	f003 031f 	and.w	r3, r3, #31
   833d6:	2201      	movs	r2, #1
   833d8:	fa02 f303 	lsl.w	r3, r2, r3
   833dc:	461a      	mov	r2, r3
   833de:	683b      	ldr	r3, [r7, #0]
   833e0:	f003 0301 	and.w	r3, r3, #1
   833e4:	68f8      	ldr	r0, [r7, #12]
   833e6:	4611      	mov	r1, r2
   833e8:	461a      	mov	r2, r3
   833ea:	4b21      	ldr	r3, [pc, #132]	; (83470 <pio_configure_pin+0x130>)
   833ec:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   833ee:	e035      	b.n	8345c <pio_configure_pin+0x11c>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   833f0:	687b      	ldr	r3, [r7, #4]
   833f2:	f003 031f 	and.w	r3, r3, #31
   833f6:	2201      	movs	r2, #1
   833f8:	fa02 f303 	lsl.w	r3, r2, r3
   833fc:	68f8      	ldr	r0, [r7, #12]
   833fe:	4619      	mov	r1, r3
   83400:	683a      	ldr	r2, [r7, #0]
   83402:	4b1c      	ldr	r3, [pc, #112]	; (83474 <pio_configure_pin+0x134>)
   83404:	4798      	blx	r3
		break;
   83406:	e029      	b.n	8345c <pio_configure_pin+0x11c>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83408:	687b      	ldr	r3, [r7, #4]
   8340a:	f003 031f 	and.w	r3, r3, #31
   8340e:	2201      	movs	r2, #1
   83410:	fa02 f303 	lsl.w	r3, r2, r3
   83414:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83416:	683b      	ldr	r3, [r7, #0]
   83418:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8341c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83420:	bf0c      	ite	eq
   83422:	2301      	moveq	r3, #1
   83424:	2300      	movne	r3, #0
   83426:	b2db      	uxtb	r3, r3
   83428:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8342a:	683b      	ldr	r3, [r7, #0]
   8342c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83430:	2b00      	cmp	r3, #0
   83432:	bf14      	ite	ne
   83434:	2301      	movne	r3, #1
   83436:	2300      	moveq	r3, #0
   83438:	b2db      	uxtb	r3, r3
   8343a:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   8343c:	683b      	ldr	r3, [r7, #0]
   8343e:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83442:	2b00      	cmp	r3, #0
   83444:	bf14      	ite	ne
   83446:	2301      	movne	r3, #1
   83448:	2300      	moveq	r3, #0
   8344a:	b2db      	uxtb	r3, r3
   8344c:	9300      	str	r3, [sp, #0]
   8344e:	68f8      	ldr	r0, [r7, #12]
   83450:	4623      	mov	r3, r4
   83452:	4c09      	ldr	r4, [pc, #36]	; (83478 <pio_configure_pin+0x138>)
   83454:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83456:	e001      	b.n	8345c <pio_configure_pin+0x11c>

	default:
		return 0;
   83458:	2300      	movs	r3, #0
   8345a:	e000      	b.n	8345e <pio_configure_pin+0x11e>
	}

	return 1;
   8345c:	2301      	movs	r3, #1
}
   8345e:	4618      	mov	r0, r3
   83460:	3714      	adds	r7, #20
   83462:	46bd      	mov	sp, r7
   83464:	bd90      	pop	{r4, r7, pc}
   83466:	bf00      	nop
   83468:	00083561 	.word	0x00083561
   8346c:	00083195 	.word	0x00083195
   83470:	00083169 	.word	0x00083169
   83474:	00083215 	.word	0x00083215
   83478:	00083291 	.word	0x00083291

0008347c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   8347c:	b590      	push	{r4, r7, lr}
   8347e:	b087      	sub	sp, #28
   83480:	af02      	add	r7, sp, #8
   83482:	60f8      	str	r0, [r7, #12]
   83484:	60b9      	str	r1, [r7, #8]
   83486:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   83488:	687b      	ldr	r3, [r7, #4]
   8348a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   8348e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83492:	d02e      	beq.n	834f2 <pio_configure_pin_group+0x76>
   83494:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83498:	d806      	bhi.n	834a8 <pio_configure_pin_group+0x2c>
   8349a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8349e:	d00a      	beq.n	834b6 <pio_configure_pin_group+0x3a>
   834a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   834a4:	d016      	beq.n	834d4 <pio_configure_pin_group+0x58>
   834a6:	e04c      	b.n	83542 <pio_configure_pin_group+0xc6>
   834a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   834ac:	d027      	beq.n	834fe <pio_configure_pin_group+0x82>
   834ae:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   834b2:	d024      	beq.n	834fe <pio_configure_pin_group+0x82>
   834b4:	e045      	b.n	83542 <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   834b6:	68f8      	ldr	r0, [r7, #12]
   834b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   834bc:	68ba      	ldr	r2, [r7, #8]
   834be:	4b24      	ldr	r3, [pc, #144]	; (83550 <pio_configure_pin_group+0xd4>)
   834c0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   834c2:	687b      	ldr	r3, [r7, #4]
   834c4:	f003 0301 	and.w	r3, r3, #1
   834c8:	68f8      	ldr	r0, [r7, #12]
   834ca:	68b9      	ldr	r1, [r7, #8]
   834cc:	461a      	mov	r2, r3
   834ce:	4b21      	ldr	r3, [pc, #132]	; (83554 <pio_configure_pin_group+0xd8>)
   834d0:	4798      	blx	r3
		break;
   834d2:	e038      	b.n	83546 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   834d4:	68f8      	ldr	r0, [r7, #12]
   834d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   834da:	68ba      	ldr	r2, [r7, #8]
   834dc:	4b1c      	ldr	r3, [pc, #112]	; (83550 <pio_configure_pin_group+0xd4>)
   834de:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   834e0:	687b      	ldr	r3, [r7, #4]
   834e2:	f003 0301 	and.w	r3, r3, #1
   834e6:	68f8      	ldr	r0, [r7, #12]
   834e8:	68b9      	ldr	r1, [r7, #8]
   834ea:	461a      	mov	r2, r3
   834ec:	4b19      	ldr	r3, [pc, #100]	; (83554 <pio_configure_pin_group+0xd8>)
   834ee:	4798      	blx	r3
		break;
   834f0:	e029      	b.n	83546 <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   834f2:	68f8      	ldr	r0, [r7, #12]
   834f4:	68b9      	ldr	r1, [r7, #8]
   834f6:	687a      	ldr	r2, [r7, #4]
   834f8:	4b17      	ldr	r3, [pc, #92]	; (83558 <pio_configure_pin_group+0xdc>)
   834fa:	4798      	blx	r3
		break;
   834fc:	e023      	b.n	83546 <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   834fe:	687b      	ldr	r3, [r7, #4]
   83500:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83504:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83508:	bf0c      	ite	eq
   8350a:	2301      	moveq	r3, #1
   8350c:	2300      	movne	r3, #0
   8350e:	b2db      	uxtb	r3, r3
   83510:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   83512:	687b      	ldr	r3, [r7, #4]
   83514:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83518:	2b00      	cmp	r3, #0
   8351a:	bf14      	ite	ne
   8351c:	2301      	movne	r3, #1
   8351e:	2300      	moveq	r3, #0
   83520:	b2db      	uxtb	r3, r3
   83522:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   83524:	687b      	ldr	r3, [r7, #4]
   83526:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8352a:	2b00      	cmp	r3, #0
   8352c:	bf14      	ite	ne
   8352e:	2301      	movne	r3, #1
   83530:	2300      	moveq	r3, #0
   83532:	b2db      	uxtb	r3, r3
   83534:	9300      	str	r3, [sp, #0]
   83536:	68f8      	ldr	r0, [r7, #12]
   83538:	68b9      	ldr	r1, [r7, #8]
   8353a:	4623      	mov	r3, r4
   8353c:	4c07      	ldr	r4, [pc, #28]	; (8355c <pio_configure_pin_group+0xe0>)
   8353e:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83540:	e001      	b.n	83546 <pio_configure_pin_group+0xca>

	default:
		return 0;
   83542:	2300      	movs	r3, #0
   83544:	e000      	b.n	83548 <pio_configure_pin_group+0xcc>
	}

	return 1;
   83546:	2301      	movs	r3, #1
}
   83548:	4618      	mov	r0, r3
   8354a:	3714      	adds	r7, #20
   8354c:	46bd      	mov	sp, r7
   8354e:	bd90      	pop	{r4, r7, pc}
   83550:	00083195 	.word	0x00083195
   83554:	00083169 	.word	0x00083169
   83558:	00083215 	.word	0x00083215
   8355c:	00083291 	.word	0x00083291

00083560 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   83560:	b480      	push	{r7}
   83562:	b085      	sub	sp, #20
   83564:	af00      	add	r7, sp, #0
   83566:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83568:	687b      	ldr	r3, [r7, #4]
   8356a:	095b      	lsrs	r3, r3, #5
   8356c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83570:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83574:	025b      	lsls	r3, r3, #9
   83576:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   83578:	68fb      	ldr	r3, [r7, #12]
}
   8357a:	4618      	mov	r0, r3
   8357c:	3714      	adds	r7, #20
   8357e:	46bd      	mov	sp, r7
   83580:	f85d 7b04 	ldr.w	r7, [sp], #4
   83584:	4770      	bx	lr
   83586:	bf00      	nop

00083588 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83588:	b580      	push	{r7, lr}
   8358a:	b084      	sub	sp, #16
   8358c:	af00      	add	r7, sp, #0
   8358e:	6078      	str	r0, [r7, #4]
   83590:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   83592:	6878      	ldr	r0, [r7, #4]
   83594:	4b24      	ldr	r3, [pc, #144]	; (83628 <pio_handler_process+0xa0>)
   83596:	4798      	blx	r3
   83598:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   8359a:	6878      	ldr	r0, [r7, #4]
   8359c:	4b23      	ldr	r3, [pc, #140]	; (8362c <pio_handler_process+0xa4>)
   8359e:	4798      	blx	r3
   835a0:	4602      	mov	r2, r0
   835a2:	68fb      	ldr	r3, [r7, #12]
   835a4:	4013      	ands	r3, r2
   835a6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   835a8:	68fb      	ldr	r3, [r7, #12]
   835aa:	2b00      	cmp	r3, #0
   835ac:	d038      	beq.n	83620 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
   835ae:	2300      	movs	r3, #0
   835b0:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   835b2:	e032      	b.n	8361a <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   835b4:	4a1e      	ldr	r2, [pc, #120]	; (83630 <pio_handler_process+0xa8>)
   835b6:	68bb      	ldr	r3, [r7, #8]
   835b8:	011b      	lsls	r3, r3, #4
   835ba:	4413      	add	r3, r2
   835bc:	681a      	ldr	r2, [r3, #0]
   835be:	683b      	ldr	r3, [r7, #0]
   835c0:	429a      	cmp	r2, r3
   835c2:	d123      	bne.n	8360c <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   835c4:	4a1a      	ldr	r2, [pc, #104]	; (83630 <pio_handler_process+0xa8>)
   835c6:	68bb      	ldr	r3, [r7, #8]
   835c8:	011b      	lsls	r3, r3, #4
   835ca:	4413      	add	r3, r2
   835cc:	685a      	ldr	r2, [r3, #4]
   835ce:	68fb      	ldr	r3, [r7, #12]
   835d0:	4013      	ands	r3, r2
   835d2:	2b00      	cmp	r3, #0
   835d4:	d01a      	beq.n	8360c <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   835d6:	4a16      	ldr	r2, [pc, #88]	; (83630 <pio_handler_process+0xa8>)
   835d8:	68bb      	ldr	r3, [r7, #8]
   835da:	011b      	lsls	r3, r3, #4
   835dc:	4413      	add	r3, r2
   835de:	3308      	adds	r3, #8
   835e0:	685b      	ldr	r3, [r3, #4]
   835e2:	4913      	ldr	r1, [pc, #76]	; (83630 <pio_handler_process+0xa8>)
   835e4:	68ba      	ldr	r2, [r7, #8]
   835e6:	0112      	lsls	r2, r2, #4
   835e8:	440a      	add	r2, r1
   835ea:	6810      	ldr	r0, [r2, #0]
   835ec:	4910      	ldr	r1, [pc, #64]	; (83630 <pio_handler_process+0xa8>)
   835ee:	68ba      	ldr	r2, [r7, #8]
   835f0:	0112      	lsls	r2, r2, #4
   835f2:	440a      	add	r2, r1
   835f4:	6852      	ldr	r2, [r2, #4]
   835f6:	4611      	mov	r1, r2
   835f8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   835fa:	4a0d      	ldr	r2, [pc, #52]	; (83630 <pio_handler_process+0xa8>)
   835fc:	68bb      	ldr	r3, [r7, #8]
   835fe:	011b      	lsls	r3, r3, #4
   83600:	4413      	add	r3, r2
   83602:	685b      	ldr	r3, [r3, #4]
   83604:	43db      	mvns	r3, r3
   83606:	68fa      	ldr	r2, [r7, #12]
   83608:	4013      	ands	r3, r2
   8360a:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   8360c:	68bb      	ldr	r3, [r7, #8]
   8360e:	3301      	adds	r3, #1
   83610:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   83612:	68bb      	ldr	r3, [r7, #8]
   83614:	2b06      	cmp	r3, #6
   83616:	d900      	bls.n	8361a <pio_handler_process+0x92>
				break;
   83618:	e002      	b.n	83620 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8361a:	68fb      	ldr	r3, [r7, #12]
   8361c:	2b00      	cmp	r3, #0
   8361e:	d1c9      	bne.n	835b4 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   83620:	3710      	adds	r7, #16
   83622:	46bd      	mov	sp, r7
   83624:	bd80      	pop	{r7, pc}
   83626:	bf00      	nop
   83628:	00083311 	.word	0x00083311
   8362c:	00083329 	.word	0x00083329
   83630:	20070778 	.word	0x20070778

00083634 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83634:	b580      	push	{r7, lr}
   83636:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   83638:	4802      	ldr	r0, [pc, #8]	; (83644 <PIOA_Handler+0x10>)
   8363a:	210b      	movs	r1, #11
   8363c:	4b02      	ldr	r3, [pc, #8]	; (83648 <PIOA_Handler+0x14>)
   8363e:	4798      	blx	r3
}
   83640:	bd80      	pop	{r7, pc}
   83642:	bf00      	nop
   83644:	400e0e00 	.word	0x400e0e00
   83648:	00083589 	.word	0x00083589

0008364c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8364c:	b580      	push	{r7, lr}
   8364e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   83650:	4802      	ldr	r0, [pc, #8]	; (8365c <PIOB_Handler+0x10>)
   83652:	210c      	movs	r1, #12
   83654:	4b02      	ldr	r3, [pc, #8]	; (83660 <PIOB_Handler+0x14>)
   83656:	4798      	blx	r3
}
   83658:	bd80      	pop	{r7, pc}
   8365a:	bf00      	nop
   8365c:	400e1000 	.word	0x400e1000
   83660:	00083589 	.word	0x00083589

00083664 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   83664:	b580      	push	{r7, lr}
   83666:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   83668:	4802      	ldr	r0, [pc, #8]	; (83674 <PIOC_Handler+0x10>)
   8366a:	210d      	movs	r1, #13
   8366c:	4b02      	ldr	r3, [pc, #8]	; (83678 <PIOC_Handler+0x14>)
   8366e:	4798      	blx	r3
}
   83670:	bd80      	pop	{r7, pc}
   83672:	bf00      	nop
   83674:	400e1200 	.word	0x400e1200
   83678:	00083589 	.word	0x00083589

0008367c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8367c:	b580      	push	{r7, lr}
   8367e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   83680:	4802      	ldr	r0, [pc, #8]	; (8368c <PIOD_Handler+0x10>)
   83682:	210e      	movs	r1, #14
   83684:	4b02      	ldr	r3, [pc, #8]	; (83690 <PIOD_Handler+0x14>)
   83686:	4798      	blx	r3
}
   83688:	bd80      	pop	{r7, pc}
   8368a:	bf00      	nop
   8368c:	400e1400 	.word	0x400e1400
   83690:	00083589 	.word	0x00083589

00083694 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83694:	b480      	push	{r7}
   83696:	b085      	sub	sp, #20
   83698:	af00      	add	r7, sp, #0
   8369a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8369c:	491d      	ldr	r1, [pc, #116]	; (83714 <pmc_switch_mck_to_pllack+0x80>)
   8369e:	4b1d      	ldr	r3, [pc, #116]	; (83714 <pmc_switch_mck_to_pllack+0x80>)
   836a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   836a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   836a6:	687b      	ldr	r3, [r7, #4]
   836a8:	4313      	orrs	r3, r2
   836aa:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   836b0:	60fb      	str	r3, [r7, #12]
   836b2:	e007      	b.n	836c4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   836b4:	68fb      	ldr	r3, [r7, #12]
   836b6:	2b00      	cmp	r3, #0
   836b8:	d101      	bne.n	836be <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   836ba:	2301      	movs	r3, #1
   836bc:	e023      	b.n	83706 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   836be:	68fb      	ldr	r3, [r7, #12]
   836c0:	3b01      	subs	r3, #1
   836c2:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836c4:	4b13      	ldr	r3, [pc, #76]	; (83714 <pmc_switch_mck_to_pllack+0x80>)
   836c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   836c8:	f003 0308 	and.w	r3, r3, #8
   836cc:	2b00      	cmp	r3, #0
   836ce:	d0f1      	beq.n	836b4 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   836d0:	4a10      	ldr	r2, [pc, #64]	; (83714 <pmc_switch_mck_to_pllack+0x80>)
   836d2:	4b10      	ldr	r3, [pc, #64]	; (83714 <pmc_switch_mck_to_pllack+0x80>)
   836d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   836d6:	f023 0303 	bic.w	r3, r3, #3
   836da:	f043 0302 	orr.w	r3, r3, #2
   836de:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   836e4:	60fb      	str	r3, [r7, #12]
   836e6:	e007      	b.n	836f8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   836e8:	68fb      	ldr	r3, [r7, #12]
   836ea:	2b00      	cmp	r3, #0
   836ec:	d101      	bne.n	836f2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   836ee:	2301      	movs	r3, #1
   836f0:	e009      	b.n	83706 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   836f2:	68fb      	ldr	r3, [r7, #12]
   836f4:	3b01      	subs	r3, #1
   836f6:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836f8:	4b06      	ldr	r3, [pc, #24]	; (83714 <pmc_switch_mck_to_pllack+0x80>)
   836fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   836fc:	f003 0308 	and.w	r3, r3, #8
   83700:	2b00      	cmp	r3, #0
   83702:	d0f1      	beq.n	836e8 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   83704:	2300      	movs	r3, #0
}
   83706:	4618      	mov	r0, r3
   83708:	3714      	adds	r7, #20
   8370a:	46bd      	mov	sp, r7
   8370c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83710:	4770      	bx	lr
   83712:	bf00      	nop
   83714:	400e0600 	.word	0x400e0600

00083718 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   83718:	b480      	push	{r7}
   8371a:	b083      	sub	sp, #12
   8371c:	af00      	add	r7, sp, #0
   8371e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83720:	687b      	ldr	r3, [r7, #4]
   83722:	2b01      	cmp	r3, #1
   83724:	d107      	bne.n	83736 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   83726:	4a08      	ldr	r2, [pc, #32]	; (83748 <pmc_switch_sclk_to_32kxtal+0x30>)
   83728:	4b07      	ldr	r3, [pc, #28]	; (83748 <pmc_switch_sclk_to_32kxtal+0x30>)
   8372a:	689b      	ldr	r3, [r3, #8]
   8372c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83734:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   83736:	4b04      	ldr	r3, [pc, #16]	; (83748 <pmc_switch_sclk_to_32kxtal+0x30>)
   83738:	4a04      	ldr	r2, [pc, #16]	; (8374c <pmc_switch_sclk_to_32kxtal+0x34>)
   8373a:	601a      	str	r2, [r3, #0]
}
   8373c:	370c      	adds	r7, #12
   8373e:	46bd      	mov	sp, r7
   83740:	f85d 7b04 	ldr.w	r7, [sp], #4
   83744:	4770      	bx	lr
   83746:	bf00      	nop
   83748:	400e1a10 	.word	0x400e1a10
   8374c:	a5000008 	.word	0xa5000008

00083750 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83750:	b480      	push	{r7}
   83752:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83754:	4b09      	ldr	r3, [pc, #36]	; (8377c <pmc_osc_is_ready_32kxtal+0x2c>)
   83756:	695b      	ldr	r3, [r3, #20]
   83758:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   8375c:	2b00      	cmp	r3, #0
   8375e:	d007      	beq.n	83770 <pmc_osc_is_ready_32kxtal+0x20>
   83760:	4b07      	ldr	r3, [pc, #28]	; (83780 <pmc_osc_is_ready_32kxtal+0x30>)
   83762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83764:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83768:	2b00      	cmp	r3, #0
   8376a:	d001      	beq.n	83770 <pmc_osc_is_ready_32kxtal+0x20>
   8376c:	2301      	movs	r3, #1
   8376e:	e000      	b.n	83772 <pmc_osc_is_ready_32kxtal+0x22>
   83770:	2300      	movs	r3, #0
}
   83772:	4618      	mov	r0, r3
   83774:	46bd      	mov	sp, r7
   83776:	f85d 7b04 	ldr.w	r7, [sp], #4
   8377a:	4770      	bx	lr
   8377c:	400e1a10 	.word	0x400e1a10
   83780:	400e0600 	.word	0x400e0600

00083784 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   83784:	b480      	push	{r7}
   83786:	b083      	sub	sp, #12
   83788:	af00      	add	r7, sp, #0
   8378a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   8378c:	4a18      	ldr	r2, [pc, #96]	; (837f0 <pmc_switch_mainck_to_fastrc+0x6c>)
   8378e:	4b18      	ldr	r3, [pc, #96]	; (837f0 <pmc_switch_mainck_to_fastrc+0x6c>)
   83790:	6a1b      	ldr	r3, [r3, #32]
   83792:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83796:	f043 0308 	orr.w	r3, r3, #8
   8379a:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8379c:	bf00      	nop
   8379e:	4b14      	ldr	r3, [pc, #80]	; (837f0 <pmc_switch_mainck_to_fastrc+0x6c>)
   837a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   837a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   837a6:	2b00      	cmp	r3, #0
   837a8:	d0f9      	beq.n	8379e <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   837aa:	4911      	ldr	r1, [pc, #68]	; (837f0 <pmc_switch_mainck_to_fastrc+0x6c>)
   837ac:	4b10      	ldr	r3, [pc, #64]	; (837f0 <pmc_switch_mainck_to_fastrc+0x6c>)
   837ae:	6a1b      	ldr	r3, [r3, #32]
   837b0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   837b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   837b8:	687a      	ldr	r2, [r7, #4]
   837ba:	4313      	orrs	r3, r2
   837bc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   837c0:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   837c2:	bf00      	nop
   837c4:	4b0a      	ldr	r3, [pc, #40]	; (837f0 <pmc_switch_mainck_to_fastrc+0x6c>)
   837c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   837c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   837cc:	2b00      	cmp	r3, #0
   837ce:	d0f9      	beq.n	837c4 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   837d0:	4a07      	ldr	r2, [pc, #28]	; (837f0 <pmc_switch_mainck_to_fastrc+0x6c>)
   837d2:	4b07      	ldr	r3, [pc, #28]	; (837f0 <pmc_switch_mainck_to_fastrc+0x6c>)
   837d4:	6a1b      	ldr	r3, [r3, #32]
   837d6:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   837da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   837de:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   837e2:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   837e4:	370c      	adds	r7, #12
   837e6:	46bd      	mov	sp, r7
   837e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   837ec:	4770      	bx	lr
   837ee:	bf00      	nop
   837f0:	400e0600 	.word	0x400e0600

000837f4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   837f4:	b480      	push	{r7}
   837f6:	b083      	sub	sp, #12
   837f8:	af00      	add	r7, sp, #0
   837fa:	6078      	str	r0, [r7, #4]
   837fc:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   837fe:	687b      	ldr	r3, [r7, #4]
   83800:	2b00      	cmp	r3, #0
   83802:	d008      	beq.n	83816 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83804:	4916      	ldr	r1, [pc, #88]	; (83860 <pmc_switch_mainck_to_xtal+0x6c>)
   83806:	4b16      	ldr	r3, [pc, #88]	; (83860 <pmc_switch_mainck_to_xtal+0x6c>)
   83808:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8380a:	4a16      	ldr	r2, [pc, #88]	; (83864 <pmc_switch_mainck_to_xtal+0x70>)
   8380c:	401a      	ands	r2, r3
   8380e:	4b16      	ldr	r3, [pc, #88]	; (83868 <pmc_switch_mainck_to_xtal+0x74>)
   83810:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83812:	620b      	str	r3, [r1, #32]
   83814:	e01e      	b.n	83854 <pmc_switch_mainck_to_xtal+0x60>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83816:	4912      	ldr	r1, [pc, #72]	; (83860 <pmc_switch_mainck_to_xtal+0x6c>)
   83818:	4b11      	ldr	r3, [pc, #68]	; (83860 <pmc_switch_mainck_to_xtal+0x6c>)
   8381a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8381c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83820:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83824:	683a      	ldr	r2, [r7, #0]
   83826:	0212      	lsls	r2, r2, #8
   83828:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8382a:	4313      	orrs	r3, r2
   8382c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83830:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83834:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83836:	bf00      	nop
   83838:	4b09      	ldr	r3, [pc, #36]	; (83860 <pmc_switch_mainck_to_xtal+0x6c>)
   8383a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8383c:	f003 0301 	and.w	r3, r3, #1
   83840:	2b00      	cmp	r3, #0
   83842:	d0f9      	beq.n	83838 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83844:	4a06      	ldr	r2, [pc, #24]	; (83860 <pmc_switch_mainck_to_xtal+0x6c>)
   83846:	4b06      	ldr	r3, [pc, #24]	; (83860 <pmc_switch_mainck_to_xtal+0x6c>)
   83848:	6a1b      	ldr	r3, [r3, #32]
   8384a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8384e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83852:	6213      	str	r3, [r2, #32]
	}
}
   83854:	370c      	adds	r7, #12
   83856:	46bd      	mov	sp, r7
   83858:	f85d 7b04 	ldr.w	r7, [sp], #4
   8385c:	4770      	bx	lr
   8385e:	bf00      	nop
   83860:	400e0600 	.word	0x400e0600
   83864:	fec8fffc 	.word	0xfec8fffc
   83868:	01370002 	.word	0x01370002

0008386c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   8386c:	b480      	push	{r7}
   8386e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83870:	4b04      	ldr	r3, [pc, #16]	; (83884 <pmc_osc_is_ready_mainck+0x18>)
   83872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83878:	4618      	mov	r0, r3
   8387a:	46bd      	mov	sp, r7
   8387c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83880:	4770      	bx	lr
   83882:	bf00      	nop
   83884:	400e0600 	.word	0x400e0600

00083888 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83888:	b480      	push	{r7}
   8388a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8388c:	4b03      	ldr	r3, [pc, #12]	; (8389c <pmc_disable_pllack+0x14>)
   8388e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83892:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83894:	46bd      	mov	sp, r7
   83896:	f85d 7b04 	ldr.w	r7, [sp], #4
   8389a:	4770      	bx	lr
   8389c:	400e0600 	.word	0x400e0600

000838a0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   838a0:	b480      	push	{r7}
   838a2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   838a4:	4b04      	ldr	r3, [pc, #16]	; (838b8 <pmc_is_locked_pllack+0x18>)
   838a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   838a8:	f003 0302 	and.w	r3, r3, #2
}
   838ac:	4618      	mov	r0, r3
   838ae:	46bd      	mov	sp, r7
   838b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   838b4:	4770      	bx	lr
   838b6:	bf00      	nop
   838b8:	400e0600 	.word	0x400e0600

000838bc <pmc_enable_upll_clock>:
#if (SAM3XA || SAM3U || SAMV71 || SAMV70 || SAME70 || SAMS70)
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
   838bc:	b480      	push	{r7}
   838be:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   838c0:	4b07      	ldr	r3, [pc, #28]	; (838e0 <pmc_enable_upll_clock+0x24>)
   838c2:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   838c6:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   838c8:	bf00      	nop
   838ca:	4b05      	ldr	r3, [pc, #20]	; (838e0 <pmc_enable_upll_clock+0x24>)
   838cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   838ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
   838d2:	2b00      	cmp	r3, #0
   838d4:	d0f9      	beq.n	838ca <pmc_enable_upll_clock+0xe>
}
   838d6:	46bd      	mov	sp, r7
   838d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   838dc:	4770      	bx	lr
   838de:	bf00      	nop
   838e0:	400e0600 	.word	0x400e0600

000838e4 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   838e4:	b480      	push	{r7}
   838e6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   838e8:	4b04      	ldr	r3, [pc, #16]	; (838fc <pmc_is_locked_upll+0x18>)
   838ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   838ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   838f0:	4618      	mov	r0, r3
   838f2:	46bd      	mov	sp, r7
   838f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   838f8:	4770      	bx	lr
   838fa:	bf00      	nop
   838fc:	400e0600 	.word	0x400e0600

00083900 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83900:	b480      	push	{r7}
   83902:	b083      	sub	sp, #12
   83904:	af00      	add	r7, sp, #0
   83906:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83908:	687b      	ldr	r3, [r7, #4]
   8390a:	2b2c      	cmp	r3, #44	; 0x2c
   8390c:	d901      	bls.n	83912 <pmc_enable_periph_clk+0x12>
		return 1;
   8390e:	2301      	movs	r3, #1
   83910:	e02f      	b.n	83972 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   83912:	687b      	ldr	r3, [r7, #4]
   83914:	2b1f      	cmp	r3, #31
   83916:	d813      	bhi.n	83940 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83918:	4b19      	ldr	r3, [pc, #100]	; (83980 <pmc_enable_periph_clk+0x80>)
   8391a:	699a      	ldr	r2, [r3, #24]
   8391c:	687b      	ldr	r3, [r7, #4]
   8391e:	2101      	movs	r1, #1
   83920:	fa01 f303 	lsl.w	r3, r1, r3
   83924:	401a      	ands	r2, r3
   83926:	687b      	ldr	r3, [r7, #4]
   83928:	2101      	movs	r1, #1
   8392a:	fa01 f303 	lsl.w	r3, r1, r3
   8392e:	429a      	cmp	r2, r3
   83930:	d01e      	beq.n	83970 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   83932:	4a13      	ldr	r2, [pc, #76]	; (83980 <pmc_enable_periph_clk+0x80>)
   83934:	687b      	ldr	r3, [r7, #4]
   83936:	2101      	movs	r1, #1
   83938:	fa01 f303 	lsl.w	r3, r1, r3
   8393c:	6113      	str	r3, [r2, #16]
   8393e:	e017      	b.n	83970 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   83940:	687b      	ldr	r3, [r7, #4]
   83942:	3b20      	subs	r3, #32
   83944:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83946:	4b0e      	ldr	r3, [pc, #56]	; (83980 <pmc_enable_periph_clk+0x80>)
   83948:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8394c:	687b      	ldr	r3, [r7, #4]
   8394e:	2101      	movs	r1, #1
   83950:	fa01 f303 	lsl.w	r3, r1, r3
   83954:	401a      	ands	r2, r3
   83956:	687b      	ldr	r3, [r7, #4]
   83958:	2101      	movs	r1, #1
   8395a:	fa01 f303 	lsl.w	r3, r1, r3
   8395e:	429a      	cmp	r2, r3
   83960:	d006      	beq.n	83970 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   83962:	4a07      	ldr	r2, [pc, #28]	; (83980 <pmc_enable_periph_clk+0x80>)
   83964:	687b      	ldr	r3, [r7, #4]
   83966:	2101      	movs	r1, #1
   83968:	fa01 f303 	lsl.w	r3, r1, r3
   8396c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   83970:	2300      	movs	r3, #0
}
   83972:	4618      	mov	r0, r3
   83974:	370c      	adds	r7, #12
   83976:	46bd      	mov	sp, r7
   83978:	f85d 7b04 	ldr.w	r7, [sp], #4
   8397c:	4770      	bx	lr
   8397e:	bf00      	nop
   83980:	400e0600 	.word	0x400e0600

00083984 <pmc_switch_udpck_to_upllck>:
 * \brief Switch UDP (USB) clock source selection to UPLL clock.
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
   83984:	b480      	push	{r7}
   83986:	b083      	sub	sp, #12
   83988:	af00      	add	r7, sp, #0
   8398a:	6078      	str	r0, [r7, #4]
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   8398c:	4a06      	ldr	r2, [pc, #24]	; (839a8 <pmc_switch_udpck_to_upllck+0x24>)
   8398e:	687b      	ldr	r3, [r7, #4]
   83990:	021b      	lsls	r3, r3, #8
   83992:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   83996:	f043 0301 	orr.w	r3, r3, #1
   8399a:	6393      	str	r3, [r2, #56]	; 0x38
}
   8399c:	370c      	adds	r7, #12
   8399e:	46bd      	mov	sp, r7
   839a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   839a4:	4770      	bx	lr
   839a6:	bf00      	nop
   839a8:	400e0600 	.word	0x400e0600

000839ac <pmc_enable_udpck>:
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
/**
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
   839ac:	b480      	push	{r7}
   839ae:	af00      	add	r7, sp, #0
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
#else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   839b0:	4b03      	ldr	r3, [pc, #12]	; (839c0 <pmc_enable_udpck+0x14>)
   839b2:	2220      	movs	r2, #32
   839b4:	601a      	str	r2, [r3, #0]
# endif
}
   839b6:	46bd      	mov	sp, r7
   839b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   839bc:	4770      	bx	lr
   839be:	bf00      	nop
   839c0:	400e0600 	.word	0x400e0600

000839c4 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   839c4:	b480      	push	{r7}
   839c6:	b083      	sub	sp, #12
   839c8:	af00      	add	r7, sp, #0
   839ca:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   839cc:	687b      	ldr	r3, [r7, #4]
   839ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
   839d2:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   839d4:	4905      	ldr	r1, [pc, #20]	; (839ec <pmc_set_fast_startup_input+0x28>)
   839d6:	4b05      	ldr	r3, [pc, #20]	; (839ec <pmc_set_fast_startup_input+0x28>)
   839d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   839da:	687b      	ldr	r3, [r7, #4]
   839dc:	4313      	orrs	r3, r2
   839de:	670b      	str	r3, [r1, #112]	; 0x70
}
   839e0:	370c      	adds	r7, #12
   839e2:	46bd      	mov	sp, r7
   839e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   839e8:	4770      	bx	lr
   839ea:	bf00      	nop
   839ec:	400e0600 	.word	0x400e0600

000839f0 <pmc_is_wakeup_clocks_restored>:
#endif
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
   839f0:	b480      	push	{r7}
   839f2:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   839f4:	4b09      	ldr	r3, [pc, #36]	; (83a1c <pmc_is_wakeup_clocks_restored+0x2c>)
   839f6:	781b      	ldrb	r3, [r3, #0]
   839f8:	b2db      	uxtb	r3, r3
   839fa:	2b00      	cmp	r3, #0
   839fc:	bf14      	ite	ne
   839fe:	2301      	movne	r3, #1
   83a00:	2300      	moveq	r3, #0
   83a02:	b2db      	uxtb	r3, r3
   83a04:	f083 0301 	eor.w	r3, r3, #1
   83a08:	b2db      	uxtb	r3, r3
   83a0a:	f003 0301 	and.w	r3, r3, #1
   83a0e:	b2db      	uxtb	r3, r3
}
   83a10:	4618      	mov	r0, r3
   83a12:	46bd      	mov	sp, r7
   83a14:	f85d 7b04 	ldr.w	r7, [sp], #4
   83a18:	4770      	bx	lr
   83a1a:	bf00      	nop
   83a1c:	200707e8 	.word	0x200707e8

00083a20 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83a20:	b480      	push	{r7}
   83a22:	af00      	add	r7, sp, #0

	while (1) {
	}
   83a24:	e7fe      	b.n	83a24 <Dummy_Handler+0x4>
   83a26:	bf00      	nop

00083a28 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83a28:	b580      	push	{r7, lr}
   83a2a:	b082      	sub	sp, #8
   83a2c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83a2e:	4b1e      	ldr	r3, [pc, #120]	; (83aa8 <Reset_Handler+0x80>)
   83a30:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83a32:	4b1e      	ldr	r3, [pc, #120]	; (83aac <Reset_Handler+0x84>)
   83a34:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   83a36:	687a      	ldr	r2, [r7, #4]
   83a38:	683b      	ldr	r3, [r7, #0]
   83a3a:	429a      	cmp	r2, r3
   83a3c:	d00c      	beq.n	83a58 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83a3e:	e007      	b.n	83a50 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83a40:	683b      	ldr	r3, [r7, #0]
   83a42:	1d1a      	adds	r2, r3, #4
   83a44:	603a      	str	r2, [r7, #0]
   83a46:	687a      	ldr	r2, [r7, #4]
   83a48:	1d11      	adds	r1, r2, #4
   83a4a:	6079      	str	r1, [r7, #4]
   83a4c:	6812      	ldr	r2, [r2, #0]
   83a4e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   83a50:	683b      	ldr	r3, [r7, #0]
   83a52:	4a17      	ldr	r2, [pc, #92]	; (83ab0 <Reset_Handler+0x88>)
   83a54:	4293      	cmp	r3, r2
   83a56:	d3f3      	bcc.n	83a40 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83a58:	4b16      	ldr	r3, [pc, #88]	; (83ab4 <Reset_Handler+0x8c>)
   83a5a:	603b      	str	r3, [r7, #0]
   83a5c:	e004      	b.n	83a68 <Reset_Handler+0x40>
		*pDest++ = 0;
   83a5e:	683b      	ldr	r3, [r7, #0]
   83a60:	1d1a      	adds	r2, r3, #4
   83a62:	603a      	str	r2, [r7, #0]
   83a64:	2200      	movs	r2, #0
   83a66:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83a68:	683b      	ldr	r3, [r7, #0]
   83a6a:	4a13      	ldr	r2, [pc, #76]	; (83ab8 <Reset_Handler+0x90>)
   83a6c:	4293      	cmp	r3, r2
   83a6e:	d3f6      	bcc.n	83a5e <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83a70:	4b12      	ldr	r3, [pc, #72]	; (83abc <Reset_Handler+0x94>)
   83a72:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83a74:	4a12      	ldr	r2, [pc, #72]	; (83ac0 <Reset_Handler+0x98>)
   83a76:	687b      	ldr	r3, [r7, #4]
   83a78:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   83a7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83a80:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   83a82:	687b      	ldr	r3, [r7, #4]
   83a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83a88:	d309      	bcc.n	83a9e <Reset_Handler+0x76>
   83a8a:	687b      	ldr	r3, [r7, #4]
   83a8c:	4a0d      	ldr	r2, [pc, #52]	; (83ac4 <Reset_Handler+0x9c>)
   83a8e:	4293      	cmp	r3, r2
   83a90:	d805      	bhi.n	83a9e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83a92:	4a0b      	ldr	r2, [pc, #44]	; (83ac0 <Reset_Handler+0x98>)
   83a94:	4b0a      	ldr	r3, [pc, #40]	; (83ac0 <Reset_Handler+0x98>)
   83a96:	689b      	ldr	r3, [r3, #8]
   83a98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83a9c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83a9e:	4b0a      	ldr	r3, [pc, #40]	; (83ac8 <Reset_Handler+0xa0>)
   83aa0:	4798      	blx	r3

	/* Branch to main function */
	main();
   83aa2:	4b0a      	ldr	r3, [pc, #40]	; (83acc <Reset_Handler+0xa4>)
   83aa4:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   83aa6:	e7fe      	b.n	83aa6 <Reset_Handler+0x7e>
   83aa8:	000846e0 	.word	0x000846e0
   83aac:	20070000 	.word	0x20070000
   83ab0:	20070700 	.word	0x20070700
   83ab4:	20070700 	.word	0x20070700
   83ab8:	2007088c 	.word	0x2007088c
   83abc:	00080000 	.word	0x00080000
   83ac0:	e000ed00 	.word	0xe000ed00
   83ac4:	200fffff 	.word	0x200fffff
   83ac8:	000840d1 	.word	0x000840d1
   83acc:	00083ef9 	.word	0x00083ef9

00083ad0 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83ad0:	b480      	push	{r7}
   83ad2:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83ad4:	4b56      	ldr	r3, [pc, #344]	; (83c30 <SystemCoreClockUpdate+0x160>)
   83ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83ad8:	f003 0303 	and.w	r3, r3, #3
   83adc:	2b03      	cmp	r3, #3
   83ade:	f200 808a 	bhi.w	83bf6 <SystemCoreClockUpdate+0x126>
   83ae2:	a201      	add	r2, pc, #4	; (adr r2, 83ae8 <SystemCoreClockUpdate+0x18>)
   83ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83ae8:	00083af9 	.word	0x00083af9
   83aec:	00083b19 	.word	0x00083b19
   83af0:	00083b69 	.word	0x00083b69
   83af4:	00083b69 	.word	0x00083b69
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83af8:	4b4e      	ldr	r3, [pc, #312]	; (83c34 <SystemCoreClockUpdate+0x164>)
   83afa:	695b      	ldr	r3, [r3, #20]
   83afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83b00:	2b00      	cmp	r3, #0
   83b02:	d004      	beq.n	83b0e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83b04:	4b4c      	ldr	r3, [pc, #304]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83b06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83b0a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83b0c:	e073      	b.n	83bf6 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83b0e:	4b4a      	ldr	r3, [pc, #296]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83b10:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83b14:	601a      	str	r2, [r3, #0]
		}
		break;
   83b16:	e06e      	b.n	83bf6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83b18:	4b45      	ldr	r3, [pc, #276]	; (83c30 <SystemCoreClockUpdate+0x160>)
   83b1a:	6a1b      	ldr	r3, [r3, #32]
   83b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83b20:	2b00      	cmp	r3, #0
   83b22:	d003      	beq.n	83b2c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83b24:	4b44      	ldr	r3, [pc, #272]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83b26:	4a45      	ldr	r2, [pc, #276]	; (83c3c <SystemCoreClockUpdate+0x16c>)
   83b28:	601a      	str	r2, [r3, #0]
   83b2a:	e01c      	b.n	83b66 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83b2c:	4b42      	ldr	r3, [pc, #264]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83b2e:	4a44      	ldr	r2, [pc, #272]	; (83c40 <SystemCoreClockUpdate+0x170>)
   83b30:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83b32:	4b3f      	ldr	r3, [pc, #252]	; (83c30 <SystemCoreClockUpdate+0x160>)
   83b34:	6a1b      	ldr	r3, [r3, #32]
   83b36:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83b3a:	2b10      	cmp	r3, #16
   83b3c:	d004      	beq.n	83b48 <SystemCoreClockUpdate+0x78>
   83b3e:	2b20      	cmp	r3, #32
   83b40:	d008      	beq.n	83b54 <SystemCoreClockUpdate+0x84>
   83b42:	2b00      	cmp	r3, #0
   83b44:	d00e      	beq.n	83b64 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   83b46:	e00e      	b.n	83b66 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83b48:	4b3b      	ldr	r3, [pc, #236]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83b4a:	681b      	ldr	r3, [r3, #0]
   83b4c:	005b      	lsls	r3, r3, #1
   83b4e:	4a3a      	ldr	r2, [pc, #232]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83b50:	6013      	str	r3, [r2, #0]
				break;
   83b52:	e008      	b.n	83b66 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83b54:	4b38      	ldr	r3, [pc, #224]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83b56:	681a      	ldr	r2, [r3, #0]
   83b58:	4613      	mov	r3, r2
   83b5a:	005b      	lsls	r3, r3, #1
   83b5c:	4413      	add	r3, r2
   83b5e:	4a36      	ldr	r2, [pc, #216]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83b60:	6013      	str	r3, [r2, #0]
				break;
   83b62:	e000      	b.n	83b66 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   83b64:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   83b66:	e046      	b.n	83bf6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83b68:	4b31      	ldr	r3, [pc, #196]	; (83c30 <SystemCoreClockUpdate+0x160>)
   83b6a:	6a1b      	ldr	r3, [r3, #32]
   83b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83b70:	2b00      	cmp	r3, #0
   83b72:	d003      	beq.n	83b7c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83b74:	4b30      	ldr	r3, [pc, #192]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83b76:	4a31      	ldr	r2, [pc, #196]	; (83c3c <SystemCoreClockUpdate+0x16c>)
   83b78:	601a      	str	r2, [r3, #0]
   83b7a:	e01c      	b.n	83bb6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83b7c:	4b2e      	ldr	r3, [pc, #184]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83b7e:	4a30      	ldr	r2, [pc, #192]	; (83c40 <SystemCoreClockUpdate+0x170>)
   83b80:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83b82:	4b2b      	ldr	r3, [pc, #172]	; (83c30 <SystemCoreClockUpdate+0x160>)
   83b84:	6a1b      	ldr	r3, [r3, #32]
   83b86:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83b8a:	2b10      	cmp	r3, #16
   83b8c:	d004      	beq.n	83b98 <SystemCoreClockUpdate+0xc8>
   83b8e:	2b20      	cmp	r3, #32
   83b90:	d008      	beq.n	83ba4 <SystemCoreClockUpdate+0xd4>
   83b92:	2b00      	cmp	r3, #0
   83b94:	d00e      	beq.n	83bb4 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   83b96:	e00e      	b.n	83bb6 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83b98:	4b27      	ldr	r3, [pc, #156]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83b9a:	681b      	ldr	r3, [r3, #0]
   83b9c:	005b      	lsls	r3, r3, #1
   83b9e:	4a26      	ldr	r2, [pc, #152]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83ba0:	6013      	str	r3, [r2, #0]
				break;
   83ba2:	e008      	b.n	83bb6 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83ba4:	4b24      	ldr	r3, [pc, #144]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83ba6:	681a      	ldr	r2, [r3, #0]
   83ba8:	4613      	mov	r3, r2
   83baa:	005b      	lsls	r3, r3, #1
   83bac:	4413      	add	r3, r2
   83bae:	4a22      	ldr	r2, [pc, #136]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83bb0:	6013      	str	r3, [r2, #0]
				break;
   83bb2:	e000      	b.n	83bb6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   83bb4:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83bb6:	4b1e      	ldr	r3, [pc, #120]	; (83c30 <SystemCoreClockUpdate+0x160>)
   83bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83bba:	f003 0303 	and.w	r3, r3, #3
   83bbe:	2b02      	cmp	r3, #2
   83bc0:	d115      	bne.n	83bee <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83bc2:	4b1b      	ldr	r3, [pc, #108]	; (83c30 <SystemCoreClockUpdate+0x160>)
   83bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   83bc6:	4b1f      	ldr	r3, [pc, #124]	; (83c44 <SystemCoreClockUpdate+0x174>)
   83bc8:	4013      	ands	r3, r2
   83bca:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   83bcc:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83bce:	4a1a      	ldr	r2, [pc, #104]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83bd0:	6812      	ldr	r2, [r2, #0]
   83bd2:	fb02 f303 	mul.w	r3, r2, r3
   83bd6:	4a18      	ldr	r2, [pc, #96]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83bd8:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83bda:	4b15      	ldr	r3, [pc, #84]	; (83c30 <SystemCoreClockUpdate+0x160>)
   83bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83bde:	b2db      	uxtb	r3, r3
   83be0:	4a15      	ldr	r2, [pc, #84]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83be2:	6812      	ldr	r2, [r2, #0]
   83be4:	fbb2 f3f3 	udiv	r3, r2, r3
   83be8:	4a13      	ldr	r2, [pc, #76]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83bea:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   83bec:	e002      	b.n	83bf4 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83bee:	4b12      	ldr	r3, [pc, #72]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83bf0:	4a15      	ldr	r2, [pc, #84]	; (83c48 <SystemCoreClockUpdate+0x178>)
   83bf2:	601a      	str	r2, [r3, #0]
		}
		break;
   83bf4:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83bf6:	4b0e      	ldr	r3, [pc, #56]	; (83c30 <SystemCoreClockUpdate+0x160>)
   83bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83bfe:	2b70      	cmp	r3, #112	; 0x70
   83c00:	d108      	bne.n	83c14 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   83c02:	4b0d      	ldr	r3, [pc, #52]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83c04:	681b      	ldr	r3, [r3, #0]
   83c06:	4a11      	ldr	r2, [pc, #68]	; (83c4c <SystemCoreClockUpdate+0x17c>)
   83c08:	fba2 2303 	umull	r2, r3, r2, r3
   83c0c:	085b      	lsrs	r3, r3, #1
   83c0e:	4a0a      	ldr	r2, [pc, #40]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83c10:	6013      	str	r3, [r2, #0]
   83c12:	e009      	b.n	83c28 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83c14:	4b06      	ldr	r3, [pc, #24]	; (83c30 <SystemCoreClockUpdate+0x160>)
   83c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83c18:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83c1c:	091a      	lsrs	r2, r3, #4
   83c1e:	4b06      	ldr	r3, [pc, #24]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83c20:	681b      	ldr	r3, [r3, #0]
   83c22:	40d3      	lsrs	r3, r2
   83c24:	4a04      	ldr	r2, [pc, #16]	; (83c38 <SystemCoreClockUpdate+0x168>)
   83c26:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   83c28:	46bd      	mov	sp, r7
   83c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   83c2e:	4770      	bx	lr
   83c30:	400e0600 	.word	0x400e0600
   83c34:	400e1a10 	.word	0x400e1a10
   83c38:	2007026c 	.word	0x2007026c
   83c3c:	00b71b00 	.word	0x00b71b00
   83c40:	003d0900 	.word	0x003d0900
   83c44:	07ff0000 	.word	0x07ff0000
   83c48:	0e4e1c00 	.word	0x0e4e1c00
   83c4c:	aaaaaaab 	.word	0xaaaaaaab

00083c50 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   83c50:	b580      	push	{r7, lr}
   83c52:	b082      	sub	sp, #8
   83c54:	af00      	add	r7, sp, #0
   83c56:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   83c58:	6878      	ldr	r0, [r7, #4]
   83c5a:	4b02      	ldr	r3, [pc, #8]	; (83c64 <sysclk_enable_peripheral_clock+0x14>)
   83c5c:	4798      	blx	r3
}
   83c5e:	3708      	adds	r7, #8
   83c60:	46bd      	mov	sp, r7
   83c62:	bd80      	pop	{r7, pc}
   83c64:	00083901 	.word	0x00083901

00083c68 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   83c68:	b580      	push	{r7, lr}
   83c6a:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   83c6c:	200b      	movs	r0, #11
   83c6e:	4b06      	ldr	r3, [pc, #24]	; (83c88 <ioport_init+0x20>)
   83c70:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   83c72:	200c      	movs	r0, #12
   83c74:	4b04      	ldr	r3, [pc, #16]	; (83c88 <ioport_init+0x20>)
   83c76:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   83c78:	200d      	movs	r0, #13
   83c7a:	4b03      	ldr	r3, [pc, #12]	; (83c88 <ioport_init+0x20>)
   83c7c:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   83c7e:	200e      	movs	r0, #14
   83c80:	4b01      	ldr	r3, [pc, #4]	; (83c88 <ioport_init+0x20>)
   83c82:	4798      	blx	r3
	arch_ioport_init();
}
   83c84:	bd80      	pop	{r7, pc}
   83c86:	bf00      	nop
   83c88:	00083c51 	.word	0x00083c51

00083c8c <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
   83c8c:	b480      	push	{r7}
   83c8e:	b08d      	sub	sp, #52	; 0x34
   83c90:	af00      	add	r7, sp, #0
   83c92:	6078      	str	r0, [r7, #4]
   83c94:	460b      	mov	r3, r1
   83c96:	70fb      	strb	r3, [r7, #3]
   83c98:	687b      	ldr	r3, [r7, #4]
   83c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   83c9c:	78fb      	ldrb	r3, [r7, #3]
   83c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   83ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83ca4:	627b      	str	r3, [r7, #36]	; 0x24
   83ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83ca8:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   83caa:	6a3b      	ldr	r3, [r7, #32]
   83cac:	095b      	lsrs	r3, r3, #5
   83cae:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83cb0:	69fb      	ldr	r3, [r7, #28]
   83cb2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83cb6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83cba:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   83cbc:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
   83cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83cc2:	2b01      	cmp	r3, #1
   83cc4:	d109      	bne.n	83cda <ioport_set_pin_dir+0x4e>
   83cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83cc8:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83cca:	697b      	ldr	r3, [r7, #20]
   83ccc:	f003 031f 	and.w	r3, r3, #31
   83cd0:	2201      	movs	r2, #1
   83cd2:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83cd4:	69bb      	ldr	r3, [r7, #24]
   83cd6:	611a      	str	r2, [r3, #16]
   83cd8:	e00c      	b.n	83cf4 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   83cda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83cde:	2b00      	cmp	r3, #0
   83ce0:	d108      	bne.n	83cf4 <ioport_set_pin_dir+0x68>
   83ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83ce4:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83ce6:	693b      	ldr	r3, [r7, #16]
   83ce8:	f003 031f 	and.w	r3, r3, #31
   83cec:	2201      	movs	r2, #1
   83cee:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   83cf0:	69bb      	ldr	r3, [r7, #24]
   83cf2:	615a      	str	r2, [r3, #20]
   83cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83cf6:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83cf8:	68fb      	ldr	r3, [r7, #12]
   83cfa:	f003 031f 	and.w	r3, r3, #31
   83cfe:	2201      	movs	r2, #1
   83d00:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83d02:	69bb      	ldr	r3, [r7, #24]
   83d04:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
   83d08:	3734      	adds	r7, #52	; 0x34
   83d0a:	46bd      	mov	sp, r7
   83d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83d10:	4770      	bx	lr
   83d12:	bf00      	nop

00083d14 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   83d14:	b480      	push	{r7}
   83d16:	b08b      	sub	sp, #44	; 0x2c
   83d18:	af00      	add	r7, sp, #0
   83d1a:	6078      	str	r0, [r7, #4]
   83d1c:	460b      	mov	r3, r1
   83d1e:	70fb      	strb	r3, [r7, #3]
   83d20:	687b      	ldr	r3, [r7, #4]
   83d22:	627b      	str	r3, [r7, #36]	; 0x24
   83d24:	78fb      	ldrb	r3, [r7, #3]
   83d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   83d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83d2c:	61fb      	str	r3, [r7, #28]
   83d2e:	69fb      	ldr	r3, [r7, #28]
   83d30:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   83d32:	69bb      	ldr	r3, [r7, #24]
   83d34:	095b      	lsrs	r3, r3, #5
   83d36:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83d38:	697b      	ldr	r3, [r7, #20]
   83d3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83d3e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83d42:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   83d44:	613b      	str	r3, [r7, #16]

	if (level) {
   83d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83d4a:	2b00      	cmp	r3, #0
   83d4c:	d009      	beq.n	83d62 <ioport_set_pin_level+0x4e>
   83d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83d50:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83d52:	68fb      	ldr	r3, [r7, #12]
   83d54:	f003 031f 	and.w	r3, r3, #31
   83d58:	2201      	movs	r2, #1
   83d5a:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   83d5c:	693b      	ldr	r3, [r7, #16]
   83d5e:	631a      	str	r2, [r3, #48]	; 0x30
   83d60:	e008      	b.n	83d74 <ioport_set_pin_level+0x60>
   83d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83d64:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83d66:	68bb      	ldr	r3, [r7, #8]
   83d68:	f003 031f 	and.w	r3, r3, #31
   83d6c:	2201      	movs	r2, #1
   83d6e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83d70:	693b      	ldr	r3, [r7, #16]
   83d72:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
   83d74:	372c      	adds	r7, #44	; 0x2c
   83d76:	46bd      	mov	sp, r7
   83d78:	f85d 7b04 	ldr.w	r7, [sp], #4
   83d7c:	4770      	bx	lr
   83d7e:	bf00      	nop

00083d80 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   83d80:	b480      	push	{r7}
   83d82:	b089      	sub	sp, #36	; 0x24
   83d84:	af00      	add	r7, sp, #0
   83d86:	6078      	str	r0, [r7, #4]
   83d88:	687b      	ldr	r3, [r7, #4]
   83d8a:	61fb      	str	r3, [r7, #28]
   83d8c:	69fb      	ldr	r3, [r7, #28]
   83d8e:	61bb      	str	r3, [r7, #24]
   83d90:	69bb      	ldr	r3, [r7, #24]
   83d92:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   83d94:	697b      	ldr	r3, [r7, #20]
   83d96:	095b      	lsrs	r3, r3, #5
   83d98:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83d9a:	693b      	ldr	r3, [r7, #16]
   83d9c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83da0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83da4:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   83da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   83da8:	69fb      	ldr	r3, [r7, #28]
   83daa:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83dac:	68fb      	ldr	r3, [r7, #12]
   83dae:	f003 031f 	and.w	r3, r3, #31
   83db2:	2101      	movs	r1, #1
   83db4:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   83db8:	4013      	ands	r3, r2
   83dba:	2b00      	cmp	r3, #0
   83dbc:	bf14      	ite	ne
   83dbe:	2301      	movne	r3, #1
   83dc0:	2300      	moveq	r3, #0
   83dc2:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   83dc4:	4618      	mov	r0, r3
   83dc6:	3724      	adds	r7, #36	; 0x24
   83dc8:	46bd      	mov	sp, r7
   83dca:	f85d 7b04 	ldr.w	r7, [sp], #4
   83dce:	4770      	bx	lr

00083dd0 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   83dd0:	b480      	push	{r7}
   83dd2:	b083      	sub	sp, #12
   83dd4:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   83dd6:	2300      	movs	r3, #0
   83dd8:	71fb      	strb	r3, [r7, #7]
   83dda:	e006      	b.n	83dea <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   83ddc:	79fb      	ldrb	r3, [r7, #7]
   83dde:	4a08      	ldr	r2, [pc, #32]	; (83e00 <sleepmgr_init+0x30>)
   83de0:	2100      	movs	r1, #0
   83de2:	54d1      	strb	r1, [r2, r3]
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   83de4:	79fb      	ldrb	r3, [r7, #7]
   83de6:	3301      	adds	r3, #1
   83de8:	71fb      	strb	r3, [r7, #7]
   83dea:	79fb      	ldrb	r3, [r7, #7]
   83dec:	2b04      	cmp	r3, #4
   83dee:	d9f5      	bls.n	83ddc <sleepmgr_init+0xc>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   83df0:	4b03      	ldr	r3, [pc, #12]	; (83e00 <sleepmgr_init+0x30>)
   83df2:	2201      	movs	r2, #1
   83df4:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   83df6:	370c      	adds	r7, #12
   83df8:	46bd      	mov	sp, r7
   83dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
   83dfe:	4770      	bx	lr
   83e00:	2007086c 	.word	0x2007086c

00083e04 <pressModifier>:
 * Atmel Software Framework (ASF).
 */
#include <asf.h>
#include <keys.h>

void pressModifier(int pressedModifier) {
   83e04:	b580      	push	{r7, lr}
   83e06:	b082      	sub	sp, #8
   83e08:	af00      	add	r7, sp, #0
   83e0a:	6078      	str	r0, [r7, #4]
	if (!keyboardEnabledFlag) {
   83e0c:	4b07      	ldr	r3, [pc, #28]	; (83e2c <pressModifier+0x28>)
   83e0e:	781b      	ldrb	r3, [r3, #0]
   83e10:	f083 0301 	eor.w	r3, r3, #1
   83e14:	b2db      	uxtb	r3, r3
   83e16:	2b00      	cmp	r3, #0
   83e18:	d000      	beq.n	83e1c <pressModifier+0x18>
		return;
   83e1a:	e004      	b.n	83e26 <pressModifier+0x22>
	}
	udi_hid_kbd_modifier_down(pressedModifier);
   83e1c:	687b      	ldr	r3, [r7, #4]
   83e1e:	b2db      	uxtb	r3, r3
   83e20:	4618      	mov	r0, r3
   83e22:	4b03      	ldr	r3, [pc, #12]	; (83e30 <pressModifier+0x2c>)
   83e24:	4798      	blx	r3
}
   83e26:	3708      	adds	r7, #8
   83e28:	46bd      	mov	sp, r7
   83e2a:	bd80      	pop	{r7, pc}
   83e2c:	200702d0 	.word	0x200702d0
   83e30:	00080315 	.word	0x00080315

00083e34 <releaseModifier>:

void releaseModifier(int releaseModifier)
{
   83e34:	b580      	push	{r7, lr}
   83e36:	b082      	sub	sp, #8
   83e38:	af00      	add	r7, sp, #0
   83e3a:	6078      	str	r0, [r7, #4]
	if ((!keyboardEnabledFlag)) {
   83e3c:	4b07      	ldr	r3, [pc, #28]	; (83e5c <releaseModifier+0x28>)
   83e3e:	781b      	ldrb	r3, [r3, #0]
   83e40:	f083 0301 	eor.w	r3, r3, #1
   83e44:	b2db      	uxtb	r3, r3
   83e46:	2b00      	cmp	r3, #0
   83e48:	d000      	beq.n	83e4c <releaseModifier+0x18>
		return;
   83e4a:	e004      	b.n	83e56 <releaseModifier+0x22>
	}
	udi_hid_kbd_modifier_up(releaseModifier);
   83e4c:	687b      	ldr	r3, [r7, #4]
   83e4e:	b2db      	uxtb	r3, r3
   83e50:	4618      	mov	r0, r3
   83e52:	4b03      	ldr	r3, [pc, #12]	; (83e60 <releaseModifier+0x2c>)
   83e54:	4798      	blx	r3
}
   83e56:	3708      	adds	r7, #8
   83e58:	46bd      	mov	sp, r7
   83e5a:	bd80      	pop	{r7, pc}
   83e5c:	200702d0 	.word	0x200702d0
   83e60:	000802c5 	.word	0x000802c5

00083e64 <keyboardEnableCallback>:

bool keyboardEnableCallback(void)
{
   83e64:	b480      	push	{r7}
   83e66:	af00      	add	r7, sp, #0
	keyboardEnabledFlag = true;
   83e68:	4b04      	ldr	r3, [pc, #16]	; (83e7c <keyboardEnableCallback+0x18>)
   83e6a:	2201      	movs	r2, #1
   83e6c:	701a      	strb	r2, [r3, #0]
	return true;
   83e6e:	2301      	movs	r3, #1
}
   83e70:	4618      	mov	r0, r3
   83e72:	46bd      	mov	sp, r7
   83e74:	f85d 7b04 	ldr.w	r7, [sp], #4
   83e78:	4770      	bx	lr
   83e7a:	bf00      	nop
   83e7c:	200702d0 	.word	0x200702d0

00083e80 <keyboardDisableCallback>:

void keyboardDisableCallback(void)
{
   83e80:	b480      	push	{r7}
   83e82:	af00      	add	r7, sp, #0
	keyboardEnabledFlag = false;
   83e84:	4b03      	ldr	r3, [pc, #12]	; (83e94 <keyboardDisableCallback+0x14>)
   83e86:	2200      	movs	r2, #0
   83e88:	701a      	strb	r2, [r3, #0]
}
   83e8a:	46bd      	mov	sp, r7
   83e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83e90:	4770      	bx	lr
   83e92:	bf00      	nop
   83e94:	200702d0 	.word	0x200702d0

00083e98 <pressKey>:

void pressKey(int pressedKey)
{
   83e98:	b580      	push	{r7, lr}
   83e9a:	b082      	sub	sp, #8
   83e9c:	af00      	add	r7, sp, #0
   83e9e:	6078      	str	r0, [r7, #4]
	if (!keyboardEnabledFlag) {
   83ea0:	4b07      	ldr	r3, [pc, #28]	; (83ec0 <pressKey+0x28>)
   83ea2:	781b      	ldrb	r3, [r3, #0]
   83ea4:	f083 0301 	eor.w	r3, r3, #1
   83ea8:	b2db      	uxtb	r3, r3
   83eaa:	2b00      	cmp	r3, #0
   83eac:	d000      	beq.n	83eb0 <pressKey+0x18>
		return;
   83eae:	e004      	b.n	83eba <pressKey+0x22>
	}
	udi_hid_kbd_down(pressedKey);
   83eb0:	687b      	ldr	r3, [r7, #4]
   83eb2:	b2db      	uxtb	r3, r3
   83eb4:	4618      	mov	r0, r3
   83eb6:	4b03      	ldr	r3, [pc, #12]	; (83ec4 <pressKey+0x2c>)
   83eb8:	4798      	blx	r3
}
   83eba:	3708      	adds	r7, #8
   83ebc:	46bd      	mov	sp, r7
   83ebe:	bd80      	pop	{r7, pc}
   83ec0:	200702d0 	.word	0x200702d0
   83ec4:	00080405 	.word	0x00080405

00083ec8 <releaseKey>:

void releaseKey(int releasedKey)
{
   83ec8:	b580      	push	{r7, lr}
   83eca:	b082      	sub	sp, #8
   83ecc:	af00      	add	r7, sp, #0
   83ece:	6078      	str	r0, [r7, #4]
	if ((!keyboardEnabledFlag)) {
   83ed0:	4b07      	ldr	r3, [pc, #28]	; (83ef0 <releaseKey+0x28>)
   83ed2:	781b      	ldrb	r3, [r3, #0]
   83ed4:	f083 0301 	eor.w	r3, r3, #1
   83ed8:	b2db      	uxtb	r3, r3
   83eda:	2b00      	cmp	r3, #0
   83edc:	d000      	beq.n	83ee0 <releaseKey+0x18>
		return;
   83ede:	e004      	b.n	83eea <releaseKey+0x22>
	}
	udi_hid_kbd_up(releasedKey);
   83ee0:	687b      	ldr	r3, [r7, #4]
   83ee2:	b2db      	uxtb	r3, r3
   83ee4:	4618      	mov	r0, r3
   83ee6:	4b03      	ldr	r3, [pc, #12]	; (83ef4 <releaseKey+0x2c>)
   83ee8:	4798      	blx	r3
}
   83eea:	3708      	adds	r7, #8
   83eec:	46bd      	mov	sp, r7
   83eee:	bd80      	pop	{r7, pc}
   83ef0:	200702d0 	.word	0x200702d0
   83ef4:	00080361 	.word	0x00080361

00083ef8 <main>:

int main (void)
{
   83ef8:	b580      	push	{r7, lr}
   83efa:	b086      	sub	sp, #24
   83efc:	af00      	add	r7, sp, #0
	/* Initialise the board */
	sysclk_init();
   83efe:	4b62      	ldr	r3, [pc, #392]	; (84088 <main+0x190>)
   83f00:	4798      	blx	r3
	irq_initialize_vectors();
	cpu_irq_enable();
   83f02:	4b62      	ldr	r3, [pc, #392]	; (8408c <main+0x194>)
   83f04:	2201      	movs	r2, #1
   83f06:	701a      	strb	r2, [r3, #0]
   83f08:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   83f0c:	b662      	cpsie	i
	board_init();
   83f0e:	4b60      	ldr	r3, [pc, #384]	; (84090 <main+0x198>)
   83f10:	4798      	blx	r3
	sleepmgr_init();
   83f12:	4b60      	ldr	r3, [pc, #384]	; (84094 <main+0x19c>)
   83f14:	4798      	blx	r3
	board_init();
   83f16:	4b5e      	ldr	r3, [pc, #376]	; (84090 <main+0x198>)
   83f18:	4798      	blx	r3
	ioport_init();
   83f1a:	4b5f      	ldr	r3, [pc, #380]	; (84098 <main+0x1a0>)
   83f1c:	4798      	blx	r3

	/* Main application code */
	
	//Set the column pins as inputs
	for (int columnPin = 0; columnPin < COLUMNPINCOUNT; columnPin++) {
   83f1e:	2300      	movs	r3, #0
   83f20:	617b      	str	r3, [r7, #20]
   83f22:	e00a      	b.n	83f3a <main+0x42>
		ioport_set_pin_dir(columnPins[columnPin], IOPORT_DIR_INPUT);
   83f24:	4a5d      	ldr	r2, [pc, #372]	; (8409c <main+0x1a4>)
   83f26:	697b      	ldr	r3, [r7, #20]
   83f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   83f2c:	4618      	mov	r0, r3
   83f2e:	2100      	movs	r1, #0
   83f30:	4b5b      	ldr	r3, [pc, #364]	; (840a0 <main+0x1a8>)
   83f32:	4798      	blx	r3
	ioport_init();

	/* Main application code */
	
	//Set the column pins as inputs
	for (int columnPin = 0; columnPin < COLUMNPINCOUNT; columnPin++) {
   83f34:	697b      	ldr	r3, [r7, #20]
   83f36:	3301      	adds	r3, #1
   83f38:	617b      	str	r3, [r7, #20]
   83f3a:	697b      	ldr	r3, [r7, #20]
   83f3c:	2b07      	cmp	r3, #7
   83f3e:	ddf1      	ble.n	83f24 <main+0x2c>
		ioport_set_pin_dir(columnPins[columnPin], IOPORT_DIR_INPUT);
	}

	// Start the USB HID service
	udc_start();
   83f40:	4b58      	ldr	r3, [pc, #352]	; (840a4 <main+0x1ac>)
   83f42:	4798      	blx	r3
	bool scanValue;
	while (1) 
	{
		// Cycle through the row pins, designating one as output
		for (int rowPinOutput = 0; rowPinOutput < ROWPINCOUNT; rowPinOutput++) 
   83f44:	2300      	movs	r3, #0
   83f46:	613b      	str	r3, [r7, #16]
   83f48:	e099      	b.n	8407e <main+0x186>
		{
			// Set all of the row pins as inputs
			for (int rowPin = 0; rowPin < ROWPINCOUNT; rowPin++) 
   83f4a:	2300      	movs	r3, #0
   83f4c:	60fb      	str	r3, [r7, #12]
   83f4e:	e00a      	b.n	83f66 <main+0x6e>
			{
				ioport_set_pin_dir(rowPins[rowPin], IOPORT_DIR_INPUT);
   83f50:	4a55      	ldr	r2, [pc, #340]	; (840a8 <main+0x1b0>)
   83f52:	68fb      	ldr	r3, [r7, #12]
   83f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   83f58:	4618      	mov	r0, r3
   83f5a:	2100      	movs	r1, #0
   83f5c:	4b50      	ldr	r3, [pc, #320]	; (840a0 <main+0x1a8>)
   83f5e:	4798      	blx	r3
	{
		// Cycle through the row pins, designating one as output
		for (int rowPinOutput = 0; rowPinOutput < ROWPINCOUNT; rowPinOutput++) 
		{
			// Set all of the row pins as inputs
			for (int rowPin = 0; rowPin < ROWPINCOUNT; rowPin++) 
   83f60:	68fb      	ldr	r3, [r7, #12]
   83f62:	3301      	adds	r3, #1
   83f64:	60fb      	str	r3, [r7, #12]
   83f66:	68fb      	ldr	r3, [r7, #12]
   83f68:	2b0f      	cmp	r3, #15
   83f6a:	ddf1      	ble.n	83f50 <main+0x58>
			{
				ioport_set_pin_dir(rowPins[rowPin], IOPORT_DIR_INPUT);
			}

			//Set the designated pin as low outputs
			ioport_set_pin_dir(rowPins[rowPinOutput], IOPORT_DIR_OUTPUT);
   83f6c:	4a4e      	ldr	r2, [pc, #312]	; (840a8 <main+0x1b0>)
   83f6e:	693b      	ldr	r3, [r7, #16]
   83f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   83f74:	4618      	mov	r0, r3
   83f76:	2101      	movs	r1, #1
   83f78:	4b49      	ldr	r3, [pc, #292]	; (840a0 <main+0x1a8>)
   83f7a:	4798      	blx	r3
			ioport_set_pin_level(rowPins[rowPinOutput], IOPORT_PIN_LEVEL_LOW);
   83f7c:	4a4a      	ldr	r2, [pc, #296]	; (840a8 <main+0x1b0>)
   83f7e:	693b      	ldr	r3, [r7, #16]
   83f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   83f84:	4618      	mov	r0, r3
   83f86:	2100      	movs	r1, #0
   83f88:	4b48      	ldr	r3, [pc, #288]	; (840ac <main+0x1b4>)
   83f8a:	4798      	blx	r3

			// Cycle through column pins
			for (int columnReadPin = 0; columnReadPin < COLUMNPINCOUNT; columnReadPin++) {
   83f8c:	2300      	movs	r3, #0
   83f8e:	60bb      	str	r3, [r7, #8]
   83f90:	e06f      	b.n	84072 <main+0x17a>
				
				// Get the value of the column pin
				scanValue = !ioport_get_pin_level(columnPins[columnReadPin]);
   83f92:	4a42      	ldr	r2, [pc, #264]	; (8409c <main+0x1a4>)
   83f94:	68bb      	ldr	r3, [r7, #8]
   83f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   83f9a:	4618      	mov	r0, r3
   83f9c:	4b44      	ldr	r3, [pc, #272]	; (840b0 <main+0x1b8>)
   83f9e:	4798      	blx	r3
   83fa0:	4603      	mov	r3, r0
   83fa2:	2b00      	cmp	r3, #0
   83fa4:	bf14      	ite	ne
   83fa6:	2301      	movne	r3, #1
   83fa8:	2300      	moveq	r3, #0
   83faa:	b2db      	uxtb	r3, r3
   83fac:	f083 0301 	eor.w	r3, r3, #1
   83fb0:	b2db      	uxtb	r3, r3
   83fb2:	71fb      	strb	r3, [r7, #7]
   83fb4:	79fb      	ldrb	r3, [r7, #7]
   83fb6:	f003 0301 	and.w	r3, r3, #1
   83fba:	71fb      	strb	r3, [r7, #7]

				// If the saved state differs from the recorded state
				if (stateMap[rowPinOutput][columnReadPin] != scanValue) {
   83fbc:	493d      	ldr	r1, [pc, #244]	; (840b4 <main+0x1bc>)
   83fbe:	693b      	ldr	r3, [r7, #16]
   83fc0:	00da      	lsls	r2, r3, #3
   83fc2:	68bb      	ldr	r3, [r7, #8]
   83fc4:	4413      	add	r3, r2
   83fc6:	440b      	add	r3, r1
   83fc8:	781b      	ldrb	r3, [r3, #0]
   83fca:	79fa      	ldrb	r2, [r7, #7]
   83fcc:	429a      	cmp	r2, r3
   83fce:	d04d      	beq.n	8406c <main+0x174>
					
					// Update the state
					stateMap[rowPinOutput][columnReadPin] = scanValue;
   83fd0:	4938      	ldr	r1, [pc, #224]	; (840b4 <main+0x1bc>)
   83fd2:	693b      	ldr	r3, [r7, #16]
   83fd4:	00da      	lsls	r2, r3, #3
   83fd6:	68bb      	ldr	r3, [r7, #8]
   83fd8:	4413      	add	r3, r2
   83fda:	440b      	add	r3, r1
   83fdc:	79fa      	ldrb	r2, [r7, #7]
   83fde:	701a      	strb	r2, [r3, #0]

					if (stateMap[rowPinOutput][columnReadPin]) {
   83fe0:	4934      	ldr	r1, [pc, #208]	; (840b4 <main+0x1bc>)
   83fe2:	693b      	ldr	r3, [r7, #16]
   83fe4:	00da      	lsls	r2, r3, #3
   83fe6:	68bb      	ldr	r3, [r7, #8]
   83fe8:	4413      	add	r3, r2
   83fea:	440b      	add	r3, r1
   83fec:	781b      	ldrb	r3, [r3, #0]
   83fee:	2b00      	cmp	r3, #0
   83ff0:	d01e      	beq.n	84030 <main+0x138>
						if (modifierMap[rowPinOutput][columnReadPin] == 0) {
   83ff2:	4931      	ldr	r1, [pc, #196]	; (840b8 <main+0x1c0>)
   83ff4:	693b      	ldr	r3, [r7, #16]
   83ff6:	00da      	lsls	r2, r3, #3
   83ff8:	68bb      	ldr	r3, [r7, #8]
   83ffa:	4413      	add	r3, r2
   83ffc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   84000:	2b00      	cmp	r3, #0
   84002:	d10a      	bne.n	8401a <main+0x122>
							pressKey(keyMap[rowPinOutput][columnReadPin]);
   84004:	492d      	ldr	r1, [pc, #180]	; (840bc <main+0x1c4>)
   84006:	693b      	ldr	r3, [r7, #16]
   84008:	00da      	lsls	r2, r3, #3
   8400a:	68bb      	ldr	r3, [r7, #8]
   8400c:	4413      	add	r3, r2
   8400e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   84012:	4618      	mov	r0, r3
   84014:	4b2a      	ldr	r3, [pc, #168]	; (840c0 <main+0x1c8>)
   84016:	4798      	blx	r3
   84018:	e028      	b.n	8406c <main+0x174>
						} else {
							pressModifier(keyMap[rowPinOutput][columnReadPin]);
   8401a:	4928      	ldr	r1, [pc, #160]	; (840bc <main+0x1c4>)
   8401c:	693b      	ldr	r3, [r7, #16]
   8401e:	00da      	lsls	r2, r3, #3
   84020:	68bb      	ldr	r3, [r7, #8]
   84022:	4413      	add	r3, r2
   84024:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   84028:	4618      	mov	r0, r3
   8402a:	4b26      	ldr	r3, [pc, #152]	; (840c4 <main+0x1cc>)
   8402c:	4798      	blx	r3
   8402e:	e01d      	b.n	8406c <main+0x174>
						}
					} else {
						if (modifierMap[rowPinOutput][columnReadPin] == 0) {
   84030:	4921      	ldr	r1, [pc, #132]	; (840b8 <main+0x1c0>)
   84032:	693b      	ldr	r3, [r7, #16]
   84034:	00da      	lsls	r2, r3, #3
   84036:	68bb      	ldr	r3, [r7, #8]
   84038:	4413      	add	r3, r2
   8403a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8403e:	2b00      	cmp	r3, #0
   84040:	d10a      	bne.n	84058 <main+0x160>
							releaseKey(keyMap[rowPinOutput][columnReadPin]);
   84042:	491e      	ldr	r1, [pc, #120]	; (840bc <main+0x1c4>)
   84044:	693b      	ldr	r3, [r7, #16]
   84046:	00da      	lsls	r2, r3, #3
   84048:	68bb      	ldr	r3, [r7, #8]
   8404a:	4413      	add	r3, r2
   8404c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   84050:	4618      	mov	r0, r3
   84052:	4b1d      	ldr	r3, [pc, #116]	; (840c8 <main+0x1d0>)
   84054:	4798      	blx	r3
   84056:	e009      	b.n	8406c <main+0x174>
						} else {
							releaseModifier(keyMap[rowPinOutput][columnReadPin]);
   84058:	4918      	ldr	r1, [pc, #96]	; (840bc <main+0x1c4>)
   8405a:	693b      	ldr	r3, [r7, #16]
   8405c:	00da      	lsls	r2, r3, #3
   8405e:	68bb      	ldr	r3, [r7, #8]
   84060:	4413      	add	r3, r2
   84062:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   84066:	4618      	mov	r0, r3
   84068:	4b18      	ldr	r3, [pc, #96]	; (840cc <main+0x1d4>)
   8406a:	4798      	blx	r3
			//Set the designated pin as low outputs
			ioport_set_pin_dir(rowPins[rowPinOutput], IOPORT_DIR_OUTPUT);
			ioport_set_pin_level(rowPins[rowPinOutput], IOPORT_PIN_LEVEL_LOW);

			// Cycle through column pins
			for (int columnReadPin = 0; columnReadPin < COLUMNPINCOUNT; columnReadPin++) {
   8406c:	68bb      	ldr	r3, [r7, #8]
   8406e:	3301      	adds	r3, #1
   84070:	60bb      	str	r3, [r7, #8]
   84072:	68bb      	ldr	r3, [r7, #8]
   84074:	2b07      	cmp	r3, #7
   84076:	dd8c      	ble.n	83f92 <main+0x9a>
	udc_start();
	bool scanValue;
	while (1) 
	{
		// Cycle through the row pins, designating one as output
		for (int rowPinOutput = 0; rowPinOutput < ROWPINCOUNT; rowPinOutput++) 
   84078:	693b      	ldr	r3, [r7, #16]
   8407a:	3301      	adds	r3, #1
   8407c:	613b      	str	r3, [r7, #16]
   8407e:	693b      	ldr	r3, [r7, #16]
   84080:	2b0f      	cmp	r3, #15
   84082:	f77f af62 	ble.w	83f4a <main+0x52>
						}
					}
				}
			}
		}	
	}
   84086:	e75d      	b.n	83f44 <main+0x4c>
   84088:	0008303d 	.word	0x0008303d
   8408c:	20070268 	.word	0x20070268
   84090:	000830e9 	.word	0x000830e9
   84094:	00083dd1 	.word	0x00083dd1
   84098:	00083c69 	.word	0x00083c69
   8409c:	200702b0 	.word	0x200702b0
   840a0:	00083c8d 	.word	0x00083c8d
   840a4:	000807bd 	.word	0x000807bd
   840a8:	20070270 	.word	0x20070270
   840ac:	00083d15 	.word	0x00083d15
   840b0:	00083d81 	.word	0x00083d81
   840b4:	200707ec 	.word	0x200707ec
   840b8:	000844b4 	.word	0x000844b4
   840bc:	000842b4 	.word	0x000842b4
   840c0:	00083e99 	.word	0x00083e99
   840c4:	00083e05 	.word	0x00083e05
   840c8:	00083ec9 	.word	0x00083ec9
   840cc:	00083e35 	.word	0x00083e35

000840d0 <__libc_init_array>:
   840d0:	b570      	push	{r4, r5, r6, lr}
   840d2:	4e0f      	ldr	r6, [pc, #60]	; (84110 <__libc_init_array+0x40>)
   840d4:	4d0f      	ldr	r5, [pc, #60]	; (84114 <__libc_init_array+0x44>)
   840d6:	1b76      	subs	r6, r6, r5
   840d8:	10b6      	asrs	r6, r6, #2
   840da:	bf18      	it	ne
   840dc:	2400      	movne	r4, #0
   840de:	d005      	beq.n	840ec <__libc_init_array+0x1c>
   840e0:	3401      	adds	r4, #1
   840e2:	f855 3b04 	ldr.w	r3, [r5], #4
   840e6:	4798      	blx	r3
   840e8:	42a6      	cmp	r6, r4
   840ea:	d1f9      	bne.n	840e0 <__libc_init_array+0x10>
   840ec:	4e0a      	ldr	r6, [pc, #40]	; (84118 <__libc_init_array+0x48>)
   840ee:	4d0b      	ldr	r5, [pc, #44]	; (8411c <__libc_init_array+0x4c>)
   840f0:	f000 fae4 	bl	846bc <_init>
   840f4:	1b76      	subs	r6, r6, r5
   840f6:	10b6      	asrs	r6, r6, #2
   840f8:	bf18      	it	ne
   840fa:	2400      	movne	r4, #0
   840fc:	d006      	beq.n	8410c <__libc_init_array+0x3c>
   840fe:	3401      	adds	r4, #1
   84100:	f855 3b04 	ldr.w	r3, [r5], #4
   84104:	4798      	blx	r3
   84106:	42a6      	cmp	r6, r4
   84108:	d1f9      	bne.n	840fe <__libc_init_array+0x2e>
   8410a:	bd70      	pop	{r4, r5, r6, pc}
   8410c:	bd70      	pop	{r4, r5, r6, pc}
   8410e:	bf00      	nop
   84110:	000846c8 	.word	0x000846c8
   84114:	000846c8 	.word	0x000846c8
   84118:	000846d0 	.word	0x000846d0
   8411c:	000846c8 	.word	0x000846c8

00084120 <memset>:
   84120:	b470      	push	{r4, r5, r6}
   84122:	0784      	lsls	r4, r0, #30
   84124:	d046      	beq.n	841b4 <memset+0x94>
   84126:	1e54      	subs	r4, r2, #1
   84128:	2a00      	cmp	r2, #0
   8412a:	d041      	beq.n	841b0 <memset+0x90>
   8412c:	b2cd      	uxtb	r5, r1
   8412e:	4603      	mov	r3, r0
   84130:	e002      	b.n	84138 <memset+0x18>
   84132:	1e62      	subs	r2, r4, #1
   84134:	b3e4      	cbz	r4, 841b0 <memset+0x90>
   84136:	4614      	mov	r4, r2
   84138:	f803 5b01 	strb.w	r5, [r3], #1
   8413c:	079a      	lsls	r2, r3, #30
   8413e:	d1f8      	bne.n	84132 <memset+0x12>
   84140:	2c03      	cmp	r4, #3
   84142:	d92e      	bls.n	841a2 <memset+0x82>
   84144:	b2cd      	uxtb	r5, r1
   84146:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8414a:	2c0f      	cmp	r4, #15
   8414c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   84150:	d919      	bls.n	84186 <memset+0x66>
   84152:	4626      	mov	r6, r4
   84154:	f103 0210 	add.w	r2, r3, #16
   84158:	3e10      	subs	r6, #16
   8415a:	2e0f      	cmp	r6, #15
   8415c:	f842 5c10 	str.w	r5, [r2, #-16]
   84160:	f842 5c0c 	str.w	r5, [r2, #-12]
   84164:	f842 5c08 	str.w	r5, [r2, #-8]
   84168:	f842 5c04 	str.w	r5, [r2, #-4]
   8416c:	f102 0210 	add.w	r2, r2, #16
   84170:	d8f2      	bhi.n	84158 <memset+0x38>
   84172:	f1a4 0210 	sub.w	r2, r4, #16
   84176:	f022 020f 	bic.w	r2, r2, #15
   8417a:	f004 040f 	and.w	r4, r4, #15
   8417e:	3210      	adds	r2, #16
   84180:	2c03      	cmp	r4, #3
   84182:	4413      	add	r3, r2
   84184:	d90d      	bls.n	841a2 <memset+0x82>
   84186:	461e      	mov	r6, r3
   84188:	4622      	mov	r2, r4
   8418a:	3a04      	subs	r2, #4
   8418c:	2a03      	cmp	r2, #3
   8418e:	f846 5b04 	str.w	r5, [r6], #4
   84192:	d8fa      	bhi.n	8418a <memset+0x6a>
   84194:	1f22      	subs	r2, r4, #4
   84196:	f022 0203 	bic.w	r2, r2, #3
   8419a:	3204      	adds	r2, #4
   8419c:	4413      	add	r3, r2
   8419e:	f004 0403 	and.w	r4, r4, #3
   841a2:	b12c      	cbz	r4, 841b0 <memset+0x90>
   841a4:	b2c9      	uxtb	r1, r1
   841a6:	441c      	add	r4, r3
   841a8:	f803 1b01 	strb.w	r1, [r3], #1
   841ac:	42a3      	cmp	r3, r4
   841ae:	d1fb      	bne.n	841a8 <memset+0x88>
   841b0:	bc70      	pop	{r4, r5, r6}
   841b2:	4770      	bx	lr
   841b4:	4614      	mov	r4, r2
   841b6:	4603      	mov	r3, r0
   841b8:	e7c2      	b.n	84140 <memset+0x20>
   841ba:	bf00      	nop

000841bc <register_fini>:
   841bc:	4b02      	ldr	r3, [pc, #8]	; (841c8 <register_fini+0xc>)
   841be:	b113      	cbz	r3, 841c6 <register_fini+0xa>
   841c0:	4802      	ldr	r0, [pc, #8]	; (841cc <register_fini+0x10>)
   841c2:	f000 b805 	b.w	841d0 <atexit>
   841c6:	4770      	bx	lr
   841c8:	00000000 	.word	0x00000000
   841cc:	000841dd 	.word	0x000841dd

000841d0 <atexit>:
   841d0:	4601      	mov	r1, r0
   841d2:	2000      	movs	r0, #0
   841d4:	4602      	mov	r2, r0
   841d6:	4603      	mov	r3, r0
   841d8:	f000 b816 	b.w	84208 <__register_exitproc>

000841dc <__libc_fini_array>:
   841dc:	b538      	push	{r3, r4, r5, lr}
   841de:	4b08      	ldr	r3, [pc, #32]	; (84200 <__libc_fini_array+0x24>)
   841e0:	4d08      	ldr	r5, [pc, #32]	; (84204 <__libc_fini_array+0x28>)
   841e2:	1aed      	subs	r5, r5, r3
   841e4:	10ac      	asrs	r4, r5, #2
   841e6:	bf18      	it	ne
   841e8:	18ed      	addne	r5, r5, r3
   841ea:	d005      	beq.n	841f8 <__libc_fini_array+0x1c>
   841ec:	3c01      	subs	r4, #1
   841ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   841f2:	4798      	blx	r3
   841f4:	2c00      	cmp	r4, #0
   841f6:	d1f9      	bne.n	841ec <__libc_fini_array+0x10>
   841f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   841fc:	f000 ba68 	b.w	846d0 <_fini>
   84200:	000846dc 	.word	0x000846dc
   84204:	000846e0 	.word	0x000846e0

00084208 <__register_exitproc>:
   84208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8420c:	4c25      	ldr	r4, [pc, #148]	; (842a4 <__register_exitproc+0x9c>)
   8420e:	4606      	mov	r6, r0
   84210:	6825      	ldr	r5, [r4, #0]
   84212:	4688      	mov	r8, r1
   84214:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   84218:	4692      	mov	sl, r2
   8421a:	4699      	mov	r9, r3
   8421c:	b3c4      	cbz	r4, 84290 <__register_exitproc+0x88>
   8421e:	6860      	ldr	r0, [r4, #4]
   84220:	281f      	cmp	r0, #31
   84222:	dc17      	bgt.n	84254 <__register_exitproc+0x4c>
   84224:	1c41      	adds	r1, r0, #1
   84226:	b176      	cbz	r6, 84246 <__register_exitproc+0x3e>
   84228:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   8422c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   84230:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   84234:	2201      	movs	r2, #1
   84236:	4082      	lsls	r2, r0
   84238:	4315      	orrs	r5, r2
   8423a:	2e02      	cmp	r6, #2
   8423c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   84240:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   84244:	d01e      	beq.n	84284 <__register_exitproc+0x7c>
   84246:	1c83      	adds	r3, r0, #2
   84248:	6061      	str	r1, [r4, #4]
   8424a:	2000      	movs	r0, #0
   8424c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   84250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84254:	4b14      	ldr	r3, [pc, #80]	; (842a8 <__register_exitproc+0xa0>)
   84256:	b303      	cbz	r3, 8429a <__register_exitproc+0x92>
   84258:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8425c:	f3af 8000 	nop.w
   84260:	4604      	mov	r4, r0
   84262:	b1d0      	cbz	r0, 8429a <__register_exitproc+0x92>
   84264:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   84268:	2700      	movs	r7, #0
   8426a:	e884 0088 	stmia.w	r4, {r3, r7}
   8426e:	4638      	mov	r0, r7
   84270:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   84274:	2101      	movs	r1, #1
   84276:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   8427a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   8427e:	2e00      	cmp	r6, #0
   84280:	d0e1      	beq.n	84246 <__register_exitproc+0x3e>
   84282:	e7d1      	b.n	84228 <__register_exitproc+0x20>
   84284:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84288:	431a      	orrs	r2, r3
   8428a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8428e:	e7da      	b.n	84246 <__register_exitproc+0x3e>
   84290:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   84294:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   84298:	e7c1      	b.n	8421e <__register_exitproc+0x16>
   8429a:	f04f 30ff 	mov.w	r0, #4294967295
   8429e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   842a2:	bf00      	nop
   842a4:	000846b8 	.word	0x000846b8
   842a8:	00000000 	.word	0x00000000
   842ac:	31303030 	.word	0x31303030
   842b0:	00000000 	.word	0x00000000

000842b4 <keyMap>:
	...
   842f4:	00000029 0000002b 00000035 0000001e     )...+...5.......
   84304:	00000014 00000004 0000001d 00000000     ................
   84314:	00000000 00000039 0000003a 0000001f     ....9...:.......
   84324:	0000001a 00000016 0000001b 00000000     ................
   84334:	0000003d 0000003c 0000003b 00000020     =...<...;... ...
   84344:	00000008 00000007 00000006 00000000     ................
   84354:	0000000a 00000017 00000022 00000021     ........"...!...
   84364:	00000015 00000009 00000019 00000005     ................
   84374:	0000003e 0000002a 00000042 00000043     >...*...B...C...
	...
   8438c:	00000028 0000002c 0000000b 0000001c     (...,...........
   8439c:	00000023 00000024 00000018 0000000d     #...$...........
   843ac:	00000010 00000011 0000003f 00000030     ........?...0...
   843bc:	0000002e 00000025 0000000c 0000000e     ....%...........
   843cc:	00000036 00000000 00000000 00000040     6...........@...
   843dc:	00000041 00000026 00000012 0000000f     A...&...........
   843ec:	00000037 00000000 00000000 0000002f     7.........../...
   843fc:	0000002d 00000027 00000013 00000033     -...'.......3...
   8440c:	00000000 00000038 00000000 00000000     ....8...........
   8441c:	0000004c 00000044 00000000 00000000     L...D...........
   8442c:	00000053 00000051 00000000 00000000     S...Q...........
   8443c:	00000049 00000000 00000000 00000000     I...............
   8444c:	00000000 0000004f 00000000 00000000     ....O...........
   8445c:	0000004b 0000004e 00000000 00000000     K...N...........
	...
   84474:	00000052 00000000 0000004a 0000004d     R.......J...M...
	...
   8448c:	00000048 00000050 00000000 00000000     H...P...........
   8449c:	00000000 00000046 00000047 00000000     ....F...G.......
	...

000844b4 <modifierMap>:
	...
   844bc:	00000001 00000000 00000000 00000010     ................
	...
   844d8:	00000002 00000000 00000000 00000000     ................
   844e8:	00000000 00000020 00000000 00000000     .... ...........
	...
   84694:	00000004 00000000 00000000 00000000     ................
	...
   846b0:	00000040 00000043                       @...C...

000846b8 <_global_impure_ptr>:
   846b8:	200702d8                                ... 

000846bc <_init>:
   846bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   846be:	bf00      	nop
   846c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   846c2:	bc08      	pop	{r3}
   846c4:	469e      	mov	lr, r3
   846c6:	4770      	bx	lr

000846c8 <__init_array_start>:
   846c8:	000841bd 	.word	0x000841bd

000846cc <__frame_dummy_init_array_entry>:
   846cc:	00080119                                ....

000846d0 <_fini>:
   846d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   846d2:	bf00      	nop
   846d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   846d6:	bc08      	pop	{r3}
   846d8:	469e      	mov	lr, r3
   846da:	4770      	bx	lr

000846dc <__fini_array_start>:
   846dc:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
__no_inline
RAMFUNC
void SystemInit(void)
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	46bd      	mov	sp, r7
200700aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	2007026c 	.word	0x2007026c
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
	}
}
20070166:	370c      	adds	r7, #12
20070168:	46bd      	mov	sp, r7
2007016a:	f85d 7b04 	ldr.w	r7, [sp], #4
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <udi_api_hid_kbd>:
2007018c:	000801d9 00080225 00080235 00080261     ....%...5...a...
2007019c:	00000000                                ....

200701a0 <udi_hid_kbd_report_desc>:
200701a0:	06090105 070501a1 e729e019 01250015     ..........)...%.
200701b0:	08950175 01810281 65290019 65250015     u.........)e..%e
200701c0:	06950875 08050081 05290119 01250015     u.........)...%.
200701d0:	05950175 03950291 00c00191              u...........

200701dc <udc_string_desc_languageid>:
200701dc:	04090304                                ....

200701e0 <udc_string_manufacturer_name>:
200701e0:	6977654c 6f502073 72657472 00000000     Lewis Porter....

200701f0 <udc_string_product_name>:
200701f0:	65646f4d 53554d6c 00000042              ModelMUSB...

200701fc <udc_string_desc>:
200701fc:	00000300 00000000 00000000 00000000     ................
	...

20070218 <udc_device_desc>:
20070218:	02000112 08000000 48256666 02010100     ........ff%H....
20070228:	00000103                                ....

2007022c <udc_desc>:
2007022c:	00220209 80000101 00040932 00030100     ..".....2.......
2007023c:	21090001 01000111 07003b22 08038105     ...!....";......
2007024c:	00000200                                ....

20070250 <udi_apis>:
20070250:	2007018c                                ... 

20070254 <udc_config_fshs>:
20070254:	2007022c 20070250                       ,.. P.. 

2007025c <udc_config>:
2007025c:	20070218 20070254 00000000              ... T.. ....

20070268 <g_interrupt_enabled>:
20070268:	00000001                                ....

2007026c <SystemCoreClock>:
2007026c:	003d0900                                ..=.

20070270 <rowPins>:
20070270:	0000003a 0000000e 0000000f 00000060     :...........`...
20070280:	00000061 00000062 00000063 00000066     a...b...c...f...
20070290:	00000069 00000007 0000006a 00000041     i.......j...A...
200702a0:	00000042 00000043 00000044 00000045     B...C...D...E...

200702b0 <columnPins>:
200702b0:	00000046 00000047 00000048 00000049     F...G...H...I...
200702c0:	00000013 00000014 00000053 00000052     ........S...R...

200702d0 <keyboardEnabledFlag>:
200702d0:	00000001 00000000                       ........

200702d8 <impure_data>:
200702d8:	00000000 200705c4 2007062c 20070694     ....... ,.. ... 
	...
2007030c:	000846b4 00000000 00000000 00000000     .F..............
	...
20070380:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070390:	0005deec 0000000b 00000000 00000000     ................
	...
