
ModelMUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004388  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000700  20070000  00084388  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000184  20070700  00084a88  00010700  2**2
                  ALLOC
  3 .stack        00002004  20070884  00084c0c  00010700  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010700  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010729  2**0
                  CONTENTS, READONLY
  6 .debug_info   000097a3  00000000  00000000  00010784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ddd  00000000  00000000  00019f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000938  00000000  00000000  0001bd04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  00018f93  00000000  00000000  0001c63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000e24f  00000000  00000000  000355cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0006c581  00000000  00000000  0004381e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000049ea  00000000  00000000  000afd9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000830  00000000  00000000  000b4789  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002458  00000000  00000000  000b4fbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072888 	.word	0x20072888
   80004:	0008398d 	.word	0x0008398d
   80008:	00083985 	.word	0x00083985
   8000c:	00083985 	.word	0x00083985
   80010:	00083985 	.word	0x00083985
   80014:	00083985 	.word	0x00083985
   80018:	00083985 	.word	0x00083985
	...
   8002c:	00083985 	.word	0x00083985
   80030:	00083985 	.word	0x00083985
   80034:	00000000 	.word	0x00000000
   80038:	00083985 	.word	0x00083985
   8003c:	00083985 	.word	0x00083985
   80040:	00083985 	.word	0x00083985
   80044:	00083985 	.word	0x00083985
   80048:	00083985 	.word	0x00083985
   8004c:	00083985 	.word	0x00083985
   80050:	00083985 	.word	0x00083985
   80054:	00083985 	.word	0x00083985
   80058:	00083985 	.word	0x00083985
   8005c:	00083985 	.word	0x00083985
   80060:	00083985 	.word	0x00083985
   80064:	00083985 	.word	0x00083985
   80068:	00000000 	.word	0x00000000
   8006c:	00083599 	.word	0x00083599
   80070:	000835b1 	.word	0x000835b1
   80074:	000835c9 	.word	0x000835c9
   80078:	000835e1 	.word	0x000835e1
	...
   80084:	00083985 	.word	0x00083985
   80088:	00083985 	.word	0x00083985
   8008c:	00083985 	.word	0x00083985
   80090:	00083985 	.word	0x00083985
   80094:	00083985 	.word	0x00083985
   80098:	00083985 	.word	0x00083985
   8009c:	00083985 	.word	0x00083985
   800a0:	00083985 	.word	0x00083985
   800a4:	00000000 	.word	0x00000000
   800a8:	00083985 	.word	0x00083985
   800ac:	00083985 	.word	0x00083985
   800b0:	00083985 	.word	0x00083985
   800b4:	00083985 	.word	0x00083985
   800b8:	00083985 	.word	0x00083985
   800bc:	00083985 	.word	0x00083985
   800c0:	00083985 	.word	0x00083985
   800c4:	00083985 	.word	0x00083985
   800c8:	00083985 	.word	0x00083985
   800cc:	00083985 	.word	0x00083985
   800d0:	00083985 	.word	0x00083985
   800d4:	00083985 	.word	0x00083985
   800d8:	00083985 	.word	0x00083985
   800dc:	00083985 	.word	0x00083985
   800e0:	00081281 	.word	0x00081281
   800e4:	00083985 	.word	0x00083985
   800e8:	00083985 	.word	0x00083985
   800ec:	00083985 	.word	0x00083985
   800f0:	00083985 	.word	0x00083985

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070700 	.word	0x20070700
   80110:	00000000 	.word	0x00000000
   80114:	00084388 	.word	0x00084388

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00084388 	.word	0x00084388
   80144:	20070704 	.word	0x20070704
   80148:	00084388 	.word	0x00084388
   8014c:	00000000 	.word	0x00000000

00080150 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   80150:	b480      	push	{r7}
   80152:	b083      	sub	sp, #12
   80154:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80156:	f3ef 8310 	mrs	r3, PRIMASK
   8015a:	603b      	str	r3, [r7, #0]
  return(result);
   8015c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   8015e:	2b00      	cmp	r3, #0
   80160:	bf0c      	ite	eq
   80162:	2301      	moveq	r3, #1
   80164:	2300      	movne	r3, #0
   80166:	b2db      	uxtb	r3, r3
   80168:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8016a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8016c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80170:	4b04      	ldr	r3, [pc, #16]	; (80184 <cpu_irq_save+0x34>)
   80172:	2200      	movs	r2, #0
   80174:	701a      	strb	r2, [r3, #0]
	return flags;
   80176:	687b      	ldr	r3, [r7, #4]
}
   80178:	4618      	mov	r0, r3
   8017a:	370c      	adds	r7, #12
   8017c:	46bd      	mov	sp, r7
   8017e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80182:	4770      	bx	lr
   80184:	20070268 	.word	0x20070268

00080188 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   80188:	b480      	push	{r7}
   8018a:	b083      	sub	sp, #12
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
	return (flags);
   80190:	687b      	ldr	r3, [r7, #4]
   80192:	2b00      	cmp	r3, #0
   80194:	bf14      	ite	ne
   80196:	2301      	movne	r3, #1
   80198:	2300      	moveq	r3, #0
   8019a:	b2db      	uxtb	r3, r3
}
   8019c:	4618      	mov	r0, r3
   8019e:	370c      	adds	r7, #12
   801a0:	46bd      	mov	sp, r7
   801a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   801a6:	4770      	bx	lr

000801a8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   801a8:	b580      	push	{r7, lr}
   801aa:	b082      	sub	sp, #8
   801ac:	af00      	add	r7, sp, #0
   801ae:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   801b0:	6878      	ldr	r0, [r7, #4]
   801b2:	4b07      	ldr	r3, [pc, #28]	; (801d0 <cpu_irq_restore+0x28>)
   801b4:	4798      	blx	r3
   801b6:	4603      	mov	r3, r0
   801b8:	2b00      	cmp	r3, #0
   801ba:	d005      	beq.n	801c8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   801bc:	4b05      	ldr	r3, [pc, #20]	; (801d4 <cpu_irq_restore+0x2c>)
   801be:	2201      	movs	r2, #1
   801c0:	701a      	strb	r2, [r3, #0]
   801c2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   801c6:	b662      	cpsie	i
}
   801c8:	3708      	adds	r7, #8
   801ca:	46bd      	mov	sp, r7
   801cc:	bd80      	pop	{r7, pc}
   801ce:	bf00      	nop
   801d0:	00080189 	.word	0x00080189
   801d4:	20070268 	.word	0x20070268

000801d8 <udi_hid_kbd_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_kbd_enable(void)
{
   801d8:	b580      	push	{r7, lr}
   801da:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_kbd_rate = 0;
   801dc:	4b0a      	ldr	r3, [pc, #40]	; (80208 <udi_hid_kbd_enable+0x30>)
   801de:	2200      	movs	r2, #0
   801e0:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_protocol = 0;
   801e2:	4b0a      	ldr	r3, [pc, #40]	; (8020c <udi_hid_kbd_enable+0x34>)
   801e4:	2200      	movs	r2, #0
   801e6:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing = false;
   801e8:	4b09      	ldr	r3, [pc, #36]	; (80210 <udi_hid_kbd_enable+0x38>)
   801ea:	2200      	movs	r2, #0
   801ec:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
   801ee:	4809      	ldr	r0, [pc, #36]	; (80214 <udi_hid_kbd_enable+0x3c>)
   801f0:	2100      	movs	r1, #0
   801f2:	2208      	movs	r2, #8
   801f4:	4b08      	ldr	r3, [pc, #32]	; (80218 <udi_hid_kbd_enable+0x40>)
   801f6:	4798      	blx	r3
	udi_hid_kbd_b_report_valid = false;
   801f8:	4b08      	ldr	r3, [pc, #32]	; (8021c <udi_hid_kbd_enable+0x44>)
   801fa:	2200      	movs	r2, #0
   801fc:	701a      	strb	r2, [r3, #0]
	return UDI_HID_KBD_ENABLE_EXT();
   801fe:	4b08      	ldr	r3, [pc, #32]	; (80220 <udi_hid_kbd_enable+0x48>)
   80200:	4798      	blx	r3
   80202:	4603      	mov	r3, r0
}
   80204:	4618      	mov	r0, r3
   80206:	bd80      	pop	{r7, pc}
   80208:	2007071c 	.word	0x2007071c
   8020c:	20070720 	.word	0x20070720
   80210:	20070730 	.word	0x20070730
   80214:	20070728 	.word	0x20070728
   80218:	00083fe9 	.word	0x00083fe9
   8021c:	20070725 	.word	0x20070725
   80220:	00083d69 	.word	0x00083d69

00080224 <udi_hid_kbd_disable>:


void udi_hid_kbd_disable(void)
{
   80224:	b580      	push	{r7, lr}
   80226:	af00      	add	r7, sp, #0
	UDI_HID_KBD_DISABLE_EXT();
   80228:	4b01      	ldr	r3, [pc, #4]	; (80230 <udi_hid_kbd_disable+0xc>)
   8022a:	4798      	blx	r3
}
   8022c:	bd80      	pop	{r7, pc}
   8022e:	bf00      	nop
   80230:	00083d85 	.word	0x00083d85

00080234 <udi_hid_kbd_setup>:


bool udi_hid_kbd_setup(void)
{
   80234:	b598      	push	{r3, r4, r7, lr}
   80236:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_kbd_rate,
   80238:	4804      	ldr	r0, [pc, #16]	; (8024c <udi_hid_kbd_setup+0x18>)
   8023a:	4905      	ldr	r1, [pc, #20]	; (80250 <udi_hid_kbd_setup+0x1c>)
   8023c:	4a05      	ldr	r2, [pc, #20]	; (80254 <udi_hid_kbd_setup+0x20>)
   8023e:	4b06      	ldr	r3, [pc, #24]	; (80258 <udi_hid_kbd_setup+0x24>)
   80240:	4c06      	ldr	r4, [pc, #24]	; (8025c <udi_hid_kbd_setup+0x28>)
   80242:	47a0      	blx	r4
   80244:	4603      	mov	r3, r0
								&udi_hid_kbd_protocol,
								(uint8_t *) &udi_hid_kbd_report_desc,
								udi_hid_kbd_setreport);
}
   80246:	4618      	mov	r0, r3
   80248:	bd98      	pop	{r3, r4, r7, pc}
   8024a:	bf00      	nop
   8024c:	2007071c 	.word	0x2007071c
   80250:	20070720 	.word	0x20070720
   80254:	200701a0 	.word	0x200701a0
   80258:	00080271 	.word	0x00080271
   8025c:	00082b0d 	.word	0x00082b0d

00080260 <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
   80260:	b480      	push	{r7}
   80262:	af00      	add	r7, sp, #0
	return 0;
   80264:	2300      	movs	r3, #0
}
   80266:	4618      	mov	r0, r3
   80268:	46bd      	mov	sp, r7
   8026a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8026e:	4770      	bx	lr

00080270 <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
   80270:	b480      	push	{r7}
   80272:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
   80274:	4b10      	ldr	r3, [pc, #64]	; (802b8 <udi_hid_kbd_setreport+0x48>)
   80276:	885b      	ldrh	r3, [r3, #2]
   80278:	0a1b      	lsrs	r3, r3, #8
   8027a:	b29b      	uxth	r3, r3
   8027c:	2b02      	cmp	r3, #2
   8027e:	d114      	bne.n	802aa <udi_hid_kbd_setreport+0x3a>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
   80280:	4b0d      	ldr	r3, [pc, #52]	; (802b8 <udi_hid_kbd_setreport+0x48>)
   80282:	885b      	ldrh	r3, [r3, #2]
   80284:	b2db      	uxtb	r3, r3
   80286:	b29b      	uxth	r3, r3
   80288:	2b00      	cmp	r3, #0
   8028a:	d10e      	bne.n	802aa <udi_hid_kbd_setreport+0x3a>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
   8028c:	4b0a      	ldr	r3, [pc, #40]	; (802b8 <udi_hid_kbd_setreport+0x48>)
   8028e:	88db      	ldrh	r3, [r3, #6]
   80290:	2b01      	cmp	r3, #1
   80292:	d10a      	bne.n	802aa <udi_hid_kbd_setreport+0x3a>
		// Report OUT type on report ID 0 from USB Host
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
   80294:	4b08      	ldr	r3, [pc, #32]	; (802b8 <udi_hid_kbd_setreport+0x48>)
   80296:	4a09      	ldr	r2, [pc, #36]	; (802bc <udi_hid_kbd_setreport+0x4c>)
   80298:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
   8029a:	4b07      	ldr	r3, [pc, #28]	; (802b8 <udi_hid_kbd_setreport+0x48>)
   8029c:	4a08      	ldr	r2, [pc, #32]	; (802c0 <udi_hid_kbd_setreport+0x50>)
   8029e:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size = 1;
   802a0:	4b05      	ldr	r3, [pc, #20]	; (802b8 <udi_hid_kbd_setreport+0x48>)
   802a2:	2201      	movs	r2, #1
   802a4:	819a      	strh	r2, [r3, #12]
		return true;
   802a6:	2301      	movs	r3, #1
   802a8:	e000      	b.n	802ac <udi_hid_kbd_setreport+0x3c>
	}
	return false;
   802aa:	2300      	movs	r3, #0
}
   802ac:	4618      	mov	r0, r3
   802ae:	46bd      	mov	sp, r7
   802b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   802b4:	4770      	bx	lr
   802b6:	bf00      	nop
   802b8:	2007086c 	.word	0x2007086c
   802bc:	20070724 	.word	0x20070724
   802c0:	00080489 	.word	0x00080489

000802c4 <udi_hid_kbd_up>:
	return true;
}


bool udi_hid_kbd_up(uint8_t key_id)
{
   802c4:	b580      	push	{r7, lr}
   802c6:	b084      	sub	sp, #16
   802c8:	af00      	add	r7, sp, #0
   802ca:	4603      	mov	r3, r0
   802cc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	irqflags_t flags = cpu_irq_save();
   802ce:	4b21      	ldr	r3, [pc, #132]	; (80354 <udi_hid_kbd_up+0x90>)
   802d0:	4798      	blx	r3
   802d2:	60b8      	str	r0, [r7, #8]

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
   802d4:	2302      	movs	r3, #2
   802d6:	73fb      	strb	r3, [r7, #15]
   802d8:	e013      	b.n	80302 <udi_hid_kbd_up+0x3e>
		if (0 == udi_hid_kbd_report[i]) {
   802da:	7bfb      	ldrb	r3, [r7, #15]
   802dc:	4a1e      	ldr	r2, [pc, #120]	; (80358 <udi_hid_kbd_up+0x94>)
   802de:	5cd3      	ldrb	r3, [r2, r3]
   802e0:	2b00      	cmp	r3, #0
   802e2:	d104      	bne.n	802ee <udi_hid_kbd_up+0x2a>
			// Already removed
			cpu_irq_restore(flags);
   802e4:	68b8      	ldr	r0, [r7, #8]
   802e6:	4b1d      	ldr	r3, [pc, #116]	; (8035c <udi_hid_kbd_up+0x98>)
   802e8:	4798      	blx	r3
			return true;
   802ea:	2301      	movs	r3, #1
   802ec:	e02e      	b.n	8034c <udi_hid_kbd_up+0x88>
		}
		if (key_id == udi_hid_kbd_report[i])
   802ee:	7bfb      	ldrb	r3, [r7, #15]
   802f0:	4a19      	ldr	r2, [pc, #100]	; (80358 <udi_hid_kbd_up+0x94>)
   802f2:	5cd3      	ldrb	r3, [r2, r3]
   802f4:	79fa      	ldrb	r2, [r7, #7]
   802f6:	429a      	cmp	r2, r3
   802f8:	d100      	bne.n	802fc <udi_hid_kbd_up+0x38>
			break;
   802fa:	e005      	b.n	80308 <udi_hid_kbd_up+0x44>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
   802fc:	7bfb      	ldrb	r3, [r7, #15]
   802fe:	3301      	adds	r3, #1
   80300:	73fb      	strb	r3, [r7, #15]
   80302:	7bfb      	ldrb	r3, [r7, #15]
   80304:	2b07      	cmp	r3, #7
   80306:	d9e8      	bls.n	802da <udi_hid_kbd_up+0x16>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
   80308:	7bfb      	ldrb	r3, [r7, #15]
   8030a:	2b08      	cmp	r3, #8
   8030c:	d104      	bne.n	80318 <udi_hid_kbd_up+0x54>
		// Already removed
		cpu_irq_restore(flags);
   8030e:	68b8      	ldr	r0, [r7, #8]
   80310:	4b12      	ldr	r3, [pc, #72]	; (8035c <udi_hid_kbd_up+0x98>)
   80312:	4798      	blx	r3
		return true;
   80314:	2301      	movs	r3, #1
   80316:	e019      	b.n	8034c <udi_hid_kbd_up+0x88>
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
   80318:	e009      	b.n	8032e <udi_hid_kbd_up+0x6a>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
   8031a:	7bfb      	ldrb	r3, [r7, #15]
   8031c:	7bfa      	ldrb	r2, [r7, #15]
   8031e:	3201      	adds	r2, #1
   80320:	490d      	ldr	r1, [pc, #52]	; (80358 <udi_hid_kbd_up+0x94>)
   80322:	5c89      	ldrb	r1, [r1, r2]
   80324:	4a0c      	ldr	r2, [pc, #48]	; (80358 <udi_hid_kbd_up+0x94>)
   80326:	54d1      	strb	r1, [r2, r3]
		i++;
   80328:	7bfb      	ldrb	r3, [r7, #15]
   8032a:	3301      	adds	r3, #1
   8032c:	73fb      	strb	r3, [r7, #15]
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
   8032e:	7bfb      	ldrb	r3, [r7, #15]
   80330:	2b06      	cmp	r3, #6
   80332:	d9f2      	bls.n	8031a <udi_hid_kbd_up+0x56>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
   80334:	4b08      	ldr	r3, [pc, #32]	; (80358 <udi_hid_kbd_up+0x94>)
   80336:	2200      	movs	r2, #0
   80338:	71da      	strb	r2, [r3, #7]
	udi_hid_kbd_b_report_valid = true;
   8033a:	4b09      	ldr	r3, [pc, #36]	; (80360 <udi_hid_kbd_up+0x9c>)
   8033c:	2201      	movs	r2, #1
   8033e:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
   80340:	4b08      	ldr	r3, [pc, #32]	; (80364 <udi_hid_kbd_up+0xa0>)
   80342:	4798      	blx	r3

	cpu_irq_restore(flags);
   80344:	68b8      	ldr	r0, [r7, #8]
   80346:	4b05      	ldr	r3, [pc, #20]	; (8035c <udi_hid_kbd_up+0x98>)
   80348:	4798      	blx	r3
	return true;
   8034a:	2301      	movs	r3, #1
}
   8034c:	4618      	mov	r0, r3
   8034e:	3710      	adds	r7, #16
   80350:	46bd      	mov	sp, r7
   80352:	bd80      	pop	{r7, pc}
   80354:	00080151 	.word	0x00080151
   80358:	20070728 	.word	0x20070728
   8035c:	000801a9 	.word	0x000801a9
   80360:	20070725 	.word	0x20070725
   80364:	000803f5 	.word	0x000803f5

00080368 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
   80368:	b580      	push	{r7, lr}
   8036a:	b084      	sub	sp, #16
   8036c:	af00      	add	r7, sp, #0
   8036e:	4603      	mov	r3, r0
   80370:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	irqflags_t flags = cpu_irq_save();
   80372:	4b1b      	ldr	r3, [pc, #108]	; (803e0 <udi_hid_kbd_down+0x78>)
   80374:	4798      	blx	r3
   80376:	60b8      	str	r0, [r7, #8]

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
   80378:	2302      	movs	r3, #2
   8037a:	73fb      	strb	r3, [r7, #15]
   8037c:	e013      	b.n	803a6 <udi_hid_kbd_down+0x3e>
		if (0 == udi_hid_kbd_report[i])
   8037e:	7bfb      	ldrb	r3, [r7, #15]
   80380:	4a18      	ldr	r2, [pc, #96]	; (803e4 <udi_hid_kbd_down+0x7c>)
   80382:	5cd3      	ldrb	r3, [r2, r3]
   80384:	2b00      	cmp	r3, #0
   80386:	d100      	bne.n	8038a <udi_hid_kbd_down+0x22>
			break;
   80388:	e010      	b.n	803ac <udi_hid_kbd_down+0x44>
		if (key_id == udi_hid_kbd_report[i]) {
   8038a:	7bfb      	ldrb	r3, [r7, #15]
   8038c:	4a15      	ldr	r2, [pc, #84]	; (803e4 <udi_hid_kbd_down+0x7c>)
   8038e:	5cd3      	ldrb	r3, [r2, r3]
   80390:	79fa      	ldrb	r2, [r7, #7]
   80392:	429a      	cmp	r2, r3
   80394:	d104      	bne.n	803a0 <udi_hid_kbd_down+0x38>
			// Already in array
			cpu_irq_restore(flags);
   80396:	68b8      	ldr	r0, [r7, #8]
   80398:	4b13      	ldr	r3, [pc, #76]	; (803e8 <udi_hid_kbd_down+0x80>)
   8039a:	4798      	blx	r3
			return true;
   8039c:	2301      	movs	r3, #1
   8039e:	e01a      	b.n	803d6 <udi_hid_kbd_down+0x6e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
   803a0:	7bfb      	ldrb	r3, [r7, #15]
   803a2:	3301      	adds	r3, #1
   803a4:	73fb      	strb	r3, [r7, #15]
   803a6:	7bfb      	ldrb	r3, [r7, #15]
   803a8:	2b07      	cmp	r3, #7
   803aa:	d9e8      	bls.n	8037e <udi_hid_kbd_down+0x16>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
   803ac:	7bfb      	ldrb	r3, [r7, #15]
   803ae:	2b08      	cmp	r3, #8
   803b0:	d104      	bne.n	803bc <udi_hid_kbd_down+0x54>
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
   803b2:	68b8      	ldr	r0, [r7, #8]
   803b4:	4b0c      	ldr	r3, [pc, #48]	; (803e8 <udi_hid_kbd_down+0x80>)
   803b6:	4798      	blx	r3
		return false;
   803b8:	2300      	movs	r3, #0
   803ba:	e00c      	b.n	803d6 <udi_hid_kbd_down+0x6e>
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
   803bc:	7bfb      	ldrb	r3, [r7, #15]
   803be:	4909      	ldr	r1, [pc, #36]	; (803e4 <udi_hid_kbd_down+0x7c>)
   803c0:	79fa      	ldrb	r2, [r7, #7]
   803c2:	54ca      	strb	r2, [r1, r3]
	udi_hid_kbd_b_report_valid = true;
   803c4:	4b09      	ldr	r3, [pc, #36]	; (803ec <udi_hid_kbd_down+0x84>)
   803c6:	2201      	movs	r2, #1
   803c8:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
   803ca:	4b09      	ldr	r3, [pc, #36]	; (803f0 <udi_hid_kbd_down+0x88>)
   803cc:	4798      	blx	r3

	// Enable IT
	cpu_irq_restore(flags);
   803ce:	68b8      	ldr	r0, [r7, #8]
   803d0:	4b05      	ldr	r3, [pc, #20]	; (803e8 <udi_hid_kbd_down+0x80>)
   803d2:	4798      	blx	r3
	return true;
   803d4:	2301      	movs	r3, #1
}
   803d6:	4618      	mov	r0, r3
   803d8:	3710      	adds	r7, #16
   803da:	46bd      	mov	sp, r7
   803dc:	bd80      	pop	{r7, pc}
   803de:	bf00      	nop
   803e0:	00080151 	.word	0x00080151
   803e4:	20070728 	.word	0x20070728
   803e8:	000801a9 	.word	0x000801a9
   803ec:	20070725 	.word	0x20070725
   803f0:	000803f5 	.word	0x000803f5

000803f4 <udi_hid_kbd_send_report>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
   803f4:	b590      	push	{r4, r7, lr}
   803f6:	b083      	sub	sp, #12
   803f8:	af02      	add	r7, sp, #8
	if (udi_hid_kbd_b_report_trans_ongoing)
   803fa:	4b10      	ldr	r3, [pc, #64]	; (8043c <udi_hid_kbd_send_report+0x48>)
   803fc:	781b      	ldrb	r3, [r3, #0]
   803fe:	2b00      	cmp	r3, #0
   80400:	d001      	beq.n	80406 <udi_hid_kbd_send_report+0x12>
		return false;
   80402:	2300      	movs	r3, #0
   80404:	e016      	b.n	80434 <udi_hid_kbd_send_report+0x40>
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
   80406:	4b0e      	ldr	r3, [pc, #56]	; (80440 <udi_hid_kbd_send_report+0x4c>)
   80408:	4a0e      	ldr	r2, [pc, #56]	; (80444 <udi_hid_kbd_send_report+0x50>)
   8040a:	e892 0003 	ldmia.w	r2, {r0, r1}
   8040e:	e883 0003 	stmia.w	r3, {r0, r1}
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
   80412:	4b0d      	ldr	r3, [pc, #52]	; (80448 <udi_hid_kbd_send_report+0x54>)
   80414:	2200      	movs	r2, #0
   80416:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing =
			udd_ep_run(	UDI_HID_KBD_EP_IN,
   80418:	4b0c      	ldr	r3, [pc, #48]	; (8044c <udi_hid_kbd_send_report+0x58>)
   8041a:	9300      	str	r3, [sp, #0]
   8041c:	2081      	movs	r0, #129	; 0x81
   8041e:	2100      	movs	r1, #0
   80420:	4a07      	ldr	r2, [pc, #28]	; (80440 <udi_hid_kbd_send_report+0x4c>)
   80422:	2308      	movs	r3, #8
   80424:	4c0a      	ldr	r4, [pc, #40]	; (80450 <udi_hid_kbd_send_report+0x5c>)
   80426:	47a0      	blx	r4
   80428:	4603      	mov	r3, r0
   8042a:	461a      	mov	r2, r3
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
	udi_hid_kbd_b_report_trans_ongoing =
   8042c:	4b03      	ldr	r3, [pc, #12]	; (8043c <udi_hid_kbd_send_report+0x48>)
   8042e:	701a      	strb	r2, [r3, #0]
			udd_ep_run(	UDI_HID_KBD_EP_IN,
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
   80430:	4b02      	ldr	r3, [pc, #8]	; (8043c <udi_hid_kbd_send_report+0x48>)
   80432:	781b      	ldrb	r3, [r3, #0]
}
   80434:	4618      	mov	r0, r3
   80436:	3704      	adds	r7, #4
   80438:	46bd      	mov	sp, r7
   8043a:	bd90      	pop	{r4, r7, pc}
   8043c:	20070730 	.word	0x20070730
   80440:	20070734 	.word	0x20070734
   80444:	20070728 	.word	0x20070728
   80448:	20070725 	.word	0x20070725
   8044c:	00080455 	.word	0x00080455
   80450:	00081d1d 	.word	0x00081d1d

00080454 <udi_hid_kbd_report_sent>:

static void udi_hid_kbd_report_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   80454:	b580      	push	{r7, lr}
   80456:	b082      	sub	sp, #8
   80458:	af00      	add	r7, sp, #0
   8045a:	4603      	mov	r3, r0
   8045c:	6039      	str	r1, [r7, #0]
   8045e:	71fb      	strb	r3, [r7, #7]
   80460:	4613      	mov	r3, r2
   80462:	71bb      	strb	r3, [r7, #6]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_kbd_b_report_trans_ongoing = false;
   80464:	4b05      	ldr	r3, [pc, #20]	; (8047c <udi_hid_kbd_report_sent+0x28>)
   80466:	2200      	movs	r2, #0
   80468:	701a      	strb	r2, [r3, #0]
	if (udi_hid_kbd_b_report_valid) {
   8046a:	4b05      	ldr	r3, [pc, #20]	; (80480 <udi_hid_kbd_report_sent+0x2c>)
   8046c:	781b      	ldrb	r3, [r3, #0]
   8046e:	2b00      	cmp	r3, #0
   80470:	d001      	beq.n	80476 <udi_hid_kbd_report_sent+0x22>
		udi_hid_kbd_send_report();
   80472:	4b04      	ldr	r3, [pc, #16]	; (80484 <udi_hid_kbd_report_sent+0x30>)
   80474:	4798      	blx	r3
	}
}
   80476:	3708      	adds	r7, #8
   80478:	46bd      	mov	sp, r7
   8047a:	bd80      	pop	{r7, pc}
   8047c:	20070730 	.word	0x20070730
   80480:	20070725 	.word	0x20070725
   80484:	000803f5 	.word	0x000803f5

00080488 <udi_hid_kbd_setreport_valid>:

static void udi_hid_kbd_setreport_valid(void)
{
   80488:	b480      	push	{r7}
   8048a:	af00      	add	r7, sp, #0
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
}
   8048c:	46bd      	mov	sp, r7
   8048e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80492:	4770      	bx	lr

00080494 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
   80494:	b480      	push	{r7}
   80496:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
   80498:	4b02      	ldr	r3, [pc, #8]	; (804a4 <udc_get_string_serial_name+0x10>)
	}
   8049a:	4618      	mov	r0, r3
   8049c:	46bd      	mov	sp, r7
   8049e:	f85d 7b04 	ldr.w	r7, [sp], #4
   804a2:	4770      	bx	lr
   804a4:	00084174 	.word	0x00084174

000804a8 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   804a8:	b480      	push	{r7}
   804aa:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   804ac:	4b03      	ldr	r3, [pc, #12]	; (804bc <udc_get_interface_desc+0x14>)
   804ae:	681b      	ldr	r3, [r3, #0]
}
   804b0:	4618      	mov	r0, r3
   804b2:	46bd      	mov	sp, r7
   804b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   804b8:	4770      	bx	lr
   804ba:	bf00      	nop
   804bc:	2007074c 	.word	0x2007074c

000804c0 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   804c0:	b480      	push	{r7}
   804c2:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   804c4:	4b06      	ldr	r3, [pc, #24]	; (804e0 <udc_get_eof_conf+0x20>)
   804c6:	681b      	ldr	r3, [r3, #0]
   804c8:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   804ca:	4a05      	ldr	r2, [pc, #20]	; (804e0 <udc_get_eof_conf+0x20>)
   804cc:	6812      	ldr	r2, [r2, #0]
   804ce:	6812      	ldr	r2, [r2, #0]
   804d0:	8852      	ldrh	r2, [r2, #2]
   804d2:	b292      	uxth	r2, r2
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   804d4:	4413      	add	r3, r2
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
   804d6:	4618      	mov	r0, r3
   804d8:	46bd      	mov	sp, r7
   804da:	f85d 7b04 	ldr.w	r7, [sp], #4
   804de:	4770      	bx	lr
   804e0:	20070748 	.word	0x20070748

000804e4 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   804e4:	b580      	push	{r7, lr}
   804e6:	b084      	sub	sp, #16
   804e8:	af00      	add	r7, sp, #0
   804ea:	6078      	str	r0, [r7, #4]
   804ec:	460b      	mov	r3, r1
   804ee:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   804f0:	4b12      	ldr	r3, [pc, #72]	; (8053c <udc_next_desc_in_iface+0x58>)
   804f2:	4798      	blx	r3
   804f4:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   804f6:	687b      	ldr	r3, [r7, #4]
   804f8:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   804fa:	461a      	mov	r2, r3
   804fc:	687b      	ldr	r3, [r7, #4]
   804fe:	4413      	add	r3, r2
   80500:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   80502:	e011      	b.n	80528 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   80504:	687b      	ldr	r3, [r7, #4]
   80506:	785b      	ldrb	r3, [r3, #1]
   80508:	2b04      	cmp	r3, #4
   8050a:	d100      	bne.n	8050e <udc_next_desc_in_iface+0x2a>
			break; // End of global interface descriptor
   8050c:	e010      	b.n	80530 <udc_next_desc_in_iface+0x4c>
		}
		if (desc_id == desc->bDescriptorType) {
   8050e:	687b      	ldr	r3, [r7, #4]
   80510:	785b      	ldrb	r3, [r3, #1]
   80512:	78fa      	ldrb	r2, [r7, #3]
   80514:	429a      	cmp	r2, r3
   80516:	d101      	bne.n	8051c <udc_next_desc_in_iface+0x38>
			return desc; // Specific descriptor found
   80518:	687b      	ldr	r3, [r7, #4]
   8051a:	e00a      	b.n	80532 <udc_next_desc_in_iface+0x4e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   8051c:	687b      	ldr	r3, [r7, #4]
   8051e:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   80520:	461a      	mov	r2, r3
   80522:	687b      	ldr	r3, [r7, #4]
   80524:	4413      	add	r3, r2
   80526:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   80528:	68fa      	ldr	r2, [r7, #12]
   8052a:	687b      	ldr	r3, [r7, #4]
   8052c:	429a      	cmp	r2, r3
   8052e:	d8e9      	bhi.n	80504 <udc_next_desc_in_iface+0x20>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   80530:	2300      	movs	r3, #0
}
   80532:	4618      	mov	r0, r3
   80534:	3710      	adds	r7, #16
   80536:	46bd      	mov	sp, r7
   80538:	bd80      	pop	{r7, pc}
   8053a:	bf00      	nop
   8053c:	000804c1 	.word	0x000804c1

00080540 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   80540:	b580      	push	{r7, lr}
   80542:	b084      	sub	sp, #16
   80544:	af00      	add	r7, sp, #0
   80546:	4603      	mov	r3, r0
   80548:	460a      	mov	r2, r1
   8054a:	71fb      	strb	r3, [r7, #7]
   8054c:	4613      	mov	r3, r2
   8054e:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   80550:	4b1e      	ldr	r3, [pc, #120]	; (805cc <udc_update_iface_desc+0x8c>)
   80552:	781b      	ldrb	r3, [r3, #0]
   80554:	2b00      	cmp	r3, #0
   80556:	d101      	bne.n	8055c <udc_update_iface_desc+0x1c>
		return false;
   80558:	2300      	movs	r3, #0
   8055a:	e032      	b.n	805c2 <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8055c:	4b1c      	ldr	r3, [pc, #112]	; (805d0 <udc_update_iface_desc+0x90>)
   8055e:	681b      	ldr	r3, [r3, #0]
   80560:	681b      	ldr	r3, [r3, #0]
   80562:	791b      	ldrb	r3, [r3, #4]
   80564:	79fa      	ldrb	r2, [r7, #7]
   80566:	429a      	cmp	r2, r3
   80568:	d301      	bcc.n	8056e <udc_update_iface_desc+0x2e>
		return false;
   8056a:	2300      	movs	r3, #0
   8056c:	e029      	b.n	805c2 <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   8056e:	4b18      	ldr	r3, [pc, #96]	; (805d0 <udc_update_iface_desc+0x90>)
   80570:	681b      	ldr	r3, [r3, #0]
   80572:	681b      	ldr	r3, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80574:	4a17      	ldr	r2, [pc, #92]	; (805d4 <udc_update_iface_desc+0x94>)
   80576:	6013      	str	r3, [r2, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   80578:	4b17      	ldr	r3, [pc, #92]	; (805d8 <udc_update_iface_desc+0x98>)
   8057a:	4798      	blx	r3
   8057c:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   8057e:	e01a      	b.n	805b6 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   80580:	4b14      	ldr	r3, [pc, #80]	; (805d4 <udc_update_iface_desc+0x94>)
   80582:	681b      	ldr	r3, [r3, #0]
   80584:	785b      	ldrb	r3, [r3, #1]
   80586:	2b04      	cmp	r3, #4
   80588:	d10d      	bne.n	805a6 <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8058a:	4b12      	ldr	r3, [pc, #72]	; (805d4 <udc_update_iface_desc+0x94>)
   8058c:	681b      	ldr	r3, [r3, #0]
   8058e:	789b      	ldrb	r3, [r3, #2]
   80590:	79fa      	ldrb	r2, [r7, #7]
   80592:	429a      	cmp	r2, r3
   80594:	d107      	bne.n	805a6 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   80596:	4b0f      	ldr	r3, [pc, #60]	; (805d4 <udc_update_iface_desc+0x94>)
   80598:	681b      	ldr	r3, [r3, #0]
   8059a:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8059c:	79ba      	ldrb	r2, [r7, #6]
   8059e:	429a      	cmp	r2, r3
   805a0:	d101      	bne.n	805a6 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   805a2:	2301      	movs	r3, #1
   805a4:	e00d      	b.n	805c2 <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   805a6:	4b0b      	ldr	r3, [pc, #44]	; (805d4 <udc_update_iface_desc+0x94>)
   805a8:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   805aa:	4a0a      	ldr	r2, [pc, #40]	; (805d4 <udc_update_iface_desc+0x94>)
   805ac:	6812      	ldr	r2, [r2, #0]
   805ae:	7812      	ldrb	r2, [r2, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   805b0:	4413      	add	r3, r2
   805b2:	4a08      	ldr	r2, [pc, #32]	; (805d4 <udc_update_iface_desc+0x94>)
   805b4:	6013      	str	r3, [r2, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   805b6:	4b07      	ldr	r3, [pc, #28]	; (805d4 <udc_update_iface_desc+0x94>)
   805b8:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   805ba:	68fa      	ldr	r2, [r7, #12]
   805bc:	429a      	cmp	r2, r3
   805be:	d8df      	bhi.n	80580 <udc_update_iface_desc+0x40>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   805c0:	2300      	movs	r3, #0
}
   805c2:	4618      	mov	r0, r3
   805c4:	3710      	adds	r7, #16
   805c6:	46bd      	mov	sp, r7
   805c8:	bd80      	pop	{r7, pc}
   805ca:	bf00      	nop
   805cc:	20070744 	.word	0x20070744
   805d0:	20070748 	.word	0x20070748
   805d4:	2007074c 	.word	0x2007074c
   805d8:	000804c1 	.word	0x000804c1

000805dc <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   805dc:	b580      	push	{r7, lr}
   805de:	b084      	sub	sp, #16
   805e0:	af00      	add	r7, sp, #0
   805e2:	4603      	mov	r3, r0
   805e4:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   805e6:	79fb      	ldrb	r3, [r7, #7]
   805e8:	4618      	mov	r0, r3
   805ea:	2100      	movs	r1, #0
   805ec:	4b1f      	ldr	r3, [pc, #124]	; (8066c <udc_iface_disable+0x90>)
   805ee:	4798      	blx	r3
   805f0:	4603      	mov	r3, r0
   805f2:	f083 0301 	eor.w	r3, r3, #1
   805f6:	b2db      	uxtb	r3, r3
   805f8:	2b00      	cmp	r3, #0
   805fa:	d001      	beq.n	80600 <udc_iface_disable+0x24>
		return false;
   805fc:	2300      	movs	r3, #0
   805fe:	e030      	b.n	80662 <udc_iface_disable+0x86>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80600:	4b1b      	ldr	r3, [pc, #108]	; (80670 <udc_iface_disable+0x94>)
   80602:	681b      	ldr	r3, [r3, #0]
   80604:	685a      	ldr	r2, [r3, #4]
   80606:	79fb      	ldrb	r3, [r7, #7]
   80608:	009b      	lsls	r3, r3, #2
   8060a:	4413      	add	r3, r2
   8060c:	681b      	ldr	r3, [r3, #0]
   8060e:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80610:	68bb      	ldr	r3, [r7, #8]
   80612:	68db      	ldr	r3, [r3, #12]
   80614:	4798      	blx	r3
   80616:	4603      	mov	r3, r0
   80618:	461a      	mov	r2, r3
   8061a:	79fb      	ldrb	r3, [r7, #7]
   8061c:	4618      	mov	r0, r3
   8061e:	4611      	mov	r1, r2
   80620:	4b12      	ldr	r3, [pc, #72]	; (8066c <udc_iface_disable+0x90>)
   80622:	4798      	blx	r3
   80624:	4603      	mov	r3, r0
   80626:	f083 0301 	eor.w	r3, r3, #1
   8062a:	b2db      	uxtb	r3, r3
   8062c:	2b00      	cmp	r3, #0
   8062e:	d001      	beq.n	80634 <udc_iface_disable+0x58>
		return false;
   80630:	2300      	movs	r3, #0
   80632:	e016      	b.n	80662 <udc_iface_disable+0x86>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   80634:	4b0f      	ldr	r3, [pc, #60]	; (80674 <udc_iface_disable+0x98>)
   80636:	681b      	ldr	r3, [r3, #0]
   80638:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8063a:	68f8      	ldr	r0, [r7, #12]
   8063c:	2105      	movs	r1, #5
   8063e:	4b0e      	ldr	r3, [pc, #56]	; (80678 <udc_iface_disable+0x9c>)
   80640:	4798      	blx	r3
   80642:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   80644:	68fb      	ldr	r3, [r7, #12]
   80646:	2b00      	cmp	r3, #0
   80648:	d105      	bne.n	80656 <udc_iface_disable+0x7a>
				break;
   8064a:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   8064c:	68bb      	ldr	r3, [r7, #8]
   8064e:	685b      	ldr	r3, [r3, #4]
   80650:	4798      	blx	r3
	return true;
   80652:	2301      	movs	r3, #1
   80654:	e005      	b.n	80662 <udc_iface_disable+0x86>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   80656:	68fb      	ldr	r3, [r7, #12]
   80658:	789b      	ldrb	r3, [r3, #2]
   8065a:	4618      	mov	r0, r3
   8065c:	4b07      	ldr	r3, [pc, #28]	; (8067c <udc_iface_disable+0xa0>)
   8065e:	4798      	blx	r3
		}
   80660:	e7eb      	b.n	8063a <udc_iface_disable+0x5e>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
   80662:	4618      	mov	r0, r3
   80664:	3710      	adds	r7, #16
   80666:	46bd      	mov	sp, r7
   80668:	bd80      	pop	{r7, pc}
   8066a:	bf00      	nop
   8066c:	00080541 	.word	0x00080541
   80670:	20070748 	.word	0x20070748
   80674:	2007074c 	.word	0x2007074c
   80678:	000804e5 	.word	0x000804e5
   8067c:	00081a25 	.word	0x00081a25

00080680 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   80680:	b580      	push	{r7, lr}
   80682:	b084      	sub	sp, #16
   80684:	af00      	add	r7, sp, #0
   80686:	4603      	mov	r3, r0
   80688:	460a      	mov	r2, r1
   8068a:	71fb      	strb	r3, [r7, #7]
   8068c:	4613      	mov	r3, r2
   8068e:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   80690:	79fa      	ldrb	r2, [r7, #7]
   80692:	79bb      	ldrb	r3, [r7, #6]
   80694:	4610      	mov	r0, r2
   80696:	4619      	mov	r1, r3
   80698:	4b1c      	ldr	r3, [pc, #112]	; (8070c <udc_iface_enable+0x8c>)
   8069a:	4798      	blx	r3
   8069c:	4603      	mov	r3, r0
   8069e:	f083 0301 	eor.w	r3, r3, #1
   806a2:	b2db      	uxtb	r3, r3
   806a4:	2b00      	cmp	r3, #0
   806a6:	d001      	beq.n	806ac <udc_iface_enable+0x2c>
		return false;
   806a8:	2300      	movs	r3, #0
   806aa:	e02b      	b.n	80704 <udc_iface_enable+0x84>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   806ac:	4b18      	ldr	r3, [pc, #96]	; (80710 <udc_iface_enable+0x90>)
   806ae:	681b      	ldr	r3, [r3, #0]
   806b0:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   806b2:	68f8      	ldr	r0, [r7, #12]
   806b4:	2105      	movs	r1, #5
   806b6:	4b17      	ldr	r3, [pc, #92]	; (80714 <udc_iface_enable+0x94>)
   806b8:	4798      	blx	r3
   806ba:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   806bc:	68fb      	ldr	r3, [r7, #12]
   806be:	2b00      	cmp	r3, #0
   806c0:	d10b      	bne.n	806da <udc_iface_enable+0x5a>
			break;
   806c2:	bf00      	nop
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   806c4:	4b14      	ldr	r3, [pc, #80]	; (80718 <udc_iface_enable+0x98>)
   806c6:	681b      	ldr	r3, [r3, #0]
   806c8:	685a      	ldr	r2, [r3, #4]
   806ca:	79fb      	ldrb	r3, [r7, #7]
   806cc:	009b      	lsls	r3, r3, #2
   806ce:	4413      	add	r3, r2
   806d0:	681b      	ldr	r3, [r3, #0]
   806d2:	681b      	ldr	r3, [r3, #0]
   806d4:	4798      	blx	r3
   806d6:	4603      	mov	r3, r0
   806d8:	e014      	b.n	80704 <udc_iface_enable+0x84>
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   806da:	68fb      	ldr	r3, [r7, #12]
   806dc:	7899      	ldrb	r1, [r3, #2]
   806de:	68fb      	ldr	r3, [r7, #12]
   806e0:	78da      	ldrb	r2, [r3, #3]
   806e2:	68fb      	ldr	r3, [r7, #12]
   806e4:	889b      	ldrh	r3, [r3, #4]
   806e6:	b29b      	uxth	r3, r3
   806e8:	4608      	mov	r0, r1
   806ea:	4611      	mov	r1, r2
   806ec:	461a      	mov	r2, r3
   806ee:	4b0b      	ldr	r3, [pc, #44]	; (8071c <udc_iface_enable+0x9c>)
   806f0:	4798      	blx	r3
   806f2:	4603      	mov	r3, r0
   806f4:	f083 0301 	eor.w	r3, r3, #1
   806f8:	b2db      	uxtb	r3, r3
   806fa:	2b00      	cmp	r3, #0
   806fc:	d001      	beq.n	80702 <udc_iface_enable+0x82>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   806fe:	2300      	movs	r3, #0
   80700:	e000      	b.n	80704 <udc_iface_enable+0x84>
		}
	}
   80702:	e7d6      	b.n	806b2 <udc_iface_enable+0x32>
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
   80704:	4618      	mov	r0, r3
   80706:	3710      	adds	r7, #16
   80708:	46bd      	mov	sp, r7
   8070a:	bd80      	pop	{r7, pc}
   8070c:	00080541 	.word	0x00080541
   80710:	2007074c 	.word	0x2007074c
   80714:	000804e5 	.word	0x000804e5
   80718:	20070748 	.word	0x20070748
   8071c:	00081729 	.word	0x00081729

00080720 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   80720:	b580      	push	{r7, lr}
   80722:	af00      	add	r7, sp, #0
	udd_enable();
   80724:	4b01      	ldr	r3, [pc, #4]	; (8072c <udc_start+0xc>)
   80726:	4798      	blx	r3
}
   80728:	bd80      	pop	{r7, pc}
   8072a:	bf00      	nop
   8072c:	0008145d 	.word	0x0008145d

00080730 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   80730:	b580      	push	{r7, lr}
   80732:	b082      	sub	sp, #8
   80734:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   80736:	4b0f      	ldr	r3, [pc, #60]	; (80774 <udc_reset+0x44>)
   80738:	781b      	ldrb	r3, [r3, #0]
   8073a:	2b00      	cmp	r3, #0
   8073c:	d010      	beq.n	80760 <udc_reset+0x30>
		for (iface_num = 0;
   8073e:	2300      	movs	r3, #0
   80740:	71fb      	strb	r3, [r7, #7]
   80742:	e006      	b.n	80752 <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   80744:	79fb      	ldrb	r3, [r7, #7]
   80746:	4618      	mov	r0, r3
   80748:	4b0b      	ldr	r3, [pc, #44]	; (80778 <udc_reset+0x48>)
   8074a:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   8074c:	79fb      	ldrb	r3, [r7, #7]
   8074e:	3301      	adds	r3, #1
   80750:	71fb      	strb	r3, [r7, #7]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80752:	4b0a      	ldr	r3, [pc, #40]	; (8077c <udc_reset+0x4c>)
   80754:	681b      	ldr	r3, [r3, #0]
   80756:	681b      	ldr	r3, [r3, #0]
   80758:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   8075a:	79fa      	ldrb	r2, [r7, #7]
   8075c:	429a      	cmp	r2, r3
   8075e:	d3f1      	bcc.n	80744 <udc_reset+0x14>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   80760:	4b04      	ldr	r3, [pc, #16]	; (80774 <udc_reset+0x44>)
   80762:	2200      	movs	r2, #0
   80764:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   80766:	4b06      	ldr	r3, [pc, #24]	; (80780 <udc_reset+0x50>)
   80768:	2200      	movs	r2, #0
   8076a:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   8076c:	3708      	adds	r7, #8
   8076e:	46bd      	mov	sp, r7
   80770:	bd80      	pop	{r7, pc}
   80772:	bf00      	nop
   80774:	20070744 	.word	0x20070744
   80778:	000805dd 	.word	0x000805dd
   8077c:	20070748 	.word	0x20070748
   80780:	2007073c 	.word	0x2007073c

00080784 <udc_sof_notify>:

void udc_sof_notify(void)
{
   80784:	b580      	push	{r7, lr}
   80786:	b082      	sub	sp, #8
   80788:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   8078a:	4b13      	ldr	r3, [pc, #76]	; (807d8 <udc_sof_notify+0x54>)
   8078c:	781b      	ldrb	r3, [r3, #0]
   8078e:	2b00      	cmp	r3, #0
   80790:	d01f      	beq.n	807d2 <udc_sof_notify+0x4e>
		for (iface_num = 0;
   80792:	2300      	movs	r3, #0
   80794:	71fb      	strb	r3, [r7, #7]
   80796:	e015      	b.n	807c4 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   80798:	4b10      	ldr	r3, [pc, #64]	; (807dc <udc_sof_notify+0x58>)
   8079a:	681b      	ldr	r3, [r3, #0]
   8079c:	685a      	ldr	r2, [r3, #4]
   8079e:	79fb      	ldrb	r3, [r7, #7]
   807a0:	009b      	lsls	r3, r3, #2
   807a2:	4413      	add	r3, r2
   807a4:	681b      	ldr	r3, [r3, #0]
   807a6:	691b      	ldr	r3, [r3, #16]
   807a8:	2b00      	cmp	r3, #0
   807aa:	d008      	beq.n	807be <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   807ac:	4b0b      	ldr	r3, [pc, #44]	; (807dc <udc_sof_notify+0x58>)
   807ae:	681b      	ldr	r3, [r3, #0]
   807b0:	685a      	ldr	r2, [r3, #4]
   807b2:	79fb      	ldrb	r3, [r7, #7]
   807b4:	009b      	lsls	r3, r3, #2
   807b6:	4413      	add	r3, r2
   807b8:	681b      	ldr	r3, [r3, #0]
   807ba:	691b      	ldr	r3, [r3, #16]
   807bc:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   807be:	79fb      	ldrb	r3, [r7, #7]
   807c0:	3301      	adds	r3, #1
   807c2:	71fb      	strb	r3, [r7, #7]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   807c4:	4b05      	ldr	r3, [pc, #20]	; (807dc <udc_sof_notify+0x58>)
   807c6:	681b      	ldr	r3, [r3, #0]
   807c8:	681b      	ldr	r3, [r3, #0]
   807ca:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   807cc:	79fa      	ldrb	r2, [r7, #7]
   807ce:	429a      	cmp	r2, r3
   807d0:	d3e2      	bcc.n	80798 <udc_sof_notify+0x14>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
   807d2:	3708      	adds	r7, #8
   807d4:	46bd      	mov	sp, r7
   807d6:	bd80      	pop	{r7, pc}
   807d8:	20070744 	.word	0x20070744
   807dc:	20070748 	.word	0x20070748

000807e0 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   807e0:	b580      	push	{r7, lr}
   807e2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   807e4:	4b06      	ldr	r3, [pc, #24]	; (80800 <udc_req_std_dev_get_status+0x20>)
   807e6:	88db      	ldrh	r3, [r3, #6]
   807e8:	2b02      	cmp	r3, #2
   807ea:	d001      	beq.n	807f0 <udc_req_std_dev_get_status+0x10>
		return false;
   807ec:	2300      	movs	r3, #0
   807ee:	e004      	b.n	807fa <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   807f0:	4804      	ldr	r0, [pc, #16]	; (80804 <udc_req_std_dev_get_status+0x24>)
   807f2:	2102      	movs	r1, #2
   807f4:	4b04      	ldr	r3, [pc, #16]	; (80808 <udc_req_std_dev_get_status+0x28>)
   807f6:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   807f8:	2301      	movs	r3, #1
}
   807fa:	4618      	mov	r0, r3
   807fc:	bd80      	pop	{r7, pc}
   807fe:	bf00      	nop
   80800:	2007086c 	.word	0x2007086c
   80804:	2007073c 	.word	0x2007073c
   80808:	00081701 	.word	0x00081701

0008080c <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   8080c:	b580      	push	{r7, lr}
   8080e:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   80810:	4b0b      	ldr	r3, [pc, #44]	; (80840 <udc_req_std_ep_get_status+0x34>)
   80812:	88db      	ldrh	r3, [r3, #6]
   80814:	2b02      	cmp	r3, #2
   80816:	d001      	beq.n	8081c <udc_req_std_ep_get_status+0x10>
		return false;
   80818:	2300      	movs	r3, #0
   8081a:	e00e      	b.n	8083a <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   8081c:	4b08      	ldr	r3, [pc, #32]	; (80840 <udc_req_std_ep_get_status+0x34>)
   8081e:	889b      	ldrh	r3, [r3, #4]
   80820:	b2db      	uxtb	r3, r3
   80822:	4618      	mov	r0, r3
   80824:	4b07      	ldr	r3, [pc, #28]	; (80844 <udc_req_std_ep_get_status+0x38>)
   80826:	4798      	blx	r3
   80828:	4603      	mov	r3, r0
   8082a:	b29a      	uxth	r2, r3
   8082c:	4b06      	ldr	r3, [pc, #24]	; (80848 <udc_req_std_ep_get_status+0x3c>)
   8082e:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   80830:	4805      	ldr	r0, [pc, #20]	; (80848 <udc_req_std_ep_get_status+0x3c>)
   80832:	2102      	movs	r1, #2
   80834:	4b05      	ldr	r3, [pc, #20]	; (8084c <udc_req_std_ep_get_status+0x40>)
   80836:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   80838:	2301      	movs	r3, #1
}
   8083a:	4618      	mov	r0, r3
   8083c:	bd80      	pop	{r7, pc}
   8083e:	bf00      	nop
   80840:	2007086c 	.word	0x2007086c
   80844:	00081aa5 	.word	0x00081aa5
   80848:	20070750 	.word	0x20070750
   8084c:	00081701 	.word	0x00081701

00080850 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   80850:	b480      	push	{r7}
   80852:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   80854:	4b0c      	ldr	r3, [pc, #48]	; (80888 <udc_req_std_dev_clear_feature+0x38>)
   80856:	88db      	ldrh	r3, [r3, #6]
   80858:	2b00      	cmp	r3, #0
   8085a:	d001      	beq.n	80860 <udc_req_std_dev_clear_feature+0x10>
		return false;
   8085c:	2300      	movs	r3, #0
   8085e:	e00d      	b.n	8087c <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   80860:	4b09      	ldr	r3, [pc, #36]	; (80888 <udc_req_std_dev_clear_feature+0x38>)
   80862:	885b      	ldrh	r3, [r3, #2]
   80864:	2b01      	cmp	r3, #1
   80866:	d108      	bne.n	8087a <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   80868:	4b08      	ldr	r3, [pc, #32]	; (8088c <udc_req_std_dev_clear_feature+0x3c>)
   8086a:	881b      	ldrh	r3, [r3, #0]
   8086c:	f023 0302 	bic.w	r3, r3, #2
   80870:	b29a      	uxth	r2, r3
   80872:	4b06      	ldr	r3, [pc, #24]	; (8088c <udc_req_std_dev_clear_feature+0x3c>)
   80874:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   80876:	2301      	movs	r3, #1
   80878:	e000      	b.n	8087c <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   8087a:	2300      	movs	r3, #0
}
   8087c:	4618      	mov	r0, r3
   8087e:	46bd      	mov	sp, r7
   80880:	f85d 7b04 	ldr.w	r7, [sp], #4
   80884:	4770      	bx	lr
   80886:	bf00      	nop
   80888:	2007086c 	.word	0x2007086c
   8088c:	2007073c 	.word	0x2007073c

00080890 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   80890:	b580      	push	{r7, lr}
   80892:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   80894:	4b0a      	ldr	r3, [pc, #40]	; (808c0 <udc_req_std_ep_clear_feature+0x30>)
   80896:	88db      	ldrh	r3, [r3, #6]
   80898:	2b00      	cmp	r3, #0
   8089a:	d001      	beq.n	808a0 <udc_req_std_ep_clear_feature+0x10>
		return false;
   8089c:	2300      	movs	r3, #0
   8089e:	e00c      	b.n	808ba <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   808a0:	4b07      	ldr	r3, [pc, #28]	; (808c0 <udc_req_std_ep_clear_feature+0x30>)
   808a2:	885b      	ldrh	r3, [r3, #2]
   808a4:	2b00      	cmp	r3, #0
   808a6:	d107      	bne.n	808b8 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   808a8:	4b05      	ldr	r3, [pc, #20]	; (808c0 <udc_req_std_ep_clear_feature+0x30>)
   808aa:	889b      	ldrh	r3, [r3, #4]
   808ac:	b2db      	uxtb	r3, r3
   808ae:	4618      	mov	r0, r3
   808b0:	4b04      	ldr	r3, [pc, #16]	; (808c4 <udc_req_std_ep_clear_feature+0x34>)
   808b2:	4798      	blx	r3
   808b4:	4603      	mov	r3, r0
   808b6:	e000      	b.n	808ba <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   808b8:	2300      	movs	r3, #0
}
   808ba:	4618      	mov	r0, r3
   808bc:	bd80      	pop	{r7, pc}
   808be:	bf00      	nop
   808c0:	2007086c 	.word	0x2007086c
   808c4:	00081bfd 	.word	0x00081bfd

000808c8 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   808c8:	b480      	push	{r7}
   808ca:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   808cc:	4b09      	ldr	r3, [pc, #36]	; (808f4 <udc_req_std_dev_set_feature+0x2c>)
   808ce:	88db      	ldrh	r3, [r3, #6]
   808d0:	2b00      	cmp	r3, #0
   808d2:	d001      	beq.n	808d8 <udc_req_std_dev_set_feature+0x10>
		return false;
   808d4:	2300      	movs	r3, #0
   808d6:	e007      	b.n	808e8 <udc_req_std_dev_set_feature+0x20>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   808d8:	4b06      	ldr	r3, [pc, #24]	; (808f4 <udc_req_std_dev_set_feature+0x2c>)
   808da:	885b      	ldrh	r3, [r3, #2]
   808dc:	2b01      	cmp	r3, #1
   808de:	d002      	beq.n	808e6 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
   808e0:	bf00      	nop
	}
	return false;
   808e2:	2300      	movs	r3, #0
   808e4:	e000      	b.n	808e8 <udc_req_std_dev_set_feature+0x20>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
   808e6:	2300      	movs	r3, #0
#endif
	default:
		break;
	}
	return false;
}
   808e8:	4618      	mov	r0, r3
   808ea:	46bd      	mov	sp, r7
   808ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   808f0:	4770      	bx	lr
   808f2:	bf00      	nop
   808f4:	2007086c 	.word	0x2007086c

000808f8 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   808f8:	b580      	push	{r7, lr}
   808fa:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   808fc:	4b0d      	ldr	r3, [pc, #52]	; (80934 <udc_req_std_ep_set_feature+0x3c>)
   808fe:	88db      	ldrh	r3, [r3, #6]
   80900:	2b00      	cmp	r3, #0
   80902:	d001      	beq.n	80908 <udc_req_std_ep_set_feature+0x10>
		return false;
   80904:	2300      	movs	r3, #0
   80906:	e012      	b.n	8092e <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   80908:	4b0a      	ldr	r3, [pc, #40]	; (80934 <udc_req_std_ep_set_feature+0x3c>)
   8090a:	885b      	ldrh	r3, [r3, #2]
   8090c:	2b00      	cmp	r3, #0
   8090e:	d10d      	bne.n	8092c <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   80910:	4b08      	ldr	r3, [pc, #32]	; (80934 <udc_req_std_ep_set_feature+0x3c>)
   80912:	889b      	ldrh	r3, [r3, #4]
   80914:	b2db      	uxtb	r3, r3
   80916:	4618      	mov	r0, r3
   80918:	4b07      	ldr	r3, [pc, #28]	; (80938 <udc_req_std_ep_set_feature+0x40>)
   8091a:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8091c:	4b05      	ldr	r3, [pc, #20]	; (80934 <udc_req_std_ep_set_feature+0x3c>)
   8091e:	889b      	ldrh	r3, [r3, #4]
   80920:	b2db      	uxtb	r3, r3
   80922:	4618      	mov	r0, r3
   80924:	4b05      	ldr	r3, [pc, #20]	; (8093c <udc_req_std_ep_set_feature+0x44>)
   80926:	4798      	blx	r3
   80928:	4603      	mov	r3, r0
   8092a:	e000      	b.n	8092e <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   8092c:	2300      	movs	r3, #0
}
   8092e:	4618      	mov	r0, r3
   80930:	bd80      	pop	{r7, pc}
   80932:	bf00      	nop
   80934:	2007086c 	.word	0x2007086c
   80938:	00081e25 	.word	0x00081e25
   8093c:	00081ae1 	.word	0x00081ae1

00080940 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   80940:	b580      	push	{r7, lr}
   80942:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   80944:	4b04      	ldr	r3, [pc, #16]	; (80958 <udc_valid_address+0x18>)
   80946:	885b      	ldrh	r3, [r3, #2]
   80948:	b2db      	uxtb	r3, r3
   8094a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8094e:	b2db      	uxtb	r3, r3
   80950:	4618      	mov	r0, r3
   80952:	4b02      	ldr	r3, [pc, #8]	; (8095c <udc_valid_address+0x1c>)
   80954:	4798      	blx	r3
}
   80956:	bd80      	pop	{r7, pc}
   80958:	2007086c 	.word	0x2007086c
   8095c:	0008169d 	.word	0x0008169d

00080960 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   80960:	b480      	push	{r7}
   80962:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   80964:	4b07      	ldr	r3, [pc, #28]	; (80984 <udc_req_std_dev_set_address+0x24>)
   80966:	88db      	ldrh	r3, [r3, #6]
   80968:	2b00      	cmp	r3, #0
   8096a:	d001      	beq.n	80970 <udc_req_std_dev_set_address+0x10>
		return false;
   8096c:	2300      	movs	r3, #0
   8096e:	e003      	b.n	80978 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   80970:	4b04      	ldr	r3, [pc, #16]	; (80984 <udc_req_std_dev_set_address+0x24>)
   80972:	4a05      	ldr	r2, [pc, #20]	; (80988 <udc_req_std_dev_set_address+0x28>)
   80974:	611a      	str	r2, [r3, #16]
	return true;
   80976:	2301      	movs	r3, #1
}
   80978:	4618      	mov	r0, r3
   8097a:	46bd      	mov	sp, r7
   8097c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80980:	4770      	bx	lr
   80982:	bf00      	nop
   80984:	2007086c 	.word	0x2007086c
   80988:	00080941 	.word	0x00080941

0008098c <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   8098c:	b580      	push	{r7, lr}
   8098e:	b084      	sub	sp, #16
   80990:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   80992:	2300      	movs	r3, #0
   80994:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   80996:	4b29      	ldr	r3, [pc, #164]	; (80a3c <udc_req_std_dev_get_str_desc+0xb0>)
   80998:	885b      	ldrh	r3, [r3, #2]
   8099a:	b2db      	uxtb	r3, r3
   8099c:	2b03      	cmp	r3, #3
   8099e:	d820      	bhi.n	809e2 <udc_req_std_dev_get_str_desc+0x56>
   809a0:	a201      	add	r2, pc, #4	; (adr r2, 809a8 <udc_req_std_dev_get_str_desc+0x1c>)
   809a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   809a6:	bf00      	nop
   809a8:	000809b9 	.word	0x000809b9
   809ac:	000809c3 	.word	0x000809c3
   809b0:	000809cd 	.word	0x000809cd
   809b4:	000809d7 	.word	0x000809d7
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   809b8:	4821      	ldr	r0, [pc, #132]	; (80a40 <udc_req_std_dev_get_str_desc+0xb4>)
   809ba:	2104      	movs	r1, #4
   809bc:	4b21      	ldr	r3, [pc, #132]	; (80a44 <udc_req_std_dev_get_str_desc+0xb8>)
   809be:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   809c0:	e011      	b.n	809e6 <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   809c2:	230c      	movs	r3, #12
   809c4:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   809c6:	4b20      	ldr	r3, [pc, #128]	; (80a48 <udc_req_std_dev_get_str_desc+0xbc>)
   809c8:	60bb      	str	r3, [r7, #8]
		break;
   809ca:	e00c      	b.n	809e6 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   809cc:	2309      	movs	r3, #9
   809ce:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   809d0:	4b1e      	ldr	r3, [pc, #120]	; (80a4c <udc_req_std_dev_get_str_desc+0xc0>)
   809d2:	60bb      	str	r3, [r7, #8]
		break;
   809d4:	e007      	b.n	809e6 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   809d6:	2304      	movs	r3, #4
   809d8:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   809da:	4b1d      	ldr	r3, [pc, #116]	; (80a50 <udc_req_std_dev_get_str_desc+0xc4>)
   809dc:	4798      	blx	r3
   809de:	60b8      	str	r0, [r7, #8]
		break;
   809e0:	e001      	b.n	809e6 <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   809e2:	2300      	movs	r3, #0
   809e4:	e026      	b.n	80a34 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   809e6:	79fb      	ldrb	r3, [r7, #7]
   809e8:	2b00      	cmp	r3, #0
   809ea:	d022      	beq.n	80a32 <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   809ec:	2300      	movs	r3, #0
   809ee:	73fb      	strb	r3, [r7, #15]
   809f0:	e00d      	b.n	80a0e <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   809f2:	7bfb      	ldrb	r3, [r7, #15]
   809f4:	7bfa      	ldrb	r2, [r7, #15]
   809f6:	68b9      	ldr	r1, [r7, #8]
   809f8:	440a      	add	r2, r1
   809fa:	7812      	ldrb	r2, [r2, #0]
   809fc:	b291      	uxth	r1, r2
   809fe:	4a15      	ldr	r2, [pc, #84]	; (80a54 <udc_req_std_dev_get_str_desc+0xc8>)
   80a00:	005b      	lsls	r3, r3, #1
   80a02:	4413      	add	r3, r2
   80a04:	460a      	mov	r2, r1
   80a06:	805a      	strh	r2, [r3, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   80a08:	7bfb      	ldrb	r3, [r7, #15]
   80a0a:	3301      	adds	r3, #1
   80a0c:	73fb      	strb	r3, [r7, #15]
   80a0e:	7bfa      	ldrb	r2, [r7, #15]
   80a10:	79fb      	ldrb	r3, [r7, #7]
   80a12:	429a      	cmp	r2, r3
   80a14:	d3ed      	bcc.n	809f2 <udc_req_std_dev_get_str_desc+0x66>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   80a16:	79fb      	ldrb	r3, [r7, #7]
   80a18:	3301      	adds	r3, #1
   80a1a:	b2db      	uxtb	r3, r3
   80a1c:	005b      	lsls	r3, r3, #1
   80a1e:	b2da      	uxtb	r2, r3
   80a20:	4b0c      	ldr	r3, [pc, #48]	; (80a54 <udc_req_std_dev_get_str_desc+0xc8>)
   80a22:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   80a24:	4b0b      	ldr	r3, [pc, #44]	; (80a54 <udc_req_std_dev_get_str_desc+0xc8>)
   80a26:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
   80a28:	b29b      	uxth	r3, r3
   80a2a:	480a      	ldr	r0, [pc, #40]	; (80a54 <udc_req_std_dev_get_str_desc+0xc8>)
   80a2c:	4619      	mov	r1, r3
   80a2e:	4b05      	ldr	r3, [pc, #20]	; (80a44 <udc_req_std_dev_get_str_desc+0xb8>)
   80a30:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
   80a32:	2301      	movs	r3, #1
}
   80a34:	4618      	mov	r0, r3
   80a36:	3710      	adds	r7, #16
   80a38:	46bd      	mov	sp, r7
   80a3a:	bd80      	pop	{r7, pc}
   80a3c:	2007086c 	.word	0x2007086c
   80a40:	200701dc 	.word	0x200701dc
   80a44:	00081701 	.word	0x00081701
   80a48:	200701e0 	.word	0x200701e0
   80a4c:	200701f0 	.word	0x200701f0
   80a50:	00080495 	.word	0x00080495
   80a54:	200701fc 	.word	0x200701fc

00080a58 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
   80a58:	b580      	push	{r7, lr}
   80a5a:	b082      	sub	sp, #8
   80a5c:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   80a5e:	4b42      	ldr	r3, [pc, #264]	; (80b68 <udc_req_std_dev_get_descriptor+0x110>)
   80a60:	885b      	ldrh	r3, [r3, #2]
   80a62:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   80a64:	4b40      	ldr	r3, [pc, #256]	; (80b68 <udc_req_std_dev_get_descriptor+0x110>)
   80a66:	885b      	ldrh	r3, [r3, #2]
   80a68:	0a1b      	lsrs	r3, r3, #8
   80a6a:	b29b      	uxth	r3, r3
   80a6c:	b2db      	uxtb	r3, r3
   80a6e:	3b01      	subs	r3, #1
   80a70:	2b0e      	cmp	r3, #14
   80a72:	d867      	bhi.n	80b44 <udc_req_std_dev_get_descriptor+0xec>
   80a74:	a201      	add	r2, pc, #4	; (adr r2, 80a7c <udc_req_std_dev_get_descriptor+0x24>)
   80a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80a7a:	bf00      	nop
   80a7c:	00080ab9 	.word	0x00080ab9
   80a80:	00080acf 	.word	0x00080acf
   80a84:	00080b2f 	.word	0x00080b2f
   80a88:	00080b45 	.word	0x00080b45
   80a8c:	00080b45 	.word	0x00080b45
   80a90:	00080b45 	.word	0x00080b45
   80a94:	00080b45 	.word	0x00080b45
   80a98:	00080b45 	.word	0x00080b45
   80a9c:	00080b45 	.word	0x00080b45
   80aa0:	00080b45 	.word	0x00080b45
   80aa4:	00080b45 	.word	0x00080b45
   80aa8:	00080b45 	.word	0x00080b45
   80aac:	00080b45 	.word	0x00080b45
   80ab0:	00080b45 	.word	0x00080b45
   80ab4:	00080b0d 	.word	0x00080b0d
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
   80ab8:	4b2c      	ldr	r3, [pc, #176]	; (80b6c <udc_req_std_dev_get_descriptor+0x114>)
   80aba:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   80abc:	4b2b      	ldr	r3, [pc, #172]	; (80b6c <udc_req_std_dev_get_descriptor+0x114>)
   80abe:	681b      	ldr	r3, [r3, #0]
   80ac0:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   80ac2:	b29b      	uxth	r3, r3
   80ac4:	4610      	mov	r0, r2
   80ac6:	4619      	mov	r1, r3
   80ac8:	4b29      	ldr	r3, [pc, #164]	; (80b70 <udc_req_std_dev_get_descriptor+0x118>)
   80aca:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   80acc:	e03c      	b.n	80b48 <udc_req_std_dev_get_descriptor+0xf0>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   80ace:	4b27      	ldr	r3, [pc, #156]	; (80b6c <udc_req_std_dev_get_descriptor+0x114>)
   80ad0:	681b      	ldr	r3, [r3, #0]
   80ad2:	7c5b      	ldrb	r3, [r3, #17]
   80ad4:	79fa      	ldrb	r2, [r7, #7]
   80ad6:	429a      	cmp	r2, r3
   80ad8:	d301      	bcc.n	80ade <udc_req_std_dev_get_descriptor+0x86>
					bNumConfigurations) {
				return false;
   80ada:	2300      	movs	r3, #0
   80adc:	e03f      	b.n	80b5e <udc_req_std_dev_get_descriptor+0x106>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   80ade:	4b23      	ldr	r3, [pc, #140]	; (80b6c <udc_req_std_dev_get_descriptor+0x114>)
   80ae0:	685a      	ldr	r2, [r3, #4]
   80ae2:	79fb      	ldrb	r3, [r7, #7]
   80ae4:	00db      	lsls	r3, r3, #3
   80ae6:	4413      	add	r3, r2
   80ae8:	6819      	ldr	r1, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   80aea:	4b20      	ldr	r3, [pc, #128]	; (80b6c <udc_req_std_dev_get_descriptor+0x114>)
   80aec:	685a      	ldr	r2, [r3, #4]
   80aee:	79fb      	ldrb	r3, [r7, #7]
   80af0:	00db      	lsls	r3, r3, #3
   80af2:	4413      	add	r3, r2
   80af4:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   80af6:	885b      	ldrh	r3, [r3, #2]
   80af8:	b29b      	uxth	r3, r3
   80afa:	4608      	mov	r0, r1
   80afc:	4619      	mov	r1, r3
   80afe:	4b1c      	ldr	r3, [pc, #112]	; (80b70 <udc_req_std_dev_get_descriptor+0x118>)
   80b00:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   80b02:	4b19      	ldr	r3, [pc, #100]	; (80b68 <udc_req_std_dev_get_descriptor+0x110>)
   80b04:	689b      	ldr	r3, [r3, #8]
   80b06:	2202      	movs	r2, #2
   80b08:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   80b0a:	e01d      	b.n	80b48 <udc_req_std_dev_get_descriptor+0xf0>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   80b0c:	4b17      	ldr	r3, [pc, #92]	; (80b6c <udc_req_std_dev_get_descriptor+0x114>)
   80b0e:	689b      	ldr	r3, [r3, #8]
   80b10:	2b00      	cmp	r3, #0
   80b12:	d101      	bne.n	80b18 <udc_req_std_dev_get_descriptor+0xc0>
			return false;
   80b14:	2300      	movs	r3, #0
   80b16:	e022      	b.n	80b5e <udc_req_std_dev_get_descriptor+0x106>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   80b18:	4b14      	ldr	r3, [pc, #80]	; (80b6c <udc_req_std_dev_get_descriptor+0x114>)
   80b1a:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
   80b1c:	4b13      	ldr	r3, [pc, #76]	; (80b6c <udc_req_std_dev_get_descriptor+0x114>)
   80b1e:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   80b20:	885b      	ldrh	r3, [r3, #2]
   80b22:	b29b      	uxth	r3, r3
   80b24:	4610      	mov	r0, r2
   80b26:	4619      	mov	r1, r3
   80b28:	4b11      	ldr	r3, [pc, #68]	; (80b70 <udc_req_std_dev_get_descriptor+0x118>)
   80b2a:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
   80b2c:	e00c      	b.n	80b48 <udc_req_std_dev_get_descriptor+0xf0>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   80b2e:	4b11      	ldr	r3, [pc, #68]	; (80b74 <udc_req_std_dev_get_descriptor+0x11c>)
   80b30:	4798      	blx	r3
   80b32:	4603      	mov	r3, r0
   80b34:	f083 0301 	eor.w	r3, r3, #1
   80b38:	b2db      	uxtb	r3, r3
   80b3a:	2b00      	cmp	r3, #0
   80b3c:	d001      	beq.n	80b42 <udc_req_std_dev_get_descriptor+0xea>
			return false;
   80b3e:	2300      	movs	r3, #0
   80b40:	e00d      	b.n	80b5e <udc_req_std_dev_get_descriptor+0x106>
		}
		break;
   80b42:	e001      	b.n	80b48 <udc_req_std_dev_get_descriptor+0xf0>

	default:
		// Unknown descriptor requested
		return false;
   80b44:	2300      	movs	r3, #0
   80b46:	e00a      	b.n	80b5e <udc_req_std_dev_get_descriptor+0x106>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   80b48:	4b07      	ldr	r3, [pc, #28]	; (80b68 <udc_req_std_dev_get_descriptor+0x110>)
   80b4a:	88da      	ldrh	r2, [r3, #6]
   80b4c:	4b06      	ldr	r3, [pc, #24]	; (80b68 <udc_req_std_dev_get_descriptor+0x110>)
   80b4e:	899b      	ldrh	r3, [r3, #12]
   80b50:	429a      	cmp	r2, r3
   80b52:	d203      	bcs.n	80b5c <udc_req_std_dev_get_descriptor+0x104>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   80b54:	4b04      	ldr	r3, [pc, #16]	; (80b68 <udc_req_std_dev_get_descriptor+0x110>)
   80b56:	88da      	ldrh	r2, [r3, #6]
   80b58:	4b03      	ldr	r3, [pc, #12]	; (80b68 <udc_req_std_dev_get_descriptor+0x110>)
   80b5a:	819a      	strh	r2, [r3, #12]
	}
	return true;
   80b5c:	2301      	movs	r3, #1
}
   80b5e:	4618      	mov	r0, r3
   80b60:	3708      	adds	r7, #8
   80b62:	46bd      	mov	sp, r7
   80b64:	bd80      	pop	{r7, pc}
   80b66:	bf00      	nop
   80b68:	2007086c 	.word	0x2007086c
   80b6c:	2007025c 	.word	0x2007025c
   80b70:	00081701 	.word	0x00081701
   80b74:	0008098d 	.word	0x0008098d

00080b78 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   80b78:	b580      	push	{r7, lr}
   80b7a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   80b7c:	4b06      	ldr	r3, [pc, #24]	; (80b98 <udc_req_std_dev_get_configuration+0x20>)
   80b7e:	88db      	ldrh	r3, [r3, #6]
   80b80:	2b01      	cmp	r3, #1
   80b82:	d001      	beq.n	80b88 <udc_req_std_dev_get_configuration+0x10>
		return false;
   80b84:	2300      	movs	r3, #0
   80b86:	e004      	b.n	80b92 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   80b88:	4804      	ldr	r0, [pc, #16]	; (80b9c <udc_req_std_dev_get_configuration+0x24>)
   80b8a:	2101      	movs	r1, #1
   80b8c:	4b04      	ldr	r3, [pc, #16]	; (80ba0 <udc_req_std_dev_get_configuration+0x28>)
   80b8e:	4798      	blx	r3
	return true;
   80b90:	2301      	movs	r3, #1
}
   80b92:	4618      	mov	r0, r3
   80b94:	bd80      	pop	{r7, pc}
   80b96:	bf00      	nop
   80b98:	2007086c 	.word	0x2007086c
   80b9c:	20070744 	.word	0x20070744
   80ba0:	00081701 	.word	0x00081701

00080ba4 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   80ba4:	b580      	push	{r7, lr}
   80ba6:	b082      	sub	sp, #8
   80ba8:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   80baa:	4b27      	ldr	r3, [pc, #156]	; (80c48 <udc_req_std_dev_set_configuration+0xa4>)
   80bac:	88db      	ldrh	r3, [r3, #6]
   80bae:	2b00      	cmp	r3, #0
   80bb0:	d001      	beq.n	80bb6 <udc_req_std_dev_set_configuration+0x12>
		return false;
   80bb2:	2300      	movs	r3, #0
   80bb4:	e043      	b.n	80c3e <udc_req_std_dev_set_configuration+0x9a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   80bb6:	4b25      	ldr	r3, [pc, #148]	; (80c4c <udc_req_std_dev_set_configuration+0xa8>)
   80bb8:	4798      	blx	r3
   80bba:	4603      	mov	r3, r0
   80bbc:	2b00      	cmp	r3, #0
   80bbe:	d101      	bne.n	80bc4 <udc_req_std_dev_set_configuration+0x20>
		return false;
   80bc0:	2300      	movs	r3, #0
   80bc2:	e03c      	b.n	80c3e <udc_req_std_dev_set_configuration+0x9a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   80bc4:	4b20      	ldr	r3, [pc, #128]	; (80c48 <udc_req_std_dev_set_configuration+0xa4>)
   80bc6:	885b      	ldrh	r3, [r3, #2]
   80bc8:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   80bca:	4a21      	ldr	r2, [pc, #132]	; (80c50 <udc_req_std_dev_set_configuration+0xac>)
   80bcc:	6812      	ldr	r2, [r2, #0]
   80bce:	7c52      	ldrb	r2, [r2, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   80bd0:	4293      	cmp	r3, r2
   80bd2:	dd01      	ble.n	80bd8 <udc_req_std_dev_set_configuration+0x34>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
   80bd4:	2300      	movs	r3, #0
   80bd6:	e032      	b.n	80c3e <udc_req_std_dev_set_configuration+0x9a>
		}
	}

	// Reset current configuration
	udc_reset();
   80bd8:	4b1e      	ldr	r3, [pc, #120]	; (80c54 <udc_req_std_dev_set_configuration+0xb0>)
   80bda:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   80bdc:	4b1a      	ldr	r3, [pc, #104]	; (80c48 <udc_req_std_dev_set_configuration+0xa4>)
   80bde:	885b      	ldrh	r3, [r3, #2]
   80be0:	b2da      	uxtb	r2, r3
   80be2:	4b1d      	ldr	r3, [pc, #116]	; (80c58 <udc_req_std_dev_set_configuration+0xb4>)
   80be4:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   80be6:	4b1c      	ldr	r3, [pc, #112]	; (80c58 <udc_req_std_dev_set_configuration+0xb4>)
   80be8:	781b      	ldrb	r3, [r3, #0]
   80bea:	2b00      	cmp	r3, #0
   80bec:	d101      	bne.n	80bf2 <udc_req_std_dev_set_configuration+0x4e>
		return true; // Default empty configuration requested
   80bee:	2301      	movs	r3, #1
   80bf0:	e025      	b.n	80c3e <udc_req_std_dev_set_configuration+0x9a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   80bf2:	4b17      	ldr	r3, [pc, #92]	; (80c50 <udc_req_std_dev_set_configuration+0xac>)
   80bf4:	685a      	ldr	r2, [r3, #4]
   80bf6:	4b18      	ldr	r3, [pc, #96]	; (80c58 <udc_req_std_dev_set_configuration+0xb4>)
   80bf8:	781b      	ldrb	r3, [r3, #0]
   80bfa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   80bfe:	3b01      	subs	r3, #1
   80c00:	00db      	lsls	r3, r3, #3
   80c02:	4413      	add	r3, r2
   80c04:	4a15      	ldr	r2, [pc, #84]	; (80c5c <udc_req_std_dev_set_configuration+0xb8>)
   80c06:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80c08:	2300      	movs	r3, #0
   80c0a:	71fb      	strb	r3, [r7, #7]
   80c0c:	e00f      	b.n	80c2e <udc_req_std_dev_set_configuration+0x8a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   80c0e:	79fb      	ldrb	r3, [r7, #7]
   80c10:	4618      	mov	r0, r3
   80c12:	2100      	movs	r1, #0
   80c14:	4b12      	ldr	r3, [pc, #72]	; (80c60 <udc_req_std_dev_set_configuration+0xbc>)
   80c16:	4798      	blx	r3
   80c18:	4603      	mov	r3, r0
   80c1a:	f083 0301 	eor.w	r3, r3, #1
   80c1e:	b2db      	uxtb	r3, r3
   80c20:	2b00      	cmp	r3, #0
   80c22:	d001      	beq.n	80c28 <udc_req_std_dev_set_configuration+0x84>
			return false;
   80c24:	2300      	movs	r3, #0
   80c26:	e00a      	b.n	80c3e <udc_req_std_dev_set_configuration+0x9a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   80c28:	79fb      	ldrb	r3, [r7, #7]
   80c2a:	3301      	adds	r3, #1
   80c2c:	71fb      	strb	r3, [r7, #7]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80c2e:	4b0b      	ldr	r3, [pc, #44]	; (80c5c <udc_req_std_dev_set_configuration+0xb8>)
   80c30:	681b      	ldr	r3, [r3, #0]
   80c32:	681b      	ldr	r3, [r3, #0]
   80c34:	791b      	ldrb	r3, [r3, #4]
   80c36:	79fa      	ldrb	r2, [r7, #7]
   80c38:	429a      	cmp	r2, r3
   80c3a:	d3e8      	bcc.n	80c0e <udc_req_std_dev_set_configuration+0x6a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   80c3c:	2301      	movs	r3, #1
}
   80c3e:	4618      	mov	r0, r3
   80c40:	3708      	adds	r7, #8
   80c42:	46bd      	mov	sp, r7
   80c44:	bd80      	pop	{r7, pc}
   80c46:	bf00      	nop
   80c48:	2007086c 	.word	0x2007086c
   80c4c:	000816e1 	.word	0x000816e1
   80c50:	2007025c 	.word	0x2007025c
   80c54:	00080731 	.word	0x00080731
   80c58:	20070744 	.word	0x20070744
   80c5c:	20070748 	.word	0x20070748
   80c60:	00080681 	.word	0x00080681

00080c64 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   80c64:	b580      	push	{r7, lr}
   80c66:	b082      	sub	sp, #8
   80c68:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   80c6a:	4b1e      	ldr	r3, [pc, #120]	; (80ce4 <udc_req_std_iface_get_setting+0x80>)
   80c6c:	88db      	ldrh	r3, [r3, #6]
   80c6e:	2b01      	cmp	r3, #1
   80c70:	d001      	beq.n	80c76 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   80c72:	2300      	movs	r3, #0
   80c74:	e032      	b.n	80cdc <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   80c76:	4b1c      	ldr	r3, [pc, #112]	; (80ce8 <udc_req_std_iface_get_setting+0x84>)
   80c78:	781b      	ldrb	r3, [r3, #0]
   80c7a:	2b00      	cmp	r3, #0
   80c7c:	d101      	bne.n	80c82 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   80c7e:	2300      	movs	r3, #0
   80c80:	e02c      	b.n	80cdc <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80c82:	4b18      	ldr	r3, [pc, #96]	; (80ce4 <udc_req_std_iface_get_setting+0x80>)
   80c84:	889b      	ldrh	r3, [r3, #4]
   80c86:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80c88:	4b18      	ldr	r3, [pc, #96]	; (80cec <udc_req_std_iface_get_setting+0x88>)
   80c8a:	681b      	ldr	r3, [r3, #0]
   80c8c:	681b      	ldr	r3, [r3, #0]
   80c8e:	791b      	ldrb	r3, [r3, #4]
   80c90:	79fa      	ldrb	r2, [r7, #7]
   80c92:	429a      	cmp	r2, r3
   80c94:	d301      	bcc.n	80c9a <udc_req_std_iface_get_setting+0x36>
		return false;
   80c96:	2300      	movs	r3, #0
   80c98:	e020      	b.n	80cdc <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   80c9a:	79fb      	ldrb	r3, [r7, #7]
   80c9c:	4618      	mov	r0, r3
   80c9e:	2100      	movs	r1, #0
   80ca0:	4b13      	ldr	r3, [pc, #76]	; (80cf0 <udc_req_std_iface_get_setting+0x8c>)
   80ca2:	4798      	blx	r3
   80ca4:	4603      	mov	r3, r0
   80ca6:	f083 0301 	eor.w	r3, r3, #1
   80caa:	b2db      	uxtb	r3, r3
   80cac:	2b00      	cmp	r3, #0
   80cae:	d001      	beq.n	80cb4 <udc_req_std_iface_get_setting+0x50>
		return false;
   80cb0:	2300      	movs	r3, #0
   80cb2:	e013      	b.n	80cdc <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80cb4:	4b0d      	ldr	r3, [pc, #52]	; (80cec <udc_req_std_iface_get_setting+0x88>)
   80cb6:	681b      	ldr	r3, [r3, #0]
   80cb8:	685a      	ldr	r2, [r3, #4]
   80cba:	79fb      	ldrb	r3, [r7, #7]
   80cbc:	009b      	lsls	r3, r3, #2
   80cbe:	4413      	add	r3, r2
   80cc0:	681b      	ldr	r3, [r3, #0]
   80cc2:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   80cc4:	683b      	ldr	r3, [r7, #0]
   80cc6:	68db      	ldr	r3, [r3, #12]
   80cc8:	4798      	blx	r3
   80cca:	4603      	mov	r3, r0
   80ccc:	461a      	mov	r2, r3
   80cce:	4b09      	ldr	r3, [pc, #36]	; (80cf4 <udc_req_std_iface_get_setting+0x90>)
   80cd0:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   80cd2:	4808      	ldr	r0, [pc, #32]	; (80cf4 <udc_req_std_iface_get_setting+0x90>)
   80cd4:	2101      	movs	r1, #1
   80cd6:	4b08      	ldr	r3, [pc, #32]	; (80cf8 <udc_req_std_iface_get_setting+0x94>)
   80cd8:	4798      	blx	r3
	return true;
   80cda:	2301      	movs	r3, #1
}
   80cdc:	4618      	mov	r0, r3
   80cde:	3708      	adds	r7, #8
   80ce0:	46bd      	mov	sp, r7
   80ce2:	bd80      	pop	{r7, pc}
   80ce4:	2007086c 	.word	0x2007086c
   80ce8:	20070744 	.word	0x20070744
   80cec:	20070748 	.word	0x20070748
   80cf0:	00080541 	.word	0x00080541
   80cf4:	20070740 	.word	0x20070740
   80cf8:	00081701 	.word	0x00081701

00080cfc <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   80cfc:	b580      	push	{r7, lr}
   80cfe:	b082      	sub	sp, #8
   80d00:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   80d02:	4b14      	ldr	r3, [pc, #80]	; (80d54 <udc_req_std_iface_set_setting+0x58>)
   80d04:	88db      	ldrh	r3, [r3, #6]
   80d06:	2b00      	cmp	r3, #0
   80d08:	d001      	beq.n	80d0e <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   80d0a:	2300      	movs	r3, #0
   80d0c:	e01e      	b.n	80d4c <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   80d0e:	4b12      	ldr	r3, [pc, #72]	; (80d58 <udc_req_std_iface_set_setting+0x5c>)
   80d10:	781b      	ldrb	r3, [r3, #0]
   80d12:	2b00      	cmp	r3, #0
   80d14:	d101      	bne.n	80d1a <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   80d16:	2300      	movs	r3, #0
   80d18:	e018      	b.n	80d4c <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80d1a:	4b0e      	ldr	r3, [pc, #56]	; (80d54 <udc_req_std_iface_set_setting+0x58>)
   80d1c:	889b      	ldrh	r3, [r3, #4]
   80d1e:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   80d20:	4b0c      	ldr	r3, [pc, #48]	; (80d54 <udc_req_std_iface_set_setting+0x58>)
   80d22:	885b      	ldrh	r3, [r3, #2]
   80d24:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   80d26:	79fb      	ldrb	r3, [r7, #7]
   80d28:	4618      	mov	r0, r3
   80d2a:	4b0c      	ldr	r3, [pc, #48]	; (80d5c <udc_req_std_iface_set_setting+0x60>)
   80d2c:	4798      	blx	r3
   80d2e:	4603      	mov	r3, r0
   80d30:	f083 0301 	eor.w	r3, r3, #1
   80d34:	b2db      	uxtb	r3, r3
   80d36:	2b00      	cmp	r3, #0
   80d38:	d001      	beq.n	80d3e <udc_req_std_iface_set_setting+0x42>
		return false;
   80d3a:	2300      	movs	r3, #0
   80d3c:	e006      	b.n	80d4c <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   80d3e:	79fa      	ldrb	r2, [r7, #7]
   80d40:	79bb      	ldrb	r3, [r7, #6]
   80d42:	4610      	mov	r0, r2
   80d44:	4619      	mov	r1, r3
   80d46:	4b06      	ldr	r3, [pc, #24]	; (80d60 <udc_req_std_iface_set_setting+0x64>)
   80d48:	4798      	blx	r3
   80d4a:	4603      	mov	r3, r0
}
   80d4c:	4618      	mov	r0, r3
   80d4e:	3708      	adds	r7, #8
   80d50:	46bd      	mov	sp, r7
   80d52:	bd80      	pop	{r7, pc}
   80d54:	2007086c 	.word	0x2007086c
   80d58:	20070744 	.word	0x20070744
   80d5c:	000805dd 	.word	0x000805dd
   80d60:	00080681 	.word	0x00080681

00080d64 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   80d64:	b580      	push	{r7, lr}
   80d66:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   80d68:	4b4e      	ldr	r3, [pc, #312]	; (80ea4 <udc_reqstd+0x140>)
   80d6a:	781b      	ldrb	r3, [r3, #0]
   80d6c:	b2db      	uxtb	r3, r3
   80d6e:	b25b      	sxtb	r3, r3
   80d70:	2b00      	cmp	r3, #0
   80d72:	da3f      	bge.n	80df4 <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   80d74:	4b4b      	ldr	r3, [pc, #300]	; (80ea4 <udc_reqstd+0x140>)
   80d76:	88db      	ldrh	r3, [r3, #6]
   80d78:	2b00      	cmp	r3, #0
   80d7a:	d101      	bne.n	80d80 <udc_reqstd+0x1c>
			return false; // Error for USB host
   80d7c:	2300      	movs	r3, #0
   80d7e:	e08f      	b.n	80ea0 <udc_reqstd+0x13c>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80d80:	4b48      	ldr	r3, [pc, #288]	; (80ea4 <udc_reqstd+0x140>)
   80d82:	781b      	ldrb	r3, [r3, #0]
   80d84:	f003 031f 	and.w	r3, r3, #31
   80d88:	2b00      	cmp	r3, #0
   80d8a:	d114      	bne.n	80db6 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   80d8c:	4b45      	ldr	r3, [pc, #276]	; (80ea4 <udc_reqstd+0x140>)
   80d8e:	785b      	ldrb	r3, [r3, #1]
   80d90:	2b06      	cmp	r3, #6
   80d92:	d008      	beq.n	80da6 <udc_reqstd+0x42>
   80d94:	2b08      	cmp	r3, #8
   80d96:	d00a      	beq.n	80dae <udc_reqstd+0x4a>
   80d98:	2b00      	cmp	r3, #0
   80d9a:	d000      	beq.n	80d9e <udc_reqstd+0x3a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   80d9c:	e00b      	b.n	80db6 <udc_reqstd+0x52>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
   80d9e:	4b42      	ldr	r3, [pc, #264]	; (80ea8 <udc_reqstd+0x144>)
   80da0:	4798      	blx	r3
   80da2:	4603      	mov	r3, r0
   80da4:	e07c      	b.n	80ea0 <udc_reqstd+0x13c>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
   80da6:	4b41      	ldr	r3, [pc, #260]	; (80eac <udc_reqstd+0x148>)
   80da8:	4798      	blx	r3
   80daa:	4603      	mov	r3, r0
   80dac:	e078      	b.n	80ea0 <udc_reqstd+0x13c>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
   80dae:	4b40      	ldr	r3, [pc, #256]	; (80eb0 <udc_reqstd+0x14c>)
   80db0:	4798      	blx	r3
   80db2:	4603      	mov	r3, r0
   80db4:	e074      	b.n	80ea0 <udc_reqstd+0x13c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80db6:	4b3b      	ldr	r3, [pc, #236]	; (80ea4 <udc_reqstd+0x140>)
   80db8:	781b      	ldrb	r3, [r3, #0]
   80dba:	f003 031f 	and.w	r3, r3, #31
   80dbe:	2b01      	cmp	r3, #1
   80dc0:	d108      	bne.n	80dd4 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   80dc2:	4b38      	ldr	r3, [pc, #224]	; (80ea4 <udc_reqstd+0x140>)
   80dc4:	785b      	ldrb	r3, [r3, #1]
   80dc6:	2b0a      	cmp	r3, #10
   80dc8:	d000      	beq.n	80dcc <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
   80dca:	e003      	b.n	80dd4 <udc_reqstd+0x70>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   80dcc:	4b39      	ldr	r3, [pc, #228]	; (80eb4 <udc_reqstd+0x150>)
   80dce:	4798      	blx	r3
   80dd0:	4603      	mov	r3, r0
   80dd2:	e065      	b.n	80ea0 <udc_reqstd+0x13c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80dd4:	4b33      	ldr	r3, [pc, #204]	; (80ea4 <udc_reqstd+0x140>)
   80dd6:	781b      	ldrb	r3, [r3, #0]
   80dd8:	f003 031f 	and.w	r3, r3, #31
   80ddc:	2b02      	cmp	r3, #2
   80dde:	d15e      	bne.n	80e9e <udc_reqstd+0x13a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   80de0:	4b30      	ldr	r3, [pc, #192]	; (80ea4 <udc_reqstd+0x140>)
   80de2:	785b      	ldrb	r3, [r3, #1]
   80de4:	2b00      	cmp	r3, #0
   80de6:	d001      	beq.n	80dec <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
   80de8:	bf00      	nop
   80dea:	e058      	b.n	80e9e <udc_reqstd+0x13a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   80dec:	4b32      	ldr	r3, [pc, #200]	; (80eb8 <udc_reqstd+0x154>)
   80dee:	4798      	blx	r3
   80df0:	4603      	mov	r3, r0
   80df2:	e055      	b.n	80ea0 <udc_reqstd+0x13c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80df4:	4b2b      	ldr	r3, [pc, #172]	; (80ea4 <udc_reqstd+0x140>)
   80df6:	781b      	ldrb	r3, [r3, #0]
   80df8:	f003 031f 	and.w	r3, r3, #31
   80dfc:	2b00      	cmp	r3, #0
   80dfe:	d12a      	bne.n	80e56 <udc_reqstd+0xf2>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   80e00:	4b28      	ldr	r3, [pc, #160]	; (80ea4 <udc_reqstd+0x140>)
   80e02:	785b      	ldrb	r3, [r3, #1]
   80e04:	3b01      	subs	r3, #1
   80e06:	2b08      	cmp	r3, #8
   80e08:	d824      	bhi.n	80e54 <udc_reqstd+0xf0>
   80e0a:	a201      	add	r2, pc, #4	; (adr r2, 80e10 <udc_reqstd+0xac>)
   80e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80e10:	00080e3d 	.word	0x00080e3d
   80e14:	00080e55 	.word	0x00080e55
   80e18:	00080e45 	.word	0x00080e45
   80e1c:	00080e55 	.word	0x00080e55
   80e20:	00080e35 	.word	0x00080e35
   80e24:	00080e55 	.word	0x00080e55
   80e28:	00080e55 	.word	0x00080e55
   80e2c:	00080e55 	.word	0x00080e55
   80e30:	00080e4d 	.word	0x00080e4d
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   80e34:	4b21      	ldr	r3, [pc, #132]	; (80ebc <udc_reqstd+0x158>)
   80e36:	4798      	blx	r3
   80e38:	4603      	mov	r3, r0
   80e3a:	e031      	b.n	80ea0 <udc_reqstd+0x13c>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   80e3c:	4b20      	ldr	r3, [pc, #128]	; (80ec0 <udc_reqstd+0x15c>)
   80e3e:	4798      	blx	r3
   80e40:	4603      	mov	r3, r0
   80e42:	e02d      	b.n	80ea0 <udc_reqstd+0x13c>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   80e44:	4b1f      	ldr	r3, [pc, #124]	; (80ec4 <udc_reqstd+0x160>)
   80e46:	4798      	blx	r3
   80e48:	4603      	mov	r3, r0
   80e4a:	e029      	b.n	80ea0 <udc_reqstd+0x13c>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   80e4c:	4b1e      	ldr	r3, [pc, #120]	; (80ec8 <udc_reqstd+0x164>)
   80e4e:	4798      	blx	r3
   80e50:	4603      	mov	r3, r0
   80e52:	e025      	b.n	80ea0 <udc_reqstd+0x13c>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
   80e54:	bf00      	nop
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80e56:	4b13      	ldr	r3, [pc, #76]	; (80ea4 <udc_reqstd+0x140>)
   80e58:	781b      	ldrb	r3, [r3, #0]
   80e5a:	f003 031f 	and.w	r3, r3, #31
   80e5e:	2b01      	cmp	r3, #1
   80e60:	d108      	bne.n	80e74 <udc_reqstd+0x110>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   80e62:	4b10      	ldr	r3, [pc, #64]	; (80ea4 <udc_reqstd+0x140>)
   80e64:	785b      	ldrb	r3, [r3, #1]
   80e66:	2b0b      	cmp	r3, #11
   80e68:	d000      	beq.n	80e6c <udc_reqstd+0x108>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
   80e6a:	e003      	b.n	80e74 <udc_reqstd+0x110>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   80e6c:	4b17      	ldr	r3, [pc, #92]	; (80ecc <udc_reqstd+0x168>)
   80e6e:	4798      	blx	r3
   80e70:	4603      	mov	r3, r0
   80e72:	e015      	b.n	80ea0 <udc_reqstd+0x13c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80e74:	4b0b      	ldr	r3, [pc, #44]	; (80ea4 <udc_reqstd+0x140>)
   80e76:	781b      	ldrb	r3, [r3, #0]
   80e78:	f003 031f 	and.w	r3, r3, #31
   80e7c:	2b02      	cmp	r3, #2
   80e7e:	d10e      	bne.n	80e9e <udc_reqstd+0x13a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   80e80:	4b08      	ldr	r3, [pc, #32]	; (80ea4 <udc_reqstd+0x140>)
   80e82:	785b      	ldrb	r3, [r3, #1]
   80e84:	2b01      	cmp	r3, #1
   80e86:	d002      	beq.n	80e8e <udc_reqstd+0x12a>
   80e88:	2b03      	cmp	r3, #3
   80e8a:	d004      	beq.n	80e96 <udc_reqstd+0x132>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   80e8c:	e007      	b.n	80e9e <udc_reqstd+0x13a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
   80e8e:	4b10      	ldr	r3, [pc, #64]	; (80ed0 <udc_reqstd+0x16c>)
   80e90:	4798      	blx	r3
   80e92:	4603      	mov	r3, r0
   80e94:	e004      	b.n	80ea0 <udc_reqstd+0x13c>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
   80e96:	4b0f      	ldr	r3, [pc, #60]	; (80ed4 <udc_reqstd+0x170>)
   80e98:	4798      	blx	r3
   80e9a:	4603      	mov	r3, r0
   80e9c:	e000      	b.n	80ea0 <udc_reqstd+0x13c>
				break;
			}
		}
#endif
	}
	return false;
   80e9e:	2300      	movs	r3, #0
}
   80ea0:	4618      	mov	r0, r3
   80ea2:	bd80      	pop	{r7, pc}
   80ea4:	2007086c 	.word	0x2007086c
   80ea8:	000807e1 	.word	0x000807e1
   80eac:	00080a59 	.word	0x00080a59
   80eb0:	00080b79 	.word	0x00080b79
   80eb4:	00080c65 	.word	0x00080c65
   80eb8:	0008080d 	.word	0x0008080d
   80ebc:	00080961 	.word	0x00080961
   80ec0:	00080851 	.word	0x00080851
   80ec4:	000808c9 	.word	0x000808c9
   80ec8:	00080ba5 	.word	0x00080ba5
   80ecc:	00080cfd 	.word	0x00080cfd
   80ed0:	00080891 	.word	0x00080891
   80ed4:	000808f9 	.word	0x000808f9

00080ed8 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   80ed8:	b580      	push	{r7, lr}
   80eda:	b082      	sub	sp, #8
   80edc:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   80ede:	4b20      	ldr	r3, [pc, #128]	; (80f60 <udc_req_iface+0x88>)
   80ee0:	781b      	ldrb	r3, [r3, #0]
   80ee2:	2b00      	cmp	r3, #0
   80ee4:	d101      	bne.n	80eea <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   80ee6:	2300      	movs	r3, #0
   80ee8:	e036      	b.n	80f58 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80eea:	4b1e      	ldr	r3, [pc, #120]	; (80f64 <udc_req_iface+0x8c>)
   80eec:	889b      	ldrh	r3, [r3, #4]
   80eee:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80ef0:	4b1d      	ldr	r3, [pc, #116]	; (80f68 <udc_req_iface+0x90>)
   80ef2:	681b      	ldr	r3, [r3, #0]
   80ef4:	681b      	ldr	r3, [r3, #0]
   80ef6:	791b      	ldrb	r3, [r3, #4]
   80ef8:	79fa      	ldrb	r2, [r7, #7]
   80efa:	429a      	cmp	r2, r3
   80efc:	d301      	bcc.n	80f02 <udc_req_iface+0x2a>
		return false;
   80efe:	2300      	movs	r3, #0
   80f00:	e02a      	b.n	80f58 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   80f02:	79fb      	ldrb	r3, [r7, #7]
   80f04:	4618      	mov	r0, r3
   80f06:	2100      	movs	r1, #0
   80f08:	4b18      	ldr	r3, [pc, #96]	; (80f6c <udc_req_iface+0x94>)
   80f0a:	4798      	blx	r3
   80f0c:	4603      	mov	r3, r0
   80f0e:	f083 0301 	eor.w	r3, r3, #1
   80f12:	b2db      	uxtb	r3, r3
   80f14:	2b00      	cmp	r3, #0
   80f16:	d001      	beq.n	80f1c <udc_req_iface+0x44>
		return false;
   80f18:	2300      	movs	r3, #0
   80f1a:	e01d      	b.n	80f58 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80f1c:	4b12      	ldr	r3, [pc, #72]	; (80f68 <udc_req_iface+0x90>)
   80f1e:	681b      	ldr	r3, [r3, #0]
   80f20:	685a      	ldr	r2, [r3, #4]
   80f22:	79fb      	ldrb	r3, [r7, #7]
   80f24:	009b      	lsls	r3, r3, #2
   80f26:	4413      	add	r3, r2
   80f28:	681b      	ldr	r3, [r3, #0]
   80f2a:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80f2c:	683b      	ldr	r3, [r7, #0]
   80f2e:	68db      	ldr	r3, [r3, #12]
   80f30:	4798      	blx	r3
   80f32:	4603      	mov	r3, r0
   80f34:	461a      	mov	r2, r3
   80f36:	79fb      	ldrb	r3, [r7, #7]
   80f38:	4618      	mov	r0, r3
   80f3a:	4611      	mov	r1, r2
   80f3c:	4b0b      	ldr	r3, [pc, #44]	; (80f6c <udc_req_iface+0x94>)
   80f3e:	4798      	blx	r3
   80f40:	4603      	mov	r3, r0
   80f42:	f083 0301 	eor.w	r3, r3, #1
   80f46:	b2db      	uxtb	r3, r3
   80f48:	2b00      	cmp	r3, #0
   80f4a:	d001      	beq.n	80f50 <udc_req_iface+0x78>
		return false;
   80f4c:	2300      	movs	r3, #0
   80f4e:	e003      	b.n	80f58 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   80f50:	683b      	ldr	r3, [r7, #0]
   80f52:	689b      	ldr	r3, [r3, #8]
   80f54:	4798      	blx	r3
   80f56:	4603      	mov	r3, r0
}
   80f58:	4618      	mov	r0, r3
   80f5a:	3708      	adds	r7, #8
   80f5c:	46bd      	mov	sp, r7
   80f5e:	bd80      	pop	{r7, pc}
   80f60:	20070744 	.word	0x20070744
   80f64:	2007086c 	.word	0x2007086c
   80f68:	20070748 	.word	0x20070748
   80f6c:	00080541 	.word	0x00080541

00080f70 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   80f70:	b580      	push	{r7, lr}
   80f72:	b082      	sub	sp, #8
   80f74:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   80f76:	4b1e      	ldr	r3, [pc, #120]	; (80ff0 <udc_req_ep+0x80>)
   80f78:	781b      	ldrb	r3, [r3, #0]
   80f7a:	2b00      	cmp	r3, #0
   80f7c:	d101      	bne.n	80f82 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   80f7e:	2300      	movs	r3, #0
   80f80:	e032      	b.n	80fe8 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80f82:	4b1c      	ldr	r3, [pc, #112]	; (80ff4 <udc_req_ep+0x84>)
   80f84:	889b      	ldrh	r3, [r3, #4]
   80f86:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80f88:	2300      	movs	r3, #0
   80f8a:	71fb      	strb	r3, [r7, #7]
   80f8c:	e024      	b.n	80fd8 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   80f8e:	4b1a      	ldr	r3, [pc, #104]	; (80ff8 <udc_req_ep+0x88>)
   80f90:	681b      	ldr	r3, [r3, #0]
   80f92:	685a      	ldr	r2, [r3, #4]
   80f94:	79fb      	ldrb	r3, [r7, #7]
   80f96:	009b      	lsls	r3, r3, #2
   80f98:	4413      	add	r3, r2
   80f9a:	681b      	ldr	r3, [r3, #0]
   80f9c:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80f9e:	683b      	ldr	r3, [r7, #0]
   80fa0:	68db      	ldr	r3, [r3, #12]
   80fa2:	4798      	blx	r3
   80fa4:	4603      	mov	r3, r0
   80fa6:	461a      	mov	r2, r3
   80fa8:	79fb      	ldrb	r3, [r7, #7]
   80faa:	4618      	mov	r0, r3
   80fac:	4611      	mov	r1, r2
   80fae:	4b13      	ldr	r3, [pc, #76]	; (80ffc <udc_req_ep+0x8c>)
   80fb0:	4798      	blx	r3
   80fb2:	4603      	mov	r3, r0
   80fb4:	f083 0301 	eor.w	r3, r3, #1
   80fb8:	b2db      	uxtb	r3, r3
   80fba:	2b00      	cmp	r3, #0
   80fbc:	d001      	beq.n	80fc2 <udc_req_ep+0x52>
			return false;
   80fbe:	2300      	movs	r3, #0
   80fc0:	e012      	b.n	80fe8 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   80fc2:	683b      	ldr	r3, [r7, #0]
   80fc4:	689b      	ldr	r3, [r3, #8]
   80fc6:	4798      	blx	r3
   80fc8:	4603      	mov	r3, r0
   80fca:	2b00      	cmp	r3, #0
   80fcc:	d001      	beq.n	80fd2 <udc_req_ep+0x62>
			return true;
   80fce:	2301      	movs	r3, #1
   80fd0:	e00a      	b.n	80fe8 <udc_req_ep+0x78>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   80fd2:	79fb      	ldrb	r3, [r7, #7]
   80fd4:	3301      	adds	r3, #1
   80fd6:	71fb      	strb	r3, [r7, #7]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80fd8:	4b07      	ldr	r3, [pc, #28]	; (80ff8 <udc_req_ep+0x88>)
   80fda:	681b      	ldr	r3, [r3, #0]
   80fdc:	681b      	ldr	r3, [r3, #0]
   80fde:	791b      	ldrb	r3, [r3, #4]
   80fe0:	79fa      	ldrb	r2, [r7, #7]
   80fe2:	429a      	cmp	r2, r3
   80fe4:	d3d3      	bcc.n	80f8e <udc_req_ep+0x1e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   80fe6:	2300      	movs	r3, #0
}
   80fe8:	4618      	mov	r0, r3
   80fea:	3708      	adds	r7, #8
   80fec:	46bd      	mov	sp, r7
   80fee:	bd80      	pop	{r7, pc}
   80ff0:	20070744 	.word	0x20070744
   80ff4:	2007086c 	.word	0x2007086c
   80ff8:	20070748 	.word	0x20070748
   80ffc:	00080541 	.word	0x00080541

00081000 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   81000:	b580      	push	{r7, lr}
   81002:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   81004:	4b1f      	ldr	r3, [pc, #124]	; (81084 <udc_process_setup+0x84>)
   81006:	2200      	movs	r2, #0
   81008:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   8100a:	4b1e      	ldr	r3, [pc, #120]	; (81084 <udc_process_setup+0x84>)
   8100c:	2200      	movs	r2, #0
   8100e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   81010:	4b1c      	ldr	r3, [pc, #112]	; (81084 <udc_process_setup+0x84>)
   81012:	2200      	movs	r2, #0
   81014:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   81016:	4b1b      	ldr	r3, [pc, #108]	; (81084 <udc_process_setup+0x84>)
   81018:	781b      	ldrb	r3, [r3, #0]
   8101a:	b2db      	uxtb	r3, r3
   8101c:	b25b      	sxtb	r3, r3
   8101e:	2b00      	cmp	r3, #0
   81020:	da05      	bge.n	8102e <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
   81022:	4b18      	ldr	r3, [pc, #96]	; (81084 <udc_process_setup+0x84>)
   81024:	88db      	ldrh	r3, [r3, #6]
   81026:	2b00      	cmp	r3, #0
   81028:	d101      	bne.n	8102e <udc_process_setup+0x2e>
			return false; // Error from USB host
   8102a:	2300      	movs	r3, #0
   8102c:	e027      	b.n	8107e <udc_process_setup+0x7e>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8102e:	4b15      	ldr	r3, [pc, #84]	; (81084 <udc_process_setup+0x84>)
   81030:	781b      	ldrb	r3, [r3, #0]
   81032:	f003 0360 	and.w	r3, r3, #96	; 0x60
   81036:	2b00      	cmp	r3, #0
   81038:	d106      	bne.n	81048 <udc_process_setup+0x48>
		if (udc_reqstd()) {
   8103a:	4b13      	ldr	r3, [pc, #76]	; (81088 <udc_process_setup+0x88>)
   8103c:	4798      	blx	r3
   8103e:	4603      	mov	r3, r0
   81040:	2b00      	cmp	r3, #0
   81042:	d001      	beq.n	81048 <udc_process_setup+0x48>
			return true;
   81044:	2301      	movs	r3, #1
   81046:	e01a      	b.n	8107e <udc_process_setup+0x7e>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   81048:	4b0e      	ldr	r3, [pc, #56]	; (81084 <udc_process_setup+0x84>)
   8104a:	781b      	ldrb	r3, [r3, #0]
   8104c:	f003 031f 	and.w	r3, r3, #31
   81050:	2b01      	cmp	r3, #1
   81052:	d106      	bne.n	81062 <udc_process_setup+0x62>
		if (udc_req_iface()) {
   81054:	4b0d      	ldr	r3, [pc, #52]	; (8108c <udc_process_setup+0x8c>)
   81056:	4798      	blx	r3
   81058:	4603      	mov	r3, r0
   8105a:	2b00      	cmp	r3, #0
   8105c:	d001      	beq.n	81062 <udc_process_setup+0x62>
			return true;
   8105e:	2301      	movs	r3, #1
   81060:	e00d      	b.n	8107e <udc_process_setup+0x7e>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   81062:	4b08      	ldr	r3, [pc, #32]	; (81084 <udc_process_setup+0x84>)
   81064:	781b      	ldrb	r3, [r3, #0]
   81066:	f003 031f 	and.w	r3, r3, #31
   8106a:	2b02      	cmp	r3, #2
   8106c:	d106      	bne.n	8107c <udc_process_setup+0x7c>
		if (udc_req_ep()) {
   8106e:	4b08      	ldr	r3, [pc, #32]	; (81090 <udc_process_setup+0x90>)
   81070:	4798      	blx	r3
   81072:	4603      	mov	r3, r0
   81074:	2b00      	cmp	r3, #0
   81076:	d001      	beq.n	8107c <udc_process_setup+0x7c>
			return true;
   81078:	2301      	movs	r3, #1
   8107a:	e000      	b.n	8107e <udc_process_setup+0x7e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   8107c:	2300      	movs	r3, #0
#endif
}
   8107e:	4618      	mov	r0, r3
   81080:	bd80      	pop	{r7, pc}
   81082:	bf00      	nop
   81084:	2007086c 	.word	0x2007086c
   81088:	00080d65 	.word	0x00080d65
   8108c:	00080ed9 	.word	0x00080ed9
   81090:	00080f71 	.word	0x00080f71

00081094 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81094:	b480      	push	{r7}
   81096:	b083      	sub	sp, #12
   81098:	af00      	add	r7, sp, #0
   8109a:	4603      	mov	r3, r0
   8109c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8109e:	4908      	ldr	r1, [pc, #32]	; (810c0 <NVIC_EnableIRQ+0x2c>)
   810a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   810a4:	095b      	lsrs	r3, r3, #5
   810a6:	79fa      	ldrb	r2, [r7, #7]
   810a8:	f002 021f 	and.w	r2, r2, #31
   810ac:	2001      	movs	r0, #1
   810ae:	fa00 f202 	lsl.w	r2, r0, r2
   810b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   810b6:	370c      	adds	r7, #12
   810b8:	46bd      	mov	sp, r7
   810ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   810be:	4770      	bx	lr
   810c0:	e000e100 	.word	0xe000e100

000810c4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   810c4:	b480      	push	{r7}
   810c6:	b083      	sub	sp, #12
   810c8:	af00      	add	r7, sp, #0
   810ca:	4603      	mov	r3, r0
   810cc:	6039      	str	r1, [r7, #0]
   810ce:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   810d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   810d4:	2b00      	cmp	r3, #0
   810d6:	da0b      	bge.n	810f0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   810d8:	490d      	ldr	r1, [pc, #52]	; (81110 <NVIC_SetPriority+0x4c>)
   810da:	79fb      	ldrb	r3, [r7, #7]
   810dc:	f003 030f 	and.w	r3, r3, #15
   810e0:	3b04      	subs	r3, #4
   810e2:	683a      	ldr	r2, [r7, #0]
   810e4:	b2d2      	uxtb	r2, r2
   810e6:	0112      	lsls	r2, r2, #4
   810e8:	b2d2      	uxtb	r2, r2
   810ea:	440b      	add	r3, r1
   810ec:	761a      	strb	r2, [r3, #24]
   810ee:	e009      	b.n	81104 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   810f0:	4908      	ldr	r1, [pc, #32]	; (81114 <NVIC_SetPriority+0x50>)
   810f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   810f6:	683a      	ldr	r2, [r7, #0]
   810f8:	b2d2      	uxtb	r2, r2
   810fa:	0112      	lsls	r2, r2, #4
   810fc:	b2d2      	uxtb	r2, r2
   810fe:	440b      	add	r3, r1
   81100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81104:	370c      	adds	r7, #12
   81106:	46bd      	mov	sp, r7
   81108:	f85d 7b04 	ldr.w	r7, [sp], #4
   8110c:	4770      	bx	lr
   8110e:	bf00      	nop
   81110:	e000ed00 	.word	0xe000ed00
   81114:	e000e100 	.word	0xe000e100

00081118 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   81118:	b480      	push	{r7}
   8111a:	b083      	sub	sp, #12
   8111c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8111e:	f3ef 8310 	mrs	r3, PRIMASK
   81122:	603b      	str	r3, [r7, #0]
  return(result);
   81124:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   81126:	2b00      	cmp	r3, #0
   81128:	bf0c      	ite	eq
   8112a:	2301      	moveq	r3, #1
   8112c:	2300      	movne	r3, #0
   8112e:	b2db      	uxtb	r3, r3
   81130:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81132:	b672      	cpsid	i
   81134:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81138:	4b04      	ldr	r3, [pc, #16]	; (8114c <cpu_irq_save+0x34>)
   8113a:	2200      	movs	r2, #0
   8113c:	701a      	strb	r2, [r3, #0]
	return flags;
   8113e:	687b      	ldr	r3, [r7, #4]
}
   81140:	4618      	mov	r0, r3
   81142:	370c      	adds	r7, #12
   81144:	46bd      	mov	sp, r7
   81146:	f85d 7b04 	ldr.w	r7, [sp], #4
   8114a:	4770      	bx	lr
   8114c:	20070268 	.word	0x20070268

00081150 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   81150:	b480      	push	{r7}
   81152:	b083      	sub	sp, #12
   81154:	af00      	add	r7, sp, #0
   81156:	6078      	str	r0, [r7, #4]
	return (flags);
   81158:	687b      	ldr	r3, [r7, #4]
   8115a:	2b00      	cmp	r3, #0
   8115c:	bf14      	ite	ne
   8115e:	2301      	movne	r3, #1
   81160:	2300      	moveq	r3, #0
   81162:	b2db      	uxtb	r3, r3
}
   81164:	4618      	mov	r0, r3
   81166:	370c      	adds	r7, #12
   81168:	46bd      	mov	sp, r7
   8116a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8116e:	4770      	bx	lr

00081170 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   81170:	b580      	push	{r7, lr}
   81172:	b082      	sub	sp, #8
   81174:	af00      	add	r7, sp, #0
   81176:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   81178:	6878      	ldr	r0, [r7, #4]
   8117a:	4b07      	ldr	r3, [pc, #28]	; (81198 <cpu_irq_restore+0x28>)
   8117c:	4798      	blx	r3
   8117e:	4603      	mov	r3, r0
   81180:	2b00      	cmp	r3, #0
   81182:	d005      	beq.n	81190 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   81184:	4b05      	ldr	r3, [pc, #20]	; (8119c <cpu_irq_restore+0x2c>)
   81186:	2201      	movs	r2, #1
   81188:	701a      	strb	r2, [r3, #0]
   8118a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8118e:	b662      	cpsie	i
}
   81190:	3708      	adds	r7, #8
   81192:	46bd      	mov	sp, r7
   81194:	bd80      	pop	{r7, pc}
   81196:	bf00      	nop
   81198:	00081151 	.word	0x00081151
   8119c:	20070268 	.word	0x20070268

000811a0 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
   811a0:	b580      	push	{r7, lr}
   811a2:	b084      	sub	sp, #16
   811a4:	af00      	add	r7, sp, #0
   811a6:	4603      	mov	r3, r0
   811a8:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
   811aa:	79fb      	ldrb	r3, [r7, #7]
   811ac:	4a0a      	ldr	r2, [pc, #40]	; (811d8 <sleepmgr_lock_mode+0x38>)
   811ae:	5cd3      	ldrb	r3, [r2, r3]
   811b0:	2bff      	cmp	r3, #255	; 0xff
   811b2:	d100      	bne.n	811b6 <sleepmgr_lock_mode+0x16>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
   811b4:	e7fe      	b.n	811b4 <sleepmgr_lock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
   811b6:	4b09      	ldr	r3, [pc, #36]	; (811dc <sleepmgr_lock_mode+0x3c>)
   811b8:	4798      	blx	r3
   811ba:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
   811bc:	79fb      	ldrb	r3, [r7, #7]
   811be:	4a06      	ldr	r2, [pc, #24]	; (811d8 <sleepmgr_lock_mode+0x38>)
   811c0:	5cd2      	ldrb	r2, [r2, r3]
   811c2:	3201      	adds	r2, #1
   811c4:	b2d1      	uxtb	r1, r2
   811c6:	4a04      	ldr	r2, [pc, #16]	; (811d8 <sleepmgr_lock_mode+0x38>)
   811c8:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
   811ca:	68f8      	ldr	r0, [r7, #12]
   811cc:	4b04      	ldr	r3, [pc, #16]	; (811e0 <sleepmgr_lock_mode+0x40>)
   811ce:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   811d0:	3710      	adds	r7, #16
   811d2:	46bd      	mov	sp, r7
   811d4:	bd80      	pop	{r7, pc}
   811d6:	bf00      	nop
   811d8:	20070864 	.word	0x20070864
   811dc:	00081119 	.word	0x00081119
   811e0:	00081171 	.word	0x00081171

000811e4 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
   811e4:	b580      	push	{r7, lr}
   811e6:	b084      	sub	sp, #16
   811e8:	af00      	add	r7, sp, #0
   811ea:	4603      	mov	r3, r0
   811ec:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
   811ee:	79fb      	ldrb	r3, [r7, #7]
   811f0:	4a0a      	ldr	r2, [pc, #40]	; (8121c <sleepmgr_unlock_mode+0x38>)
   811f2:	5cd3      	ldrb	r3, [r2, r3]
   811f4:	2b00      	cmp	r3, #0
   811f6:	d100      	bne.n	811fa <sleepmgr_unlock_mode+0x16>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
   811f8:	e7fe      	b.n	811f8 <sleepmgr_unlock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
   811fa:	4b09      	ldr	r3, [pc, #36]	; (81220 <sleepmgr_unlock_mode+0x3c>)
   811fc:	4798      	blx	r3
   811fe:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
   81200:	79fb      	ldrb	r3, [r7, #7]
   81202:	4a06      	ldr	r2, [pc, #24]	; (8121c <sleepmgr_unlock_mode+0x38>)
   81204:	5cd2      	ldrb	r2, [r2, r3]
   81206:	3a01      	subs	r2, #1
   81208:	b2d1      	uxtb	r1, r2
   8120a:	4a04      	ldr	r2, [pc, #16]	; (8121c <sleepmgr_unlock_mode+0x38>)
   8120c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
   8120e:	68f8      	ldr	r0, [r7, #12]
   81210:	4b04      	ldr	r3, [pc, #16]	; (81224 <sleepmgr_unlock_mode+0x40>)
   81212:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   81214:	3710      	adds	r7, #16
   81216:	46bd      	mov	sp, r7
   81218:	bd80      	pop	{r7, pc}
   8121a:	bf00      	nop
   8121c:	20070864 	.word	0x20070864
   81220:	00081119 	.word	0x00081119
   81224:	00081171 	.word	0x00081171

00081228 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   81228:	b580      	push	{r7, lr}
   8122a:	b082      	sub	sp, #8
   8122c:	af00      	add	r7, sp, #0
   8122e:	4603      	mov	r3, r0
   81230:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   81232:	79fb      	ldrb	r3, [r7, #7]
   81234:	f083 0301 	eor.w	r3, r3, #1
   81238:	b2db      	uxtb	r3, r3
   8123a:	2b00      	cmp	r3, #0
   8123c:	d006      	beq.n	8124c <udd_sleep_mode+0x24>
   8123e:	4b0d      	ldr	r3, [pc, #52]	; (81274 <udd_sleep_mode+0x4c>)
   81240:	781b      	ldrb	r3, [r3, #0]
   81242:	2b00      	cmp	r3, #0
   81244:	d002      	beq.n	8124c <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
   81246:	2002      	movs	r0, #2
   81248:	4b0b      	ldr	r3, [pc, #44]	; (81278 <udd_sleep_mode+0x50>)
   8124a:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   8124c:	79fb      	ldrb	r3, [r7, #7]
   8124e:	2b00      	cmp	r3, #0
   81250:	d009      	beq.n	81266 <udd_sleep_mode+0x3e>
   81252:	4b08      	ldr	r3, [pc, #32]	; (81274 <udd_sleep_mode+0x4c>)
   81254:	781b      	ldrb	r3, [r3, #0]
   81256:	f083 0301 	eor.w	r3, r3, #1
   8125a:	b2db      	uxtb	r3, r3
   8125c:	2b00      	cmp	r3, #0
   8125e:	d002      	beq.n	81266 <udd_sleep_mode+0x3e>
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
   81260:	2002      	movs	r0, #2
   81262:	4b06      	ldr	r3, [pc, #24]	; (8127c <udd_sleep_mode+0x54>)
   81264:	4798      	blx	r3
	}
	udd_b_idle = b_idle;
   81266:	4a03      	ldr	r2, [pc, #12]	; (81274 <udd_sleep_mode+0x4c>)
   81268:	79fb      	ldrb	r3, [r7, #7]
   8126a:	7013      	strb	r3, [r2, #0]
}
   8126c:	3708      	adds	r7, #8
   8126e:	46bd      	mov	sp, r7
   81270:	bd80      	pop	{r7, pc}
   81272:	bf00      	nop
   81274:	20070752 	.word	0x20070752
   81278:	000811e5 	.word	0x000811e5
   8127c:	000811a1 	.word	0x000811a1

00081280 <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   81280:	b580      	push	{r7, lr}
   81282:	af00      	add	r7, sp, #0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   81284:	4b68      	ldr	r3, [pc, #416]	; (81428 <UOTGHS_Handler+0x1a8>)
   81286:	4798      	blx	r3
   81288:	4603      	mov	r3, r0
   8128a:	f083 0301 	eor.w	r3, r3, #1
   8128e:	b2db      	uxtb	r3, r3
   81290:	2b00      	cmp	r3, #0
   81292:	d00c      	beq.n	812ae <UOTGHS_Handler+0x2e>
   81294:	4b65      	ldr	r3, [pc, #404]	; (8142c <UOTGHS_Handler+0x1ac>)
   81296:	685b      	ldr	r3, [r3, #4]
   81298:	f003 0301 	and.w	r3, r3, #1
   8129c:	2b00      	cmp	r3, #0
   8129e:	d106      	bne.n	812ae <UOTGHS_Handler+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   812a0:	b672      	cpsid	i
   812a2:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   812a6:	4b62      	ldr	r3, [pc, #392]	; (81430 <UOTGHS_Handler+0x1b0>)
   812a8:	2200      	movs	r2, #0
   812aa:	701a      	strb	r2, [r3, #0]
		return;
   812ac:	e0ba      	b.n	81424 <UOTGHS_Handler+0x1a4>
	}

	if (Is_udd_sof()) {
   812ae:	4b5f      	ldr	r3, [pc, #380]	; (8142c <UOTGHS_Handler+0x1ac>)
   812b0:	685b      	ldr	r3, [r3, #4]
   812b2:	f003 0304 	and.w	r3, r3, #4
   812b6:	2b00      	cmp	r3, #0
   812b8:	d00e      	beq.n	812d8 <UOTGHS_Handler+0x58>
		udd_ack_sof();
   812ba:	4b5c      	ldr	r3, [pc, #368]	; (8142c <UOTGHS_Handler+0x1ac>)
   812bc:	2204      	movs	r2, #4
   812be:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
   812c0:	4b5a      	ldr	r3, [pc, #360]	; (8142c <UOTGHS_Handler+0x1ac>)
   812c2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   812c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   812ca:	0b1b      	lsrs	r3, r3, #12
   812cc:	2b00      	cmp	r3, #0
   812ce:	d102      	bne.n	812d6 <UOTGHS_Handler+0x56>
			udc_sof_notify();
   812d0:	4b58      	ldr	r3, [pc, #352]	; (81434 <UOTGHS_Handler+0x1b4>)
   812d2:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
   812d4:	e0a5      	b.n	81422 <UOTGHS_Handler+0x1a2>
   812d6:	e0a4      	b.n	81422 <UOTGHS_Handler+0x1a2>
	}

	if (Is_udd_msof()) {
   812d8:	4b54      	ldr	r3, [pc, #336]	; (8142c <UOTGHS_Handler+0x1ac>)
   812da:	685b      	ldr	r3, [r3, #4]
   812dc:	f003 0302 	and.w	r3, r3, #2
   812e0:	2b00      	cmp	r3, #0
   812e2:	d005      	beq.n	812f0 <UOTGHS_Handler+0x70>
		udd_ack_msof();
   812e4:	4b51      	ldr	r3, [pc, #324]	; (8142c <UOTGHS_Handler+0x1ac>)
   812e6:	2202      	movs	r2, #2
   812e8:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
   812ea:	4b52      	ldr	r3, [pc, #328]	; (81434 <UOTGHS_Handler+0x1b4>)
   812ec:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   812ee:	e098      	b.n	81422 <UOTGHS_Handler+0x1a2>
	}

	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   812f0:	4b51      	ldr	r3, [pc, #324]	; (81438 <UOTGHS_Handler+0x1b8>)
   812f2:	4798      	blx	r3
   812f4:	4603      	mov	r3, r0
   812f6:	2b00      	cmp	r3, #0
   812f8:	d000      	beq.n	812fc <UOTGHS_Handler+0x7c>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   812fa:	e092      	b.n	81422 <UOTGHS_Handler+0x1a2>
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   812fc:	4b4f      	ldr	r3, [pc, #316]	; (8143c <UOTGHS_Handler+0x1bc>)
   812fe:	4798      	blx	r3
   81300:	4603      	mov	r3, r0
   81302:	2b00      	cmp	r3, #0
   81304:	d000      	beq.n	81308 <UOTGHS_Handler+0x88>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   81306:	e08c      	b.n	81422 <UOTGHS_Handler+0x1a2>
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   81308:	4b48      	ldr	r3, [pc, #288]	; (8142c <UOTGHS_Handler+0x1ac>)
   8130a:	685b      	ldr	r3, [r3, #4]
   8130c:	f003 0308 	and.w	r3, r3, #8
   81310:	2b00      	cmp	r3, #0
   81312:	d00b      	beq.n	8132c <UOTGHS_Handler+0xac>
		udd_ack_reset();
   81314:	4b45      	ldr	r3, [pc, #276]	; (8142c <UOTGHS_Handler+0x1ac>)
   81316:	2208      	movs	r2, #8
   81318:	609a      	str	r2, [r3, #8]
		dbg_print("RST ");
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   8131a:	4b49      	ldr	r3, [pc, #292]	; (81440 <UOTGHS_Handler+0x1c0>)
   8131c:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   8131e:	4b49      	ldr	r3, [pc, #292]	; (81444 <UOTGHS_Handler+0x1c4>)
   81320:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   81322:	4b49      	ldr	r3, [pc, #292]	; (81448 <UOTGHS_Handler+0x1c8>)
   81324:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   81326:	4b49      	ldr	r3, [pc, #292]	; (8144c <UOTGHS_Handler+0x1cc>)
   81328:	4798      	blx	r3
		goto udd_interrupt_end;
   8132a:	e07a      	b.n	81422 <UOTGHS_Handler+0x1a2>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   8132c:	4b3f      	ldr	r3, [pc, #252]	; (8142c <UOTGHS_Handler+0x1ac>)
   8132e:	691b      	ldr	r3, [r3, #16]
   81330:	f003 0301 	and.w	r3, r3, #1
   81334:	2b00      	cmp	r3, #0
   81336:	d01f      	beq.n	81378 <UOTGHS_Handler+0xf8>
   81338:	4b3c      	ldr	r3, [pc, #240]	; (8142c <UOTGHS_Handler+0x1ac>)
   8133a:	685b      	ldr	r3, [r3, #4]
   8133c:	f003 0301 	and.w	r3, r3, #1
   81340:	2b00      	cmp	r3, #0
   81342:	d019      	beq.n	81378 <UOTGHS_Handler+0xf8>
		otg_unfreeze_clock();
   81344:	4a39      	ldr	r2, [pc, #228]	; (8142c <UOTGHS_Handler+0x1ac>)
   81346:	4b39      	ldr	r3, [pc, #228]	; (8142c <UOTGHS_Handler+0x1ac>)
   81348:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   8134c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   81350:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   81354:	4b35      	ldr	r3, [pc, #212]	; (8142c <UOTGHS_Handler+0x1ac>)
   81356:	2201      	movs	r2, #1
   81358:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
   8135a:	4b34      	ldr	r3, [pc, #208]	; (8142c <UOTGHS_Handler+0x1ac>)
   8135c:	2210      	movs	r2, #16
   8135e:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   81360:	4a32      	ldr	r2, [pc, #200]	; (8142c <UOTGHS_Handler+0x1ac>)
   81362:	4b32      	ldr	r3, [pc, #200]	; (8142c <UOTGHS_Handler+0x1ac>)
   81364:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   8136c:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   81370:	2000      	movs	r0, #0
   81372:	4b37      	ldr	r3, [pc, #220]	; (81450 <UOTGHS_Handler+0x1d0>)
   81374:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
   81376:	e054      	b.n	81422 <UOTGHS_Handler+0x1a2>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   81378:	4b2c      	ldr	r3, [pc, #176]	; (8142c <UOTGHS_Handler+0x1ac>)
   8137a:	691b      	ldr	r3, [r3, #16]
   8137c:	f003 0310 	and.w	r3, r3, #16
   81380:	2b00      	cmp	r3, #0
   81382:	d026      	beq.n	813d2 <UOTGHS_Handler+0x152>
   81384:	4b29      	ldr	r3, [pc, #164]	; (8142c <UOTGHS_Handler+0x1ac>)
   81386:	685b      	ldr	r3, [r3, #4]
   81388:	f003 0310 	and.w	r3, r3, #16
   8138c:	2b00      	cmp	r3, #0
   8138e:	d020      	beq.n	813d2 <UOTGHS_Handler+0x152>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   81390:	4a26      	ldr	r2, [pc, #152]	; (8142c <UOTGHS_Handler+0x1ac>)
   81392:	4b26      	ldr	r3, [pc, #152]	; (8142c <UOTGHS_Handler+0x1ac>)
   81394:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   8139c:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   813a0:	e006      	b.n	813b0 <UOTGHS_Handler+0x130>
			if (Is_udd_suspend()) {
   813a2:	4b22      	ldr	r3, [pc, #136]	; (8142c <UOTGHS_Handler+0x1ac>)
   813a4:	685b      	ldr	r3, [r3, #4]
   813a6:	f003 0301 	and.w	r3, r3, #1
   813aa:	2b00      	cmp	r3, #0
   813ac:	d000      	beq.n	813b0 <UOTGHS_Handler+0x130>
				break; // In case of USB state change in HS
   813ae:	e006      	b.n	813be <UOTGHS_Handler+0x13e>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   813b0:	4b1e      	ldr	r3, [pc, #120]	; (8142c <UOTGHS_Handler+0x1ac>)
   813b2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   813b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   813ba:	2b00      	cmp	r3, #0
   813bc:	d0f1      	beq.n	813a2 <UOTGHS_Handler+0x122>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   813be:	4b1b      	ldr	r3, [pc, #108]	; (8142c <UOTGHS_Handler+0x1ac>)
   813c0:	2210      	movs	r2, #16
   813c2:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
   813c4:	4b19      	ldr	r3, [pc, #100]	; (8142c <UOTGHS_Handler+0x1ac>)
   813c6:	2201      	movs	r2, #1
   813c8:	619a      	str	r2, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   813ca:	2001      	movs	r0, #1
   813cc:	4b20      	ldr	r3, [pc, #128]	; (81450 <UOTGHS_Handler+0x1d0>)
   813ce:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
   813d0:	e027      	b.n	81422 <UOTGHS_Handler+0x1a2>
	}

	if (Is_otg_vbus_transition()) {
   813d2:	4b16      	ldr	r3, [pc, #88]	; (8142c <UOTGHS_Handler+0x1ac>)
   813d4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   813d8:	f003 0302 	and.w	r3, r3, #2
   813dc:	2b00      	cmp	r3, #0
   813de:	d020      	beq.n	81422 <UOTGHS_Handler+0x1a2>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   813e0:	4a12      	ldr	r2, [pc, #72]	; (8142c <UOTGHS_Handler+0x1ac>)
   813e2:	4b12      	ldr	r3, [pc, #72]	; (8142c <UOTGHS_Handler+0x1ac>)
   813e4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   813e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   813ec:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		otg_ack_vbus_transition();
   813f0:	4b0e      	ldr	r3, [pc, #56]	; (8142c <UOTGHS_Handler+0x1ac>)
   813f2:	2202      	movs	r2, #2
   813f4:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
		otg_freeze_clock();
   813f8:	4a0c      	ldr	r2, [pc, #48]	; (8142c <UOTGHS_Handler+0x1ac>)
   813fa:	4b0c      	ldr	r3, [pc, #48]	; (8142c <UOTGHS_Handler+0x1ac>)
   813fc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   81404:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   81408:	4b08      	ldr	r3, [pc, #32]	; (8142c <UOTGHS_Handler+0x1ac>)
   8140a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   8140e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   81412:	2b00      	cmp	r3, #0
   81414:	d002      	beq.n	8141c <UOTGHS_Handler+0x19c>
			udd_attach();
   81416:	4b0f      	ldr	r3, [pc, #60]	; (81454 <UOTGHS_Handler+0x1d4>)
   81418:	4798      	blx	r3
   8141a:	e001      	b.n	81420 <UOTGHS_Handler+0x1a0>
		} else {
			udd_detach();
   8141c:	4b0e      	ldr	r3, [pc, #56]	; (81458 <UOTGHS_Handler+0x1d8>)
   8141e:	4798      	blx	r3
		}
#endif
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
   81420:	bf00      	nop
	}
udd_interrupt_end:
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   81422:	bf00      	nop
}
   81424:	bd80      	pop	{r7, pc}
   81426:	bf00      	nop
   81428:	00083955 	.word	0x00083955
   8142c:	400ac000 	.word	0x400ac000
   81430:	20070268 	.word	0x20070268
   81434:	00080785 	.word	0x00080785
   81438:	0008251d 	.word	0x0008251d
   8143c:	00082931 	.word	0x00082931
   81440:	00082645 	.word	0x00082645
   81444:	00080731 	.word	0x00080731
   81448:	00081ec9 	.word	0x00081ec9
   8144c:	00081f49 	.word	0x00081f49
   81450:	00081229 	.word	0x00081229
   81454:	000815bd 	.word	0x000815bd
   81458:	0008165d 	.word	0x0008165d

0008145c <udd_enable>:
	return true;
}


void udd_enable(void)
{
   8145c:	b580      	push	{r7, lr}
   8145e:	b082      	sub	sp, #8
   81460:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
   81462:	4b49      	ldr	r3, [pc, #292]	; (81588 <udd_enable+0x12c>)
   81464:	4798      	blx	r3
   81466:	6078      	str	r0, [r7, #4]
		cpu_irq_restore(flags);
		return;
	}
#else
	// SINGLE DEVICE MODE INITIALIZATION
	pmc_enable_periph_clk(ID_UOTGHS);
   81468:	2028      	movs	r0, #40	; 0x28
   8146a:	4b48      	ldr	r3, [pc, #288]	; (8158c <udd_enable+0x130>)
   8146c:	4798      	blx	r3
	sysclk_enable_usb();
   8146e:	4b48      	ldr	r3, [pc, #288]	; (81590 <udd_enable+0x134>)
   81470:	4798      	blx	r3

	// Here, only the device mode is possible, then link UOTGHS interrupt to UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UOTGHS, UDD_USB_INT_LEVEL);
   81472:	2028      	movs	r0, #40	; 0x28
   81474:	2105      	movs	r1, #5
   81476:	4b47      	ldr	r3, [pc, #284]	; (81594 <udd_enable+0x138>)
   81478:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UOTGHS);
   8147a:	2028      	movs	r0, #40	; 0x28
   8147c:	4b46      	ldr	r3, [pc, #280]	; (81598 <udd_enable+0x13c>)
   8147e:	4798      	blx	r3

	// Always authorize asynchrone USB interrupts to exit of sleep mode
	// For SAM USB wake up device except BACKUP mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   81480:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   81484:	4b45      	ldr	r3, [pc, #276]	; (8159c <udd_enable+0x140>)
   81486:	4798      	blx	r3
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
   81488:	4a45      	ldr	r2, [pc, #276]	; (815a0 <udd_enable+0x144>)
   8148a:	4b45      	ldr	r3, [pc, #276]	; (815a0 <udd_enable+0x144>)
   8148c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81490:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   81494:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	otg_force_device_mode();
   81498:	4a41      	ldr	r2, [pc, #260]	; (815a0 <udd_enable+0x144>)
   8149a:	4b41      	ldr	r3, [pc, #260]	; (815a0 <udd_enable+0x144>)
   8149c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   814a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   814a4:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
   814a8:	4a3d      	ldr	r2, [pc, #244]	; (815a0 <udd_enable+0x144>)
   814aa:	4b3d      	ldr	r3, [pc, #244]	; (815a0 <udd_enable+0x144>)
   814ac:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   814b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   814b4:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
#endif
	// Enable USB hardware
	otg_enable_pad();
   814b8:	4a39      	ldr	r2, [pc, #228]	; (815a0 <udd_enable+0x144>)
   814ba:	4b39      	ldr	r3, [pc, #228]	; (815a0 <udd_enable+0x144>)
   814bc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   814c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   814c4:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	otg_enable();
   814c8:	4a35      	ldr	r2, [pc, #212]	; (815a0 <udd_enable+0x144>)
   814ca:	4b35      	ldr	r3, [pc, #212]	; (815a0 <udd_enable+0x144>)
   814cc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   814d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   814d4:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
   814d8:	4a31      	ldr	r2, [pc, #196]	; (815a0 <udd_enable+0x144>)
   814da:	4b31      	ldr	r3, [pc, #196]	; (815a0 <udd_enable+0x144>)
   814dc:	681b      	ldr	r3, [r3, #0]
   814de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   814e2:	6013      	str	r3, [r2, #0]
# ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
# else
	udd_high_speed_disable();
   814e4:	4a2e      	ldr	r2, [pc, #184]	; (815a0 <udd_enable+0x144>)
   814e6:	4b2e      	ldr	r3, [pc, #184]	; (815a0 <udd_enable+0x144>)
   814e8:	681b      	ldr	r3, [r3, #0]
   814ea:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   814ee:	6013      	str	r3, [r2, #0]
# endif
#endif // USB_DEVICE_LOW_SPEED

	// Check USB clock
	otg_unfreeze_clock();
   814f0:	4a2b      	ldr	r2, [pc, #172]	; (815a0 <udd_enable+0x144>)
   814f2:	4b2b      	ldr	r3, [pc, #172]	; (815a0 <udd_enable+0x144>)
   814f4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   814f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   814fc:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   81500:	bf00      	nop
   81502:	4b27      	ldr	r3, [pc, #156]	; (815a0 <udd_enable+0x144>)
   81504:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   8150c:	2b00      	cmp	r3, #0
   8150e:	d0f8      	beq.n	81502 <udd_enable+0xa6>

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   81510:	4b24      	ldr	r3, [pc, #144]	; (815a4 <udd_enable+0x148>)
   81512:	4798      	blx	r3
#endif

	otg_ack_vbus_transition();
   81514:	4b22      	ldr	r3, [pc, #136]	; (815a0 <udd_enable+0x144>)
   81516:	2202      	movs	r2, #2
   81518:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
   8151c:	4b20      	ldr	r3, [pc, #128]	; (815a0 <udd_enable+0x144>)
   8151e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   81526:	2b00      	cmp	r3, #0
   81528:	d003      	beq.n	81532 <udd_enable+0xd6>
		otg_raise_vbus_transition();
   8152a:	4b1d      	ldr	r3, [pc, #116]	; (815a0 <udd_enable+0x144>)
   8152c:	2202      	movs	r2, #2
   8152e:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
	}
	otg_enable_vbus_interrupt();
   81532:	4a1b      	ldr	r2, [pc, #108]	; (815a0 <udd_enable+0x144>)
   81534:	4b1a      	ldr	r3, [pc, #104]	; (815a0 <udd_enable+0x144>)
   81536:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   8153a:	f043 0302 	orr.w	r3, r3, #2
   8153e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	otg_freeze_clock();
   81542:	4a17      	ldr	r2, [pc, #92]	; (815a0 <udd_enable+0x144>)
   81544:	4b16      	ldr	r3, [pc, #88]	; (815a0 <udd_enable+0x144>)
   81546:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   8154a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   8154e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_sleep_initialized) {
   81552:	4b15      	ldr	r3, [pc, #84]	; (815a8 <udd_enable+0x14c>)
   81554:	781b      	ldrb	r3, [r3, #0]
   81556:	f083 0301 	eor.w	r3, r3, #1
   8155a:	b2db      	uxtb	r3, r3
   8155c:	2b00      	cmp	r3, #0
   8155e:	d009      	beq.n	81574 <udd_enable+0x118>
		udd_b_sleep_initialized = true;
   81560:	4b11      	ldr	r3, [pc, #68]	; (815a8 <udd_enable+0x14c>)
   81562:	2201      	movs	r2, #1
   81564:	701a      	strb	r2, [r3, #0]
		// Initialize the sleep mode authorized for the USB suspend mode
		udd_b_idle = false;
   81566:	4b11      	ldr	r3, [pc, #68]	; (815ac <udd_enable+0x150>)
   81568:	2200      	movs	r2, #0
   8156a:	701a      	strb	r2, [r3, #0]
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_SUSPEND);
   8156c:	2003      	movs	r0, #3
   8156e:	4b10      	ldr	r3, [pc, #64]	; (815b0 <udd_enable+0x154>)
   81570:	4798      	blx	r3
   81572:	e002      	b.n	8157a <udd_enable+0x11e>
	} else {
		udd_sleep_mode(false); // Enter idle mode
   81574:	2000      	movs	r0, #0
   81576:	4b0f      	ldr	r3, [pc, #60]	; (815b4 <udd_enable+0x158>)
   81578:	4798      	blx	r3
	}
#endif

	cpu_irq_restore(flags);
   8157a:	6878      	ldr	r0, [r7, #4]
   8157c:	4b0e      	ldr	r3, [pc, #56]	; (815b8 <udd_enable+0x15c>)
   8157e:	4798      	blx	r3
}
   81580:	3708      	adds	r7, #8
   81582:	46bd      	mov	sp, r7
   81584:	bd80      	pop	{r7, pc}
   81586:	bf00      	nop
   81588:	00081119 	.word	0x00081119
   8158c:	00083865 	.word	0x00083865
   81590:	00082f79 	.word	0x00082f79
   81594:	000810c5 	.word	0x000810c5
   81598:	00081095 	.word	0x00081095
   8159c:	00083929 	.word	0x00083929
   815a0:	400ac000 	.word	0x400ac000
   815a4:	000825e9 	.word	0x000825e9
   815a8:	20070753 	.word	0x20070753
   815ac:	20070752 	.word	0x20070752
   815b0:	000811a1 	.word	0x000811a1
   815b4:	00081229 	.word	0x00081229
   815b8:	00081171 	.word	0x00081171

000815bc <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   815bc:	b580      	push	{r7, lr}
   815be:	b082      	sub	sp, #8
   815c0:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   815c2:	4b22      	ldr	r3, [pc, #136]	; (8164c <udd_attach+0x90>)
   815c4:	4798      	blx	r3
   815c6:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   815c8:	2001      	movs	r0, #1
   815ca:	4b21      	ldr	r3, [pc, #132]	; (81650 <udd_attach+0x94>)
   815cc:	4798      	blx	r3
	otg_unfreeze_clock();
   815ce:	4a21      	ldr	r2, [pc, #132]	; (81654 <udd_attach+0x98>)
   815d0:	4b20      	ldr	r3, [pc, #128]	; (81654 <udd_attach+0x98>)
   815d2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   815d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   815da:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800

	// This section of clock check can be improved with a chek of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   815de:	bf00      	nop
   815e0:	4b1c      	ldr	r3, [pc, #112]	; (81654 <udd_attach+0x98>)
   815e2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   815e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   815ea:	2b00      	cmp	r3, #0
   815ec:	d0f8      	beq.n	815e0 <udd_attach+0x24>

	// Authorize attach if Vbus is present
	udd_attach_device();
   815ee:	4a19      	ldr	r2, [pc, #100]	; (81654 <udd_attach+0x98>)
   815f0:	4b18      	ldr	r3, [pc, #96]	; (81654 <udd_attach+0x98>)
   815f2:	681b      	ldr	r3, [r3, #0]
   815f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   815f8:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   815fa:	4b16      	ldr	r3, [pc, #88]	; (81654 <udd_attach+0x98>)
   815fc:	2208      	movs	r2, #8
   815fe:	619a      	str	r2, [r3, #24]
	udd_enable_suspend_interrupt();
   81600:	4b14      	ldr	r3, [pc, #80]	; (81654 <udd_attach+0x98>)
   81602:	2201      	movs	r2, #1
   81604:	619a      	str	r2, [r3, #24]
	udd_enable_wake_up_interrupt();
   81606:	4b13      	ldr	r3, [pc, #76]	; (81654 <udd_attach+0x98>)
   81608:	2210      	movs	r2, #16
   8160a:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   8160c:	4b11      	ldr	r3, [pc, #68]	; (81654 <udd_attach+0x98>)
   8160e:	2204      	movs	r2, #4
   81610:	619a      	str	r2, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
   81612:	4b10      	ldr	r3, [pc, #64]	; (81654 <udd_attach+0x98>)
   81614:	2208      	movs	r2, #8
   81616:	609a      	str	r2, [r3, #8]
	udd_ack_sof();
   81618:	4b0e      	ldr	r3, [pc, #56]	; (81654 <udd_attach+0x98>)
   8161a:	2204      	movs	r2, #4
   8161c:	609a      	str	r2, [r3, #8]
	udd_ack_msof();
   8161e:	4b0d      	ldr	r3, [pc, #52]	; (81654 <udd_attach+0x98>)
   81620:	2202      	movs	r2, #2
   81622:	609a      	str	r2, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   81624:	4b0b      	ldr	r3, [pc, #44]	; (81654 <udd_attach+0x98>)
   81626:	2201      	movs	r2, #1
   81628:	60da      	str	r2, [r3, #12]

	udd_ack_wake_up();
   8162a:	4b0a      	ldr	r3, [pc, #40]	; (81654 <udd_attach+0x98>)
   8162c:	2210      	movs	r2, #16
   8162e:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   81630:	4a08      	ldr	r2, [pc, #32]	; (81654 <udd_attach+0x98>)
   81632:	4b08      	ldr	r3, [pc, #32]	; (81654 <udd_attach+0x98>)
   81634:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   8163c:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	cpu_irq_restore(flags);
   81640:	6878      	ldr	r0, [r7, #4]
   81642:	4b05      	ldr	r3, [pc, #20]	; (81658 <udd_attach+0x9c>)
   81644:	4798      	blx	r3
}
   81646:	3708      	adds	r7, #8
   81648:	46bd      	mov	sp, r7
   8164a:	bd80      	pop	{r7, pc}
   8164c:	00081119 	.word	0x00081119
   81650:	00081229 	.word	0x00081229
   81654:	400ac000 	.word	0x400ac000
   81658:	00081171 	.word	0x00081171

0008165c <udd_detach>:


void udd_detach(void)
{
   8165c:	b580      	push	{r7, lr}
   8165e:	af00      	add	r7, sp, #0
	otg_unfreeze_clock();
   81660:	4a0c      	ldr	r2, [pc, #48]	; (81694 <udd_detach+0x38>)
   81662:	4b0c      	ldr	r3, [pc, #48]	; (81694 <udd_detach+0x38>)
   81664:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   8166c:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   81670:	4a08      	ldr	r2, [pc, #32]	; (81694 <udd_detach+0x38>)
   81672:	4b08      	ldr	r3, [pc, #32]	; (81694 <udd_detach+0x38>)
   81674:	681b      	ldr	r3, [r3, #0]
   81676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8167a:	6013      	str	r3, [r2, #0]
	otg_freeze_clock();
   8167c:	4a05      	ldr	r2, [pc, #20]	; (81694 <udd_detach+0x38>)
   8167e:	4b05      	ldr	r3, [pc, #20]	; (81694 <udd_detach+0x38>)
   81680:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   81684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   81688:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	udd_sleep_mode(false);
   8168c:	2000      	movs	r0, #0
   8168e:	4b02      	ldr	r3, [pc, #8]	; (81698 <udd_detach+0x3c>)
   81690:	4798      	blx	r3
}
   81692:	bd80      	pop	{r7, pc}
   81694:	400ac000 	.word	0x400ac000
   81698:	00081229 	.word	0x00081229

0008169c <udd_set_address>:
#endif
}


void udd_set_address(uint8_t address)
{
   8169c:	b480      	push	{r7}
   8169e:	b083      	sub	sp, #12
   816a0:	af00      	add	r7, sp, #0
   816a2:	4603      	mov	r3, r0
   816a4:	71fb      	strb	r3, [r7, #7]
	udd_disable_address();
   816a6:	4a0d      	ldr	r2, [pc, #52]	; (816dc <udd_set_address+0x40>)
   816a8:	4b0c      	ldr	r3, [pc, #48]	; (816dc <udd_set_address+0x40>)
   816aa:	681b      	ldr	r3, [r3, #0]
   816ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   816b0:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   816b2:	490a      	ldr	r1, [pc, #40]	; (816dc <udd_set_address+0x40>)
   816b4:	4b09      	ldr	r3, [pc, #36]	; (816dc <udd_set_address+0x40>)
   816b6:	681b      	ldr	r3, [r3, #0]
   816b8:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   816bc:	79fb      	ldrb	r3, [r7, #7]
   816be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   816c2:	4313      	orrs	r3, r2
   816c4:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   816c6:	4a05      	ldr	r2, [pc, #20]	; (816dc <udd_set_address+0x40>)
   816c8:	4b04      	ldr	r3, [pc, #16]	; (816dc <udd_set_address+0x40>)
   816ca:	681b      	ldr	r3, [r3, #0]
   816cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   816d0:	6013      	str	r3, [r2, #0]
}
   816d2:	370c      	adds	r7, #12
   816d4:	46bd      	mov	sp, r7
   816d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   816da:	4770      	bx	lr
   816dc:	400ac000 	.word	0x400ac000

000816e0 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   816e0:	b480      	push	{r7}
   816e2:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   816e4:	4b05      	ldr	r3, [pc, #20]	; (816fc <udd_getaddress+0x1c>)
   816e6:	681b      	ldr	r3, [r3, #0]
   816e8:	b2db      	uxtb	r3, r3
   816ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   816ee:	b2db      	uxtb	r3, r3
}
   816f0:	4618      	mov	r0, r3
   816f2:	46bd      	mov	sp, r7
   816f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   816f8:	4770      	bx	lr
   816fa:	bf00      	nop
   816fc:	400ac000 	.word	0x400ac000

00081700 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   81700:	b480      	push	{r7}
   81702:	b083      	sub	sp, #12
   81704:	af00      	add	r7, sp, #0
   81706:	6078      	str	r0, [r7, #4]
   81708:	460b      	mov	r3, r1
   8170a:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   8170c:	4a05      	ldr	r2, [pc, #20]	; (81724 <udd_set_setup_payload+0x24>)
   8170e:	687b      	ldr	r3, [r7, #4]
   81710:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   81712:	4a04      	ldr	r2, [pc, #16]	; (81724 <udd_set_setup_payload+0x24>)
   81714:	887b      	ldrh	r3, [r7, #2]
   81716:	8193      	strh	r3, [r2, #12]
}
   81718:	370c      	adds	r7, #12
   8171a:	46bd      	mov	sp, r7
   8171c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81720:	4770      	bx	lr
   81722:	bf00      	nop
   81724:	2007086c 	.word	0x2007086c

00081728 <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   81728:	b5f0      	push	{r4, r5, r6, r7, lr}
   8172a:	b089      	sub	sp, #36	; 0x24
   8172c:	af02      	add	r7, sp, #8
   8172e:	4603      	mov	r3, r0
   81730:	71fb      	strb	r3, [r7, #7]
   81732:	460b      	mov	r3, r1
   81734:	71bb      	strb	r3, [r7, #6]
   81736:	4613      	mov	r3, r2
   81738:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
   8173a:	79fb      	ldrb	r3, [r7, #7]
   8173c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   81740:	2b00      	cmp	r3, #0
   81742:	bf14      	ite	ne
   81744:	2301      	movne	r3, #1
   81746:	2300      	moveq	r3, #0
   81748:	74bb      	strb	r3, [r7, #18]
	ep = ep & USB_EP_ADDR_MASK;
   8174a:	79fb      	ldrb	r3, [r7, #7]
   8174c:	f003 030f 	and.w	r3, r3, #15
   81750:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   81752:	79fb      	ldrb	r3, [r7, #7]
   81754:	2b01      	cmp	r3, #1
   81756:	d901      	bls.n	8175c <udd_ep_alloc+0x34>
		return false;
   81758:	2300      	movs	r3, #0
   8175a:	e154      	b.n	81a06 <udd_ep_alloc+0x2de>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   8175c:	4bac      	ldr	r3, [pc, #688]	; (81a10 <udd_ep_alloc+0x2e8>)
   8175e:	69da      	ldr	r2, [r3, #28]
   81760:	79fb      	ldrb	r3, [r7, #7]
   81762:	2101      	movs	r1, #1
   81764:	fa01 f303 	lsl.w	r3, r1, r3
   81768:	4013      	ands	r3, r2
   8176a:	2b00      	cmp	r3, #0
   8176c:	d001      	beq.n	81772 <udd_ep_alloc+0x4a>
		return false;
   8176e:	2300      	movs	r3, #0
   81770:	e149      	b.n	81a06 <udd_ep_alloc+0x2de>
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   81772:	79bb      	ldrb	r3, [r7, #6]
   81774:	f003 0303 	and.w	r3, r3, #3
   81778:	2b02      	cmp	r3, #2
   8177a:	d009      	beq.n	81790 <udd_ep_alloc+0x68>
   8177c:	2b03      	cmp	r3, #3
   8177e:	d004      	beq.n	8178a <udd_ep_alloc+0x62>
   81780:	2b01      	cmp	r3, #1
   81782:	d108      	bne.n	81796 <udd_ep_alloc+0x6e>
	case USB_EP_TYPE_ISOCHRONOUS:
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   81784:	2302      	movs	r3, #2
   81786:	757b      	strb	r3, [r7, #21]
		break;
   81788:	e007      	b.n	8179a <udd_ep_alloc+0x72>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   8178a:	2301      	movs	r3, #1
   8178c:	757b      	strb	r3, [r7, #21]
		break;
   8178e:	e004      	b.n	8179a <udd_ep_alloc+0x72>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   81790:	2302      	movs	r3, #2
   81792:	757b      	strb	r3, [r7, #21]
		break;
   81794:	e001      	b.n	8179a <udd_ep_alloc+0x72>
	default:
		Assert(false);
		return false;
   81796:	2300      	movs	r3, #0
   81798:	e135      	b.n	81a06 <udd_ep_alloc+0x2de>
	}
	switch (nb_bank) {
   8179a:	7d7b      	ldrb	r3, [r7, #21]
   8179c:	2b02      	cmp	r3, #2
   8179e:	d006      	beq.n	817ae <udd_ep_alloc+0x86>
   817a0:	2b03      	cmp	r3, #3
   817a2:	d007      	beq.n	817b4 <udd_ep_alloc+0x8c>
   817a4:	2b01      	cmp	r3, #1
   817a6:	d108      	bne.n	817ba <udd_ep_alloc+0x92>
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   817a8:	2300      	movs	r3, #0
   817aa:	753b      	strb	r3, [r7, #20]
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
   817ac:	e007      	b.n	817be <udd_ep_alloc+0x96>
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   817ae:	2301      	movs	r3, #1
   817b0:	753b      	strb	r3, [r7, #20]
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
   817b2:	e004      	b.n	817be <udd_ep_alloc+0x96>
	case 3:
		bank = UOTGHS_DEVEPTCFG_EPBK_3_BANK >>
   817b4:	2302      	movs	r3, #2
   817b6:	753b      	strb	r3, [r7, #20]
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
   817b8:	e001      	b.n	817be <udd_ep_alloc+0x96>
	default:
		Assert(false);
		return false;
   817ba:	2300      	movs	r3, #0
   817bc:	e123      	b.n	81a06 <udd_ep_alloc+0x2de>
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   817be:	79fb      	ldrb	r3, [r7, #7]
   817c0:	009b      	lsls	r3, r3, #2
   817c2:	4a94      	ldr	r2, [pc, #592]	; (81a14 <udd_ep_alloc+0x2ec>)
   817c4:	441a      	add	r2, r3
   817c6:	79fb      	ldrb	r3, [r7, #7]
   817c8:	0099      	lsls	r1, r3, #2
   817ca:	4b92      	ldr	r3, [pc, #584]	; (81a14 <udd_ep_alloc+0x2ec>)
   817cc:	440b      	add	r3, r1
   817ce:	681b      	ldr	r3, [r3, #0]
   817d0:	f423 53cb 	bic.w	r3, r3, #6496	; 0x1960
   817d4:	f023 031c 	bic.w	r3, r3, #28
   817d8:	79b9      	ldrb	r1, [r7, #6]
   817da:	02c9      	lsls	r1, r1, #11
   817dc:	f401 50c0 	and.w	r0, r1, #6144	; 0x1800
   817e0:	7cb9      	ldrb	r1, [r7, #18]
   817e2:	2900      	cmp	r1, #0
   817e4:	d002      	beq.n	817ec <udd_ep_alloc+0xc4>
   817e6:	f44f 7180 	mov.w	r1, #256	; 0x100
   817ea:	e000      	b.n	817ee <udd_ep_alloc+0xc6>
   817ec:	2100      	movs	r1, #0
   817ee:	4308      	orrs	r0, r1
   817f0:	88b9      	ldrh	r1, [r7, #4]
   817f2:	2908      	cmp	r1, #8
   817f4:	d903      	bls.n	817fe <udd_ep_alloc+0xd6>
   817f6:	88b9      	ldrh	r1, [r7, #4]
   817f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   817fc:	da08      	bge.n	81810 <udd_ep_alloc+0xe8>
   817fe:	88b9      	ldrh	r1, [r7, #4]
   81800:	2908      	cmp	r1, #8
   81802:	d903      	bls.n	8180c <udd_ep_alloc+0xe4>
   81804:	88b9      	ldrh	r1, [r7, #4]
   81806:	0049      	lsls	r1, r1, #1
   81808:	3901      	subs	r1, #1
   8180a:	e003      	b.n	81814 <udd_ep_alloc+0xec>
   8180c:	210f      	movs	r1, #15
   8180e:	e001      	b.n	81814 <udd_ep_alloc+0xec>
   81810:	f240 71ff 	movw	r1, #2047	; 0x7ff
   81814:	fab1 f181 	clz	r1, r1
   81818:	f1c1 011c 	rsb	r1, r1, #28
   8181c:	0109      	lsls	r1, r1, #4
   8181e:	4308      	orrs	r0, r1
   81820:	7d39      	ldrb	r1, [r7, #20]
   81822:	0089      	lsls	r1, r1, #2
   81824:	f001 010c 	and.w	r1, r1, #12
   81828:	4308      	orrs	r0, r1
   8182a:	f641 117c 	movw	r1, #6524	; 0x197c
   8182e:	4001      	ands	r1, r0
   81830:	430b      	orrs	r3, r1
   81832:	6013      	str	r3, [r2, #0]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   81834:	79fb      	ldrb	r3, [r7, #7]
   81836:	2201      	movs	r2, #1
   81838:	fa02 f303 	lsl.w	r3, r2, r3
   8183c:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8183e:	2301      	movs	r3, #1
   81840:	74fb      	strb	r3, [r7, #19]
   81842:	e02a      	b.n	8189a <udd_ep_alloc+0x172>
		if (Is_udd_endpoint_enabled(i)) {
   81844:	4b72      	ldr	r3, [pc, #456]	; (81a10 <udd_ep_alloc+0x2e8>)
   81846:	69da      	ldr	r2, [r3, #28]
   81848:	7cfb      	ldrb	r3, [r7, #19]
   8184a:	2101      	movs	r1, #1
   8184c:	fa01 f303 	lsl.w	r3, r1, r3
   81850:	4013      	ands	r3, r2
   81852:	2b00      	cmp	r3, #0
   81854:	d01e      	beq.n	81894 <udd_ep_alloc+0x16c>
			ep_allocated |= 1 << i;
   81856:	7cfb      	ldrb	r3, [r7, #19]
   81858:	2201      	movs	r2, #1
   8185a:	fa02 f303 	lsl.w	r3, r2, r3
   8185e:	b29a      	uxth	r2, r3
   81860:	8afb      	ldrh	r3, [r7, #22]
   81862:	4313      	orrs	r3, r2
   81864:	b29b      	uxth	r3, r3
   81866:	82fb      	strh	r3, [r7, #22]
			udd_disable_endpoint(i);
   81868:	4969      	ldr	r1, [pc, #420]	; (81a10 <udd_ep_alloc+0x2e8>)
   8186a:	4b69      	ldr	r3, [pc, #420]	; (81a10 <udd_ep_alloc+0x2e8>)
   8186c:	69da      	ldr	r2, [r3, #28]
   8186e:	7cfb      	ldrb	r3, [r7, #19]
   81870:	2001      	movs	r0, #1
   81872:	fa00 f303 	lsl.w	r3, r0, r3
   81876:	43db      	mvns	r3, r3
   81878:	4013      	ands	r3, r2
   8187a:	61cb      	str	r3, [r1, #28]
			udd_unallocate_memory(i);
   8187c:	7cfb      	ldrb	r3, [r7, #19]
   8187e:	009a      	lsls	r2, r3, #2
   81880:	4b64      	ldr	r3, [pc, #400]	; (81a14 <udd_ep_alloc+0x2ec>)
   81882:	4413      	add	r3, r2
   81884:	7cfa      	ldrb	r2, [r7, #19]
   81886:	0091      	lsls	r1, r2, #2
   81888:	4a62      	ldr	r2, [pc, #392]	; (81a14 <udd_ep_alloc+0x2ec>)
   8188a:	440a      	add	r2, r1
   8188c:	6812      	ldr	r2, [r2, #0]
   8188e:	f022 0202 	bic.w	r2, r2, #2
   81892:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   81894:	7cfb      	ldrb	r3, [r7, #19]
   81896:	3b01      	subs	r3, #1
   81898:	74fb      	strb	r3, [r7, #19]
   8189a:	7cfa      	ldrb	r2, [r7, #19]
   8189c:	79fb      	ldrb	r3, [r7, #7]
   8189e:	429a      	cmp	r2, r3
   818a0:	d8d0      	bhi.n	81844 <udd_ep_alloc+0x11c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   818a2:	79fb      	ldrb	r3, [r7, #7]
   818a4:	74fb      	strb	r3, [r7, #19]
   818a6:	e0a9      	b.n	819fc <udd_ep_alloc+0x2d4>
		if (ep_allocated & (1 << i)) {
   818a8:	8afa      	ldrh	r2, [r7, #22]
   818aa:	7cfb      	ldrb	r3, [r7, #19]
   818ac:	fa42 f303 	asr.w	r3, r2, r3
   818b0:	f003 0301 	and.w	r3, r3, #1
   818b4:	2b00      	cmp	r3, #0
   818b6:	f000 809e 	beq.w	819f6 <udd_ep_alloc+0x2ce>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   818ba:	7cfb      	ldrb	r3, [r7, #19]
   818bc:	1e5a      	subs	r2, r3, #1
   818be:	4613      	mov	r3, r2
   818c0:	005b      	lsls	r3, r3, #1
   818c2:	4413      	add	r3, r2
   818c4:	00db      	lsls	r3, r3, #3
   818c6:	4a54      	ldr	r2, [pc, #336]	; (81a18 <udd_ep_alloc+0x2f0>)
   818c8:	4413      	add	r3, r2
   818ca:	60fb      	str	r3, [r7, #12]
			bool b_restart = ptr_job->busy;
   818cc:	68fb      	ldr	r3, [r7, #12]
   818ce:	7d1b      	ldrb	r3, [r3, #20]
   818d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
   818d4:	b2db      	uxtb	r3, r3
   818d6:	2b00      	cmp	r3, #0
   818d8:	bf14      	ite	ne
   818da:	2301      	movne	r3, #1
   818dc:	2300      	moveq	r3, #0
   818de:	72fb      	strb	r3, [r7, #11]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   818e0:	68fa      	ldr	r2, [r7, #12]
   818e2:	7d13      	ldrb	r3, [r2, #20]
   818e4:	f36f 0300 	bfc	r3, #0, #1
   818e8:	7513      	strb	r3, [r2, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   818ea:	7cfb      	ldrb	r3, [r7, #19]
   818ec:	009a      	lsls	r2, r3, #2
   818ee:	4b49      	ldr	r3, [pc, #292]	; (81a14 <udd_ep_alloc+0x2ec>)
   818f0:	4413      	add	r3, r2
   818f2:	7cfa      	ldrb	r2, [r7, #19]
   818f4:	0091      	lsls	r1, r2, #2
   818f6:	4a47      	ldr	r2, [pc, #284]	; (81a14 <udd_ep_alloc+0x2ec>)
   818f8:	440a      	add	r2, r1
   818fa:	6812      	ldr	r2, [r2, #0]
   818fc:	f042 0202 	orr.w	r2, r2, #2
   81900:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint(i);
   81902:	4943      	ldr	r1, [pc, #268]	; (81a10 <udd_ep_alloc+0x2e8>)
   81904:	4b42      	ldr	r3, [pc, #264]	; (81a10 <udd_ep_alloc+0x2e8>)
   81906:	69da      	ldr	r2, [r3, #28]
   81908:	7cfb      	ldrb	r3, [r7, #19]
   8190a:	2001      	movs	r0, #1
   8190c:	fa00 f303 	lsl.w	r3, r0, r3
   81910:	4313      	orrs	r3, r2
   81912:	61cb      	str	r3, [r1, #28]
			if (!Is_udd_endpoint_configured(i)) {
   81914:	7cfb      	ldrb	r3, [r7, #19]
   81916:	009a      	lsls	r2, r3, #2
   81918:	4b40      	ldr	r3, [pc, #256]	; (81a1c <udd_ep_alloc+0x2f4>)
   8191a:	4413      	add	r3, r2
   8191c:	681b      	ldr	r3, [r3, #0]
   8191e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   81922:	2b00      	cmp	r3, #0
   81924:	d11b      	bne.n	8195e <udd_ep_alloc+0x236>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   81926:	68fb      	ldr	r3, [r7, #12]
   81928:	681b      	ldr	r3, [r3, #0]
   8192a:	2b00      	cmp	r3, #0
   8192c:	d101      	bne.n	81932 <udd_ep_alloc+0x20a>
					return false;
   8192e:	2300      	movs	r3, #0
   81930:	e069      	b.n	81a06 <udd_ep_alloc+0x2de>
				}
				if (Is_udd_endpoint_in(i)) {
   81932:	7cfb      	ldrb	r3, [r7, #19]
   81934:	009a      	lsls	r2, r3, #2
   81936:	4b37      	ldr	r3, [pc, #220]	; (81a14 <udd_ep_alloc+0x2ec>)
   81938:	4413      	add	r3, r2
   8193a:	681b      	ldr	r3, [r3, #0]
   8193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
   81940:	2b00      	cmp	r3, #0
   81942:	d003      	beq.n	8194c <udd_ep_alloc+0x224>
					i |= USB_EP_DIR_IN;
   81944:	7cfb      	ldrb	r3, [r7, #19]
   81946:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8194a:	74fb      	strb	r3, [r7, #19]
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8194c:	68fb      	ldr	r3, [r7, #12]
   8194e:	681b      	ldr	r3, [r3, #0]
   81950:	68fa      	ldr	r2, [r7, #12]
   81952:	68d1      	ldr	r1, [r2, #12]
   81954:	7cfa      	ldrb	r2, [r7, #19]
   81956:	2001      	movs	r0, #1
   81958:	4798      	blx	r3
						ptr_job->buf_cnt, i);
				return false;
   8195a:	2300      	movs	r3, #0
   8195c:	e053      	b.n	81a06 <udd_ep_alloc+0x2de>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   8195e:	7cfb      	ldrb	r3, [r7, #19]
   81960:	009a      	lsls	r2, r3, #2
   81962:	4b2c      	ldr	r3, [pc, #176]	; (81a14 <udd_ep_alloc+0x2ec>)
   81964:	4413      	add	r3, r2
   81966:	7cfa      	ldrb	r2, [r7, #19]
   81968:	0091      	lsls	r1, r2, #2
   8196a:	4a2a      	ldr	r2, [pc, #168]	; (81a14 <udd_ep_alloc+0x2ec>)
   8196c:	440a      	add	r2, r1
   8196e:	6812      	ldr	r2, [r2, #0]
   81970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   81974:	601a      	str	r2, [r3, #0]
			if (b_restart) {
   81976:	7afb      	ldrb	r3, [r7, #11]
   81978:	2b00      	cmp	r3, #0
   8197a:	d03c      	beq.n	819f6 <udd_ep_alloc+0x2ce>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   8197c:	68fb      	ldr	r3, [r7, #12]
   8197e:	68da      	ldr	r2, [r3, #12]
   81980:	68fb      	ldr	r3, [r7, #12]
   81982:	691b      	ldr	r3, [r3, #16]
   81984:	1ad2      	subs	r2, r2, r3
   81986:	68fb      	ldr	r3, [r7, #12]
   81988:	60da      	str	r2, [r3, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8198a:	7cfb      	ldrb	r3, [r7, #19]
   8198c:	009a      	lsls	r2, r3, #2
   8198e:	4b21      	ldr	r3, [pc, #132]	; (81a14 <udd_ep_alloc+0x2ec>)
   81990:	4413      	add	r3, r2
   81992:	681b      	ldr	r3, [r3, #0]
   81994:	f403 7380 	and.w	r3, r3, #256	; 0x100
   81998:	2b00      	cmp	r3, #0
   8199a:	d004      	beq.n	819a6 <udd_ep_alloc+0x27e>
   8199c:	7cfb      	ldrb	r3, [r7, #19]
   8199e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   819a2:	b2db      	uxtb	r3, r3
   819a4:	e000      	b.n	819a8 <udd_ep_alloc+0x280>
   819a6:	7cfb      	ldrb	r3, [r7, #19]
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   819a8:	68fa      	ldr	r2, [r7, #12]
   819aa:	7d12      	ldrb	r2, [r2, #20]
   819ac:	f3c2 0240 	ubfx	r2, r2, #1, #1
   819b0:	b2d2      	uxtb	r2, r2
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   819b2:	2a00      	cmp	r2, #0
   819b4:	bf14      	ite	ne
   819b6:	2201      	movne	r2, #1
   819b8:	2200      	moveq	r2, #0
   819ba:	b2d6      	uxtb	r6, r2
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
   819bc:	68fa      	ldr	r2, [r7, #12]
   819be:	6851      	ldr	r1, [r2, #4]
   819c0:	68fa      	ldr	r2, [r7, #12]
   819c2:	68d2      	ldr	r2, [r2, #12]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   819c4:	188d      	adds	r5, r1, r2
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
   819c6:	68fa      	ldr	r2, [r7, #12]
   819c8:	6891      	ldr	r1, [r2, #8]
							- ptr_job->buf_cnt,
   819ca:	68fa      	ldr	r2, [r7, #12]
   819cc:	68d2      	ldr	r2, [r2, #12]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   819ce:	1a8c      	subs	r4, r1, r2
   819d0:	68fa      	ldr	r2, [r7, #12]
   819d2:	6812      	ldr	r2, [r2, #0]
   819d4:	9200      	str	r2, [sp, #0]
   819d6:	4618      	mov	r0, r3
   819d8:	4631      	mov	r1, r6
   819da:	462a      	mov	r2, r5
   819dc:	4623      	mov	r3, r4
   819de:	4c10      	ldr	r4, [pc, #64]	; (81a20 <udd_ep_alloc+0x2f8>)
   819e0:	47a0      	blx	r4
   819e2:	4603      	mov	r3, r0
   819e4:	72fb      	strb	r3, [r7, #11]
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   819e6:	7afb      	ldrb	r3, [r7, #11]
   819e8:	f083 0301 	eor.w	r3, r3, #1
   819ec:	b2db      	uxtb	r3, r3
   819ee:	2b00      	cmp	r3, #0
   819f0:	d001      	beq.n	819f6 <udd_ep_alloc+0x2ce>
					dbg_print("ErrReRun%d ", i);
					return false;
   819f2:	2300      	movs	r3, #0
   819f4:	e007      	b.n	81a06 <udd_ep_alloc+0x2de>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   819f6:	7cfb      	ldrb	r3, [r7, #19]
   819f8:	3301      	adds	r3, #1
   819fa:	74fb      	strb	r3, [r7, #19]
   819fc:	7cfb      	ldrb	r3, [r7, #19]
   819fe:	2b01      	cmp	r3, #1
   81a00:	f67f af52 	bls.w	818a8 <udd_ep_alloc+0x180>
					return false;
				}
			}
		}
	}
	return true;
   81a04:	2301      	movs	r3, #1
}
   81a06:	4618      	mov	r0, r3
   81a08:	371c      	adds	r7, #28
   81a0a:	46bd      	mov	sp, r7
   81a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81a0e:	bf00      	nop
   81a10:	400ac000 	.word	0x400ac000
   81a14:	400ac100 	.word	0x400ac100
   81a18:	2007075c 	.word	0x2007075c
   81a1c:	400ac130 	.word	0x400ac130
   81a20:	00081d1d 	.word	0x00081d1d

00081a24 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   81a24:	b580      	push	{r7, lr}
   81a26:	b084      	sub	sp, #16
   81a28:	af00      	add	r7, sp, #0
   81a2a:	4603      	mov	r3, r0
   81a2c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81a2e:	79fb      	ldrb	r3, [r7, #7]
   81a30:	f003 030f 	and.w	r3, r3, #15
   81a34:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep_index) {
   81a36:	7bfb      	ldrb	r3, [r7, #15]
   81a38:	2b01      	cmp	r3, #1
   81a3a:	d900      	bls.n	81a3e <udd_ep_free+0x1a>
		return;
   81a3c:	e027      	b.n	81a8e <udd_ep_free+0x6a>
	}
	udd_disable_endpoint(ep_index);
   81a3e:	4915      	ldr	r1, [pc, #84]	; (81a94 <udd_ep_free+0x70>)
   81a40:	4b14      	ldr	r3, [pc, #80]	; (81a94 <udd_ep_free+0x70>)
   81a42:	69da      	ldr	r2, [r3, #28]
   81a44:	7bfb      	ldrb	r3, [r7, #15]
   81a46:	2001      	movs	r0, #1
   81a48:	fa00 f303 	lsl.w	r3, r0, r3
   81a4c:	43db      	mvns	r3, r3
   81a4e:	4013      	ands	r3, r2
   81a50:	61cb      	str	r3, [r1, #28]
	udd_unallocate_memory(ep_index);
   81a52:	7bfb      	ldrb	r3, [r7, #15]
   81a54:	009a      	lsls	r2, r3, #2
   81a56:	4b10      	ldr	r3, [pc, #64]	; (81a98 <udd_ep_free+0x74>)
   81a58:	4413      	add	r3, r2
   81a5a:	7bfa      	ldrb	r2, [r7, #15]
   81a5c:	0091      	lsls	r1, r2, #2
   81a5e:	4a0e      	ldr	r2, [pc, #56]	; (81a98 <udd_ep_free+0x74>)
   81a60:	440a      	add	r2, r1
   81a62:	6812      	ldr	r2, [r2, #0]
   81a64:	f022 0202 	bic.w	r2, r2, #2
   81a68:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   81a6a:	79fb      	ldrb	r3, [r7, #7]
   81a6c:	4618      	mov	r0, r3
   81a6e:	4b0b      	ldr	r3, [pc, #44]	; (81a9c <udd_ep_free+0x78>)
   81a70:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   81a72:	7bfb      	ldrb	r3, [r7, #15]
   81a74:	1e5a      	subs	r2, r3, #1
   81a76:	490a      	ldr	r1, [pc, #40]	; (81aa0 <udd_ep_free+0x7c>)
   81a78:	4613      	mov	r3, r2
   81a7a:	005b      	lsls	r3, r3, #1
   81a7c:	4413      	add	r3, r2
   81a7e:	00db      	lsls	r3, r3, #3
   81a80:	440b      	add	r3, r1
   81a82:	f103 0210 	add.w	r2, r3, #16
   81a86:	7913      	ldrb	r3, [r2, #4]
   81a88:	f36f 0382 	bfc	r3, #2, #1
   81a8c:	7113      	strb	r3, [r2, #4]
}
   81a8e:	3710      	adds	r7, #16
   81a90:	46bd      	mov	sp, r7
   81a92:	bd80      	pop	{r7, pc}
   81a94:	400ac000 	.word	0x400ac000
   81a98:	400ac100 	.word	0x400ac100
   81a9c:	00082689 	.word	0x00082689
   81aa0:	2007075c 	.word	0x2007075c

00081aa4 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   81aa4:	b480      	push	{r7}
   81aa6:	b085      	sub	sp, #20
   81aa8:	af00      	add	r7, sp, #0
   81aaa:	4603      	mov	r3, r0
   81aac:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81aae:	79fb      	ldrb	r3, [r7, #7]
   81ab0:	f003 030f 	and.w	r3, r3, #15
   81ab4:	73fb      	strb	r3, [r7, #15]
	return Is_udd_endpoint_stall_requested(ep_index);
   81ab6:	7bfb      	ldrb	r3, [r7, #15]
   81ab8:	009a      	lsls	r2, r3, #2
   81aba:	4b08      	ldr	r3, [pc, #32]	; (81adc <udd_ep_is_halted+0x38>)
   81abc:	4413      	add	r3, r2
   81abe:	681b      	ldr	r3, [r3, #0]
   81ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   81ac4:	2b00      	cmp	r3, #0
   81ac6:	bf14      	ite	ne
   81ac8:	2301      	movne	r3, #1
   81aca:	2300      	moveq	r3, #0
   81acc:	b2db      	uxtb	r3, r3
}
   81ace:	4618      	mov	r0, r3
   81ad0:	3714      	adds	r7, #20
   81ad2:	46bd      	mov	sp, r7
   81ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ad8:	4770      	bx	lr
   81ada:	bf00      	nop
   81adc:	400ac1c0 	.word	0x400ac1c0

00081ae0 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   81ae0:	b580      	push	{r7, lr}
   81ae2:	b086      	sub	sp, #24
   81ae4:	af00      	add	r7, sp, #0
   81ae6:	4603      	mov	r3, r0
   81ae8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81aea:	79fb      	ldrb	r3, [r7, #7]
   81aec:	f003 030f 	and.w	r3, r3, #15
   81af0:	75fb      	strb	r3, [r7, #23]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   81af2:	7dfb      	ldrb	r3, [r7, #23]
   81af4:	1e5a      	subs	r2, r3, #1
   81af6:	4613      	mov	r3, r2
   81af8:	005b      	lsls	r3, r3, #1
   81afa:	4413      	add	r3, r2
   81afc:	00db      	lsls	r3, r3, #3
   81afe:	4a36      	ldr	r2, [pc, #216]	; (81bd8 <udd_ep_set_halt+0xf8>)
   81b00:	4413      	add	r3, r2
   81b02:	613b      	str	r3, [r7, #16]
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   81b04:	7dfb      	ldrb	r3, [r7, #23]
   81b06:	2b01      	cmp	r3, #1
   81b08:	d901      	bls.n	81b0e <udd_ep_set_halt+0x2e>
		return false;
   81b0a:	2300      	movs	r3, #0
   81b0c:	e060      	b.n	81bd0 <udd_ep_set_halt+0xf0>
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   81b0e:	7dfb      	ldrb	r3, [r7, #23]
   81b10:	009a      	lsls	r2, r3, #2
   81b12:	4b32      	ldr	r3, [pc, #200]	; (81bdc <udd_ep_set_halt+0xfc>)
   81b14:	4413      	add	r3, r2
   81b16:	681b      	ldr	r3, [r3, #0]
   81b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   81b1c:	2b00      	cmp	r3, #0
   81b1e:	d106      	bne.n	81b2e <udd_ep_set_halt+0x4e>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   81b20:	693b      	ldr	r3, [r7, #16]
   81b22:	7d1b      	ldrb	r3, [r3, #20]
   81b24:	f003 0304 	and.w	r3, r3, #4
   81b28:	b2db      	uxtb	r3, r3
   81b2a:	2b00      	cmp	r3, #0
   81b2c:	d001      	beq.n	81b32 <udd_ep_set_halt+0x52>
		return true; // Already STALL
   81b2e:	2301      	movs	r3, #1
   81b30:	e04e      	b.n	81bd0 <udd_ep_set_halt+0xf0>
	}

	if (ptr_job->busy == true) {
   81b32:	693b      	ldr	r3, [r7, #16]
   81b34:	7d1b      	ldrb	r3, [r3, #20]
   81b36:	f003 0301 	and.w	r3, r3, #1
   81b3a:	b2db      	uxtb	r3, r3
   81b3c:	2b00      	cmp	r3, #0
   81b3e:	d001      	beq.n	81b44 <udd_ep_set_halt+0x64>
		return false; // Job on going, stall impossible
   81b40:	2300      	movs	r3, #0
   81b42:	e045      	b.n	81bd0 <udd_ep_set_halt+0xf0>
	}

	flags = cpu_irq_save();
   81b44:	4b26      	ldr	r3, [pc, #152]	; (81be0 <udd_ep_set_halt+0x100>)
   81b46:	4798      	blx	r3
   81b48:	60f8      	str	r0, [r7, #12]
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   81b4a:	79fb      	ldrb	r3, [r7, #7]
   81b4c:	b25b      	sxtb	r3, r3
   81b4e:	2b00      	cmp	r3, #0
   81b50:	da21      	bge.n	81b96 <udd_ep_set_halt+0xb6>
   81b52:	7dfb      	ldrb	r3, [r7, #23]
   81b54:	009a      	lsls	r2, r3, #2
   81b56:	4b23      	ldr	r3, [pc, #140]	; (81be4 <udd_ep_set_halt+0x104>)
   81b58:	4413      	add	r3, r2
   81b5a:	681b      	ldr	r3, [r3, #0]
   81b5c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   81b60:	0b1b      	lsrs	r3, r3, #12
   81b62:	2b00      	cmp	r3, #0
   81b64:	d017      	beq.n	81b96 <udd_ep_set_halt+0xb6>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   81b66:	693a      	ldr	r2, [r7, #16]
   81b68:	7d13      	ldrb	r3, [r2, #20]
   81b6a:	f043 0304 	orr.w	r3, r3, #4
   81b6e:	7513      	strb	r3, [r2, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   81b70:	7dfb      	ldrb	r3, [r7, #23]
   81b72:	009a      	lsls	r2, r3, #2
   81b74:	4b1c      	ldr	r3, [pc, #112]	; (81be8 <udd_ep_set_halt+0x108>)
   81b76:	4413      	add	r3, r2
   81b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81b7c:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_interrupt(ep_index);
   81b7e:	4a1b      	ldr	r2, [pc, #108]	; (81bec <udd_ep_set_halt+0x10c>)
   81b80:	7dfb      	ldrb	r3, [r7, #23]
   81b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81b86:	fa01 f303 	lsl.w	r3, r1, r3
   81b8a:	6193      	str	r3, [r2, #24]
		cpu_irq_restore(flags);
   81b8c:	68f8      	ldr	r0, [r7, #12]
   81b8e:	4b18      	ldr	r3, [pc, #96]	; (81bf0 <udd_ep_set_halt+0x110>)
   81b90:	4798      	blx	r3
		return true;
   81b92:	2301      	movs	r3, #1
   81b94:	e01c      	b.n	81bd0 <udd_ep_set_halt+0xf0>
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   81b96:	7dfb      	ldrb	r3, [r7, #23]
   81b98:	009a      	lsls	r2, r3, #2
   81b9a:	4b16      	ldr	r3, [pc, #88]	; (81bf4 <udd_ep_set_halt+0x114>)
   81b9c:	4413      	add	r3, r2
   81b9e:	7dfa      	ldrb	r2, [r7, #23]
   81ba0:	0091      	lsls	r1, r2, #2
   81ba2:	4a14      	ldr	r2, [pc, #80]	; (81bf4 <udd_ep_set_halt+0x114>)
   81ba4:	440a      	add	r2, r1
   81ba6:	6812      	ldr	r2, [r2, #0]
   81ba8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   81bac:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   81bae:	7dfb      	ldrb	r3, [r7, #23]
   81bb0:	009a      	lsls	r2, r3, #2
   81bb2:	4b11      	ldr	r3, [pc, #68]	; (81bf8 <udd_ep_set_halt+0x118>)
   81bb4:	4413      	add	r3, r2
   81bb6:	2240      	movs	r2, #64	; 0x40
   81bb8:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   81bba:	7dfb      	ldrb	r3, [r7, #23]
   81bbc:	009a      	lsls	r2, r3, #2
   81bbe:	4b0a      	ldr	r3, [pc, #40]	; (81be8 <udd_ep_set_halt+0x108>)
   81bc0:	4413      	add	r3, r2
   81bc2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81bc6:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
   81bc8:	68f8      	ldr	r0, [r7, #12]
   81bca:	4b09      	ldr	r3, [pc, #36]	; (81bf0 <udd_ep_set_halt+0x110>)
   81bcc:	4798      	blx	r3
	return true;
   81bce:	2301      	movs	r3, #1
}
   81bd0:	4618      	mov	r0, r3
   81bd2:	3718      	adds	r7, #24
   81bd4:	46bd      	mov	sp, r7
   81bd6:	bd80      	pop	{r7, pc}
   81bd8:	2007075c 	.word	0x2007075c
   81bdc:	400ac1c0 	.word	0x400ac1c0
   81be0:	00081119 	.word	0x00081119
   81be4:	400ac130 	.word	0x400ac130
   81be8:	400ac1f0 	.word	0x400ac1f0
   81bec:	400ac000 	.word	0x400ac000
   81bf0:	00081171 	.word	0x00081171
   81bf4:	400ac100 	.word	0x400ac100
   81bf8:	400ac160 	.word	0x400ac160

00081bfc <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   81bfc:	b580      	push	{r7, lr}
   81bfe:	b084      	sub	sp, #16
   81c00:	af00      	add	r7, sp, #0
   81c02:	4603      	mov	r3, r0
   81c04:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81c06:	79fb      	ldrb	r3, [r7, #7]
   81c08:	f003 030f 	and.w	r3, r3, #15
   81c0c:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   81c0e:	7bbb      	ldrb	r3, [r7, #14]
   81c10:	1e5a      	subs	r2, r3, #1
   81c12:	4613      	mov	r3, r2
   81c14:	005b      	lsls	r3, r3, #1
   81c16:	4413      	add	r3, r2
   81c18:	00db      	lsls	r3, r3, #3
   81c1a:	4a38      	ldr	r2, [pc, #224]	; (81cfc <udd_ep_clear_halt+0x100>)
   81c1c:	4413      	add	r3, r2
   81c1e:	60bb      	str	r3, [r7, #8]
	bool b_stall_cleared = false;
   81c20:	2300      	movs	r3, #0
   81c22:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index)
   81c24:	7bbb      	ldrb	r3, [r7, #14]
   81c26:	2b01      	cmp	r3, #1
   81c28:	d901      	bls.n	81c2e <udd_ep_clear_halt+0x32>
		return false;
   81c2a:	2300      	movs	r3, #0
   81c2c:	e062      	b.n	81cf4 <udd_ep_clear_halt+0xf8>

	if (ptr_job->stall_requested) {
   81c2e:	68bb      	ldr	r3, [r7, #8]
   81c30:	7d1b      	ldrb	r3, [r3, #20]
   81c32:	f003 0304 	and.w	r3, r3, #4
   81c36:	b2db      	uxtb	r3, r3
   81c38:	2b00      	cmp	r3, #0
   81c3a:	d014      	beq.n	81c66 <udd_ep_clear_halt+0x6a>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   81c3c:	68ba      	ldr	r2, [r7, #8]
   81c3e:	7d13      	ldrb	r3, [r2, #20]
   81c40:	f36f 0382 	bfc	r3, #2, #1
   81c44:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
   81c46:	7bbb      	ldrb	r3, [r7, #14]
   81c48:	009a      	lsls	r2, r3, #2
   81c4a:	4b2d      	ldr	r3, [pc, #180]	; (81d00 <udd_ep_clear_halt+0x104>)
   81c4c:	4413      	add	r3, r2
   81c4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81c52:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep_index);
   81c54:	4a2b      	ldr	r2, [pc, #172]	; (81d04 <udd_ep_clear_halt+0x108>)
   81c56:	7bbb      	ldrb	r3, [r7, #14]
   81c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81c5c:	fa01 f303 	lsl.w	r3, r1, r3
   81c60:	6153      	str	r3, [r2, #20]
		b_stall_cleared = true;
   81c62:	2301      	movs	r3, #1
   81c64:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   81c66:	7bbb      	ldrb	r3, [r7, #14]
   81c68:	009a      	lsls	r2, r3, #2
   81c6a:	4b27      	ldr	r3, [pc, #156]	; (81d08 <udd_ep_clear_halt+0x10c>)
   81c6c:	4413      	add	r3, r2
   81c6e:	681b      	ldr	r3, [r3, #0]
   81c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   81c74:	2b00      	cmp	r3, #0
   81c76:	d02a      	beq.n	81cce <udd_ep_clear_halt+0xd2>
		if (Is_udd_stall(ep_index)) {
   81c78:	7bbb      	ldrb	r3, [r7, #14]
   81c7a:	009a      	lsls	r2, r3, #2
   81c7c:	4b23      	ldr	r3, [pc, #140]	; (81d0c <udd_ep_clear_halt+0x110>)
   81c7e:	4413      	add	r3, r2
   81c80:	681b      	ldr	r3, [r3, #0]
   81c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
   81c86:	2b00      	cmp	r3, #0
   81c88:	d00c      	beq.n	81ca4 <udd_ep_clear_halt+0xa8>
			udd_ack_stall(ep_index);
   81c8a:	7bbb      	ldrb	r3, [r7, #14]
   81c8c:	009a      	lsls	r2, r3, #2
   81c8e:	4b20      	ldr	r3, [pc, #128]	; (81d10 <udd_ep_clear_halt+0x114>)
   81c90:	4413      	add	r3, r2
   81c92:	2240      	movs	r2, #64	; 0x40
   81c94:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   81c96:	7bbb      	ldrb	r3, [r7, #14]
   81c98:	009a      	lsls	r2, r3, #2
   81c9a:	4b1e      	ldr	r3, [pc, #120]	; (81d14 <udd_ep_clear_halt+0x118>)
   81c9c:	4413      	add	r3, r2
   81c9e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   81ca2:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   81ca4:	7bbb      	ldrb	r3, [r7, #14]
   81ca6:	009a      	lsls	r2, r3, #2
   81ca8:	4b15      	ldr	r3, [pc, #84]	; (81d00 <udd_ep_clear_halt+0x104>)
   81caa:	4413      	add	r3, r2
   81cac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81cb0:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   81cb2:	7bbb      	ldrb	r3, [r7, #14]
   81cb4:	009a      	lsls	r2, r3, #2
   81cb6:	4b18      	ldr	r3, [pc, #96]	; (81d18 <udd_ep_clear_halt+0x11c>)
   81cb8:	4413      	add	r3, r2
   81cba:	7bba      	ldrb	r2, [r7, #14]
   81cbc:	0091      	lsls	r1, r2, #2
   81cbe:	4a16      	ldr	r2, [pc, #88]	; (81d18 <udd_ep_clear_halt+0x11c>)
   81cc0:	440a      	add	r2, r1
   81cc2:	6812      	ldr	r2, [r2, #0]
   81cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   81cc8:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   81cca:	2301      	movs	r3, #1
   81ccc:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   81cce:	7bfb      	ldrb	r3, [r7, #15]
   81cd0:	2b00      	cmp	r3, #0
   81cd2:	d00e      	beq.n	81cf2 <udd_ep_clear_halt+0xf6>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   81cd4:	68bb      	ldr	r3, [r7, #8]
   81cd6:	7d1b      	ldrb	r3, [r3, #20]
   81cd8:	f003 0301 	and.w	r3, r3, #1
   81cdc:	b2db      	uxtb	r3, r3
   81cde:	2b00      	cmp	r3, #0
   81ce0:	d007      	beq.n	81cf2 <udd_ep_clear_halt+0xf6>
			ptr_job->busy = false;
   81ce2:	68ba      	ldr	r2, [r7, #8]
   81ce4:	7d13      	ldrb	r3, [r2, #20]
   81ce6:	f36f 0300 	bfc	r3, #0, #1
   81cea:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   81cec:	68bb      	ldr	r3, [r7, #8]
   81cee:	681b      	ldr	r3, [r3, #0]
   81cf0:	4798      	blx	r3
		}
	}
	return true;
   81cf2:	2301      	movs	r3, #1
}
   81cf4:	4618      	mov	r0, r3
   81cf6:	3710      	adds	r7, #16
   81cf8:	46bd      	mov	sp, r7
   81cfa:	bd80      	pop	{r7, pc}
   81cfc:	2007075c 	.word	0x2007075c
   81d00:	400ac220 	.word	0x400ac220
   81d04:	400ac000 	.word	0x400ac000
   81d08:	400ac1c0 	.word	0x400ac1c0
   81d0c:	400ac130 	.word	0x400ac130
   81d10:	400ac160 	.word	0x400ac160
   81d14:	400ac1f0 	.word	0x400ac1f0
   81d18:	400ac100 	.word	0x400ac100

00081d1c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   81d1c:	b580      	push	{r7, lr}
   81d1e:	b086      	sub	sp, #24
   81d20:	af00      	add	r7, sp, #0
   81d22:	60ba      	str	r2, [r7, #8]
   81d24:	607b      	str	r3, [r7, #4]
   81d26:	4603      	mov	r3, r0
   81d28:	73fb      	strb	r3, [r7, #15]
   81d2a:	460b      	mov	r3, r1
   81d2c:	73bb      	strb	r3, [r7, #14]
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   81d2e:	7bfb      	ldrb	r3, [r7, #15]
   81d30:	f003 030f 	and.w	r3, r3, #15
   81d34:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   81d36:	7bfb      	ldrb	r3, [r7, #15]
   81d38:	2b01      	cmp	r3, #1
   81d3a:	d901      	bls.n	81d40 <udd_ep_run+0x24>
		return false;
   81d3c:	2300      	movs	r3, #0
   81d3e:	e060      	b.n	81e02 <udd_ep_run+0xe6>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   81d40:	7bfb      	ldrb	r3, [r7, #15]
   81d42:	1e5a      	subs	r2, r3, #1
   81d44:	4613      	mov	r3, r2
   81d46:	005b      	lsls	r3, r3, #1
   81d48:	4413      	add	r3, r2
   81d4a:	00db      	lsls	r3, r3, #3
   81d4c:	4a2f      	ldr	r2, [pc, #188]	; (81e0c <udd_ep_run+0xf0>)
   81d4e:	4413      	add	r3, r2
   81d50:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   81d52:	4b2f      	ldr	r3, [pc, #188]	; (81e10 <udd_ep_run+0xf4>)
   81d54:	69da      	ldr	r2, [r3, #28]
   81d56:	7bfb      	ldrb	r3, [r7, #15]
   81d58:	2101      	movs	r1, #1
   81d5a:	fa01 f303 	lsl.w	r3, r1, r3
   81d5e:	4013      	ands	r3, r2
   81d60:	2b00      	cmp	r3, #0
   81d62:	d00f      	beq.n	81d84 <udd_ep_run+0x68>
			|| Is_udd_endpoint_stall_requested(ep)
   81d64:	7bfb      	ldrb	r3, [r7, #15]
   81d66:	009a      	lsls	r2, r3, #2
   81d68:	4b2a      	ldr	r3, [pc, #168]	; (81e14 <udd_ep_run+0xf8>)
   81d6a:	4413      	add	r3, r2
   81d6c:	681b      	ldr	r3, [r3, #0]
   81d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   81d72:	2b00      	cmp	r3, #0
   81d74:	d106      	bne.n	81d84 <udd_ep_run+0x68>
			|| ptr_job->stall_requested) {
   81d76:	697b      	ldr	r3, [r7, #20]
   81d78:	7d1b      	ldrb	r3, [r3, #20]
   81d7a:	f003 0304 	and.w	r3, r3, #4
   81d7e:	b2db      	uxtb	r3, r3
   81d80:	2b00      	cmp	r3, #0
   81d82:	d001      	beq.n	81d88 <udd_ep_run+0x6c>
		return false; // Endpoint is halted
   81d84:	2300      	movs	r3, #0
   81d86:	e03c      	b.n	81e02 <udd_ep_run+0xe6>
	}

	flags = cpu_irq_save();
   81d88:	4b23      	ldr	r3, [pc, #140]	; (81e18 <udd_ep_run+0xfc>)
   81d8a:	4798      	blx	r3
   81d8c:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   81d8e:	697b      	ldr	r3, [r7, #20]
   81d90:	7d1b      	ldrb	r3, [r3, #20]
   81d92:	f003 0301 	and.w	r3, r3, #1
   81d96:	b2db      	uxtb	r3, r3
   81d98:	2b00      	cmp	r3, #0
   81d9a:	d004      	beq.n	81da6 <udd_ep_run+0x8a>
		cpu_irq_restore(flags);
   81d9c:	6938      	ldr	r0, [r7, #16]
   81d9e:	4b1f      	ldr	r3, [pc, #124]	; (81e1c <udd_ep_run+0x100>)
   81da0:	4798      	blx	r3
		return false; // Job already on going
   81da2:	2300      	movs	r3, #0
   81da4:	e02d      	b.n	81e02 <udd_ep_run+0xe6>
	}
	ptr_job->busy = true;
   81da6:	697a      	ldr	r2, [r7, #20]
   81da8:	7d13      	ldrb	r3, [r2, #20]
   81daa:	f043 0301 	orr.w	r3, r3, #1
   81dae:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   81db0:	6938      	ldr	r0, [r7, #16]
   81db2:	4b1a      	ldr	r3, [pc, #104]	; (81e1c <udd_ep_run+0x100>)
   81db4:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   81db6:	697b      	ldr	r3, [r7, #20]
   81db8:	68ba      	ldr	r2, [r7, #8]
   81dba:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   81dbc:	697b      	ldr	r3, [r7, #20]
   81dbe:	687a      	ldr	r2, [r7, #4]
   81dc0:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   81dc2:	697b      	ldr	r3, [r7, #20]
   81dc4:	2200      	movs	r2, #0
   81dc6:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   81dc8:	697b      	ldr	r3, [r7, #20]
   81dca:	2200      	movs	r2, #0
   81dcc:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   81dce:	697b      	ldr	r3, [r7, #20]
   81dd0:	6a3a      	ldr	r2, [r7, #32]
   81dd2:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   81dd4:	7bbb      	ldrb	r3, [r7, #14]
   81dd6:	2b00      	cmp	r3, #0
   81dd8:	d102      	bne.n	81de0 <udd_ep_run+0xc4>
   81dda:	687b      	ldr	r3, [r7, #4]
   81ddc:	2b00      	cmp	r3, #0
   81dde:	d101      	bne.n	81de4 <udd_ep_run+0xc8>
   81de0:	2301      	movs	r3, #1
   81de2:	e000      	b.n	81de6 <udd_ep_run+0xca>
   81de4:	2300      	movs	r3, #0
   81de6:	b2db      	uxtb	r3, r3
   81de8:	f003 0301 	and.w	r3, r3, #1
   81dec:	b2d9      	uxtb	r1, r3
   81dee:	697a      	ldr	r2, [r7, #20]
   81df0:	7d13      	ldrb	r3, [r2, #20]
   81df2:	f361 0341 	bfi	r3, r1, #1, #1
   81df6:	7513      	strb	r3, [r2, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   81df8:	7bfb      	ldrb	r3, [r7, #15]
   81dfa:	4618      	mov	r0, r3
   81dfc:	4b08      	ldr	r3, [pc, #32]	; (81e20 <udd_ep_run+0x104>)
   81dfe:	4798      	blx	r3
	return true;
   81e00:	2301      	movs	r3, #1
#endif
}
   81e02:	4618      	mov	r0, r3
   81e04:	3718      	adds	r7, #24
   81e06:	46bd      	mov	sp, r7
   81e08:	bd80      	pop	{r7, pc}
   81e0a:	bf00      	nop
   81e0c:	2007075c 	.word	0x2007075c
   81e10:	400ac000 	.word	0x400ac000
   81e14:	400ac1c0 	.word	0x400ac1c0
   81e18:	00081119 	.word	0x00081119
   81e1c:	00081171 	.word	0x00081171
   81e20:	0008272d 	.word	0x0008272d

00081e24 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   81e24:	b580      	push	{r7, lr}
   81e26:	b084      	sub	sp, #16
   81e28:	af00      	add	r7, sp, #0
   81e2a:	4603      	mov	r3, r0
   81e2c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81e2e:	79fb      	ldrb	r3, [r7, #7]
   81e30:	f003 030f 	and.w	r3, r3, #15
   81e34:	73fb      	strb	r3, [r7, #15]
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   81e36:	4a1e      	ldr	r2, [pc, #120]	; (81eb0 <udd_ep_abort+0x8c>)
   81e38:	7bfb      	ldrb	r3, [r7, #15]
   81e3a:	3b01      	subs	r3, #1
   81e3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   81e40:	fa01 f303 	lsl.w	r3, r1, r3
   81e44:	6153      	str	r3, [r2, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   81e46:	7bfb      	ldrb	r3, [r7, #15]
   81e48:	011a      	lsls	r2, r3, #4
   81e4a:	4b1a      	ldr	r3, [pc, #104]	; (81eb4 <udd_ep_abort+0x90>)
   81e4c:	4413      	add	r3, r2
   81e4e:	2200      	movs	r2, #0
   81e50:	609a      	str	r2, [r3, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   81e52:	4a17      	ldr	r2, [pc, #92]	; (81eb0 <udd_ep_abort+0x8c>)
   81e54:	7bfb      	ldrb	r3, [r7, #15]
   81e56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81e5a:	fa01 f303 	lsl.w	r3, r1, r3
   81e5e:	6153      	str	r3, [r2, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   81e60:	79fb      	ldrb	r3, [r7, #7]
   81e62:	b25b      	sxtb	r3, r3
   81e64:	2b00      	cmp	r3, #0
   81e66:	da1b      	bge.n	81ea0 <udd_ep_abort+0x7c>
		while(udd_nb_busy_bank(ep_index)) {
   81e68:	e010      	b.n	81e8c <udd_ep_abort+0x68>
			udd_kill_last_in_bank(ep_index);
   81e6a:	7bfb      	ldrb	r3, [r7, #15]
   81e6c:	009a      	lsls	r2, r3, #2
   81e6e:	4b12      	ldr	r3, [pc, #72]	; (81eb8 <udd_ep_abort+0x94>)
   81e70:	4413      	add	r3, r2
   81e72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81e76:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   81e78:	bf00      	nop
   81e7a:	7bfb      	ldrb	r3, [r7, #15]
   81e7c:	009a      	lsls	r2, r3, #2
   81e7e:	4b0f      	ldr	r3, [pc, #60]	; (81ebc <udd_ep_abort+0x98>)
   81e80:	4413      	add	r3, r2
   81e82:	681b      	ldr	r3, [r3, #0]
   81e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   81e88:	2b00      	cmp	r3, #0
   81e8a:	d1f6      	bne.n	81e7a <udd_ep_abort+0x56>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   81e8c:	7bfb      	ldrb	r3, [r7, #15]
   81e8e:	009a      	lsls	r2, r3, #2
   81e90:	4b0b      	ldr	r3, [pc, #44]	; (81ec0 <udd_ep_abort+0x9c>)
   81e92:	4413      	add	r3, r2
   81e94:	681b      	ldr	r3, [r3, #0]
   81e96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   81e9a:	0b1b      	lsrs	r3, r3, #12
   81e9c:	2b00      	cmp	r3, #0
   81e9e:	d1e4      	bne.n	81e6a <udd_ep_abort+0x46>
			udd_kill_last_in_bank(ep_index);
			while(Is_udd_kill_last(ep_index));
		}
	}
	udd_ep_abort_job(ep);
   81ea0:	79fb      	ldrb	r3, [r7, #7]
   81ea2:	4618      	mov	r0, r3
   81ea4:	4b07      	ldr	r3, [pc, #28]	; (81ec4 <udd_ep_abort+0xa0>)
   81ea6:	4798      	blx	r3
}
   81ea8:	3710      	adds	r7, #16
   81eaa:	46bd      	mov	sp, r7
   81eac:	bd80      	pop	{r7, pc}
   81eae:	bf00      	nop
   81eb0:	400ac000 	.word	0x400ac000
   81eb4:	400ac300 	.word	0x400ac300
   81eb8:	400ac1f0 	.word	0x400ac1f0
   81ebc:	400ac1c0 	.word	0x400ac1c0
   81ec0:	400ac130 	.word	0x400ac130
   81ec4:	00082689 	.word	0x00082689

00081ec8 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   81ec8:	b580      	push	{r7, lr}
   81eca:	b082      	sub	sp, #8
   81ecc:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   81ece:	4a19      	ldr	r2, [pc, #100]	; (81f34 <udd_reset_ep_ctrl+0x6c>)
   81ed0:	4b18      	ldr	r3, [pc, #96]	; (81f34 <udd_reset_ep_ctrl+0x6c>)
   81ed2:	681b      	ldr	r3, [r3, #0]
   81ed4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81ed8:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   81eda:	4a16      	ldr	r2, [pc, #88]	; (81f34 <udd_reset_ep_ctrl+0x6c>)
   81edc:	4b15      	ldr	r3, [pc, #84]	; (81f34 <udd_reset_ep_ctrl+0x6c>)
   81ede:	681b      	ldr	r3, [r3, #0]
   81ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81ee4:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   81ee6:	4a14      	ldr	r2, [pc, #80]	; (81f38 <udd_reset_ep_ctrl+0x70>)
   81ee8:	4b13      	ldr	r3, [pc, #76]	; (81f38 <udd_reset_ep_ctrl+0x70>)
   81eea:	681b      	ldr	r3, [r3, #0]
   81eec:	f423 53cb 	bic.w	r3, r3, #6496	; 0x1960
   81ef0:	f023 031c 	bic.w	r3, r3, #28
   81ef4:	6013      	str	r3, [r2, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   81ef6:	4a10      	ldr	r2, [pc, #64]	; (81f38 <udd_reset_ep_ctrl+0x70>)
   81ef8:	4b0f      	ldr	r3, [pc, #60]	; (81f38 <udd_reset_ep_ctrl+0x70>)
   81efa:	681b      	ldr	r3, [r3, #0]
   81efc:	f043 0302 	orr.w	r3, r3, #2
   81f00:	6013      	str	r3, [r2, #0]
	udd_enable_endpoint(0);
   81f02:	4a0c      	ldr	r2, [pc, #48]	; (81f34 <udd_reset_ep_ctrl+0x6c>)
   81f04:	4b0b      	ldr	r3, [pc, #44]	; (81f34 <udd_reset_ep_ctrl+0x6c>)
   81f06:	69db      	ldr	r3, [r3, #28]
   81f08:	f043 0301 	orr.w	r3, r3, #1
   81f0c:	61d3      	str	r3, [r2, #28]
	flags = cpu_irq_save();
   81f0e:	4b0b      	ldr	r3, [pc, #44]	; (81f3c <udd_reset_ep_ctrl+0x74>)
   81f10:	4798      	blx	r3
   81f12:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   81f14:	4b0a      	ldr	r3, [pc, #40]	; (81f40 <udd_reset_ep_ctrl+0x78>)
   81f16:	2204      	movs	r2, #4
   81f18:	601a      	str	r2, [r3, #0]
	udd_enable_out_received_interrupt(0);
   81f1a:	4b09      	ldr	r3, [pc, #36]	; (81f40 <udd_reset_ep_ctrl+0x78>)
   81f1c:	2202      	movs	r2, #2
   81f1e:	601a      	str	r2, [r3, #0]
	udd_enable_endpoint_interrupt(0);
   81f20:	4b04      	ldr	r3, [pc, #16]	; (81f34 <udd_reset_ep_ctrl+0x6c>)
   81f22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81f26:	619a      	str	r2, [r3, #24]
	cpu_irq_restore(flags);
   81f28:	6878      	ldr	r0, [r7, #4]
   81f2a:	4b06      	ldr	r3, [pc, #24]	; (81f44 <udd_reset_ep_ctrl+0x7c>)
   81f2c:	4798      	blx	r3
}
   81f2e:	3708      	adds	r7, #8
   81f30:	46bd      	mov	sp, r7
   81f32:	bd80      	pop	{r7, pc}
   81f34:	400ac000 	.word	0x400ac000
   81f38:	400ac100 	.word	0x400ac100
   81f3c:	00081119 	.word	0x00081119
   81f40:	400ac1f0 	.word	0x400ac1f0
   81f44:	00081171 	.word	0x00081171

00081f48 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   81f48:	b580      	push	{r7, lr}
   81f4a:	b082      	sub	sp, #8
   81f4c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   81f4e:	4b0d      	ldr	r3, [pc, #52]	; (81f84 <udd_ctrl_init+0x3c>)
   81f50:	4798      	blx	r3
   81f52:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   81f54:	4b0c      	ldr	r3, [pc, #48]	; (81f88 <udd_ctrl_init+0x40>)
   81f56:	2201      	movs	r2, #1
   81f58:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
   81f5a:	6878      	ldr	r0, [r7, #4]
   81f5c:	4b0b      	ldr	r3, [pc, #44]	; (81f8c <udd_ctrl_init+0x44>)
   81f5e:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   81f60:	4b0b      	ldr	r3, [pc, #44]	; (81f90 <udd_ctrl_init+0x48>)
   81f62:	2202      	movs	r2, #2
   81f64:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
   81f66:	4b0b      	ldr	r3, [pc, #44]	; (81f94 <udd_ctrl_init+0x4c>)
   81f68:	2200      	movs	r2, #0
   81f6a:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   81f6c:	4b09      	ldr	r3, [pc, #36]	; (81f94 <udd_ctrl_init+0x4c>)
   81f6e:	2200      	movs	r2, #0
   81f70:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   81f72:	4b08      	ldr	r3, [pc, #32]	; (81f94 <udd_ctrl_init+0x4c>)
   81f74:	2200      	movs	r2, #0
   81f76:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   81f78:	4b07      	ldr	r3, [pc, #28]	; (81f98 <udd_ctrl_init+0x50>)
   81f7a:	2200      	movs	r2, #0
   81f7c:	701a      	strb	r2, [r3, #0]
}
   81f7e:	3708      	adds	r7, #8
   81f80:	46bd      	mov	sp, r7
   81f82:	bd80      	pop	{r7, pc}
   81f84:	00081119 	.word	0x00081119
   81f88:	400ac220 	.word	0x400ac220
   81f8c:	00081171 	.word	0x00081171
   81f90:	400ac160 	.word	0x400ac160
   81f94:	2007086c 	.word	0x2007086c
   81f98:	20070754 	.word	0x20070754

00081f9c <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   81f9c:	b580      	push	{r7, lr}
   81f9e:	b084      	sub	sp, #16
   81fa0:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   81fa2:	4b3b      	ldr	r3, [pc, #236]	; (82090 <udd_ctrl_setup_received+0xf4>)
   81fa4:	781b      	ldrb	r3, [r3, #0]
   81fa6:	2b00      	cmp	r3, #0
   81fa8:	d003      	beq.n	81fb2 <udd_ctrl_setup_received+0x16>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   81faa:	4b3a      	ldr	r3, [pc, #232]	; (82094 <udd_ctrl_setup_received+0xf8>)
   81fac:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   81fae:	4b3a      	ldr	r3, [pc, #232]	; (82098 <udd_ctrl_setup_received+0xfc>)
   81fb0:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   81fb2:	4b3a      	ldr	r3, [pc, #232]	; (8209c <udd_ctrl_setup_received+0x100>)
   81fb4:	681a      	ldr	r2, [r3, #0]
   81fb6:	4b3a      	ldr	r3, [pc, #232]	; (820a0 <udd_ctrl_setup_received+0x104>)
   81fb8:	4013      	ands	r3, r2
   81fba:	0d1b      	lsrs	r3, r3, #20
   81fbc:	2b08      	cmp	r3, #8
   81fbe:	d005      	beq.n	81fcc <udd_ctrl_setup_received+0x30>
		udd_ctrl_stall_data();
   81fc0:	4b38      	ldr	r3, [pc, #224]	; (820a4 <udd_ctrl_setup_received+0x108>)
   81fc2:	4798      	blx	r3
		udd_ack_setup_received(0);
   81fc4:	4b38      	ldr	r3, [pc, #224]	; (820a8 <udd_ctrl_setup_received+0x10c>)
   81fc6:	2204      	movs	r2, #4
   81fc8:	601a      	str	r2, [r3, #0]
		return; // Error data number doesn't correspond to SETUP packet
   81fca:	e05d      	b.n	82088 <udd_ctrl_setup_received+0xec>
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
   81fcc:	4b37      	ldr	r3, [pc, #220]	; (820ac <udd_ctrl_setup_received+0x110>)
   81fce:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   81fd0:	2300      	movs	r3, #0
   81fd2:	73fb      	strb	r3, [r7, #15]
   81fd4:	e00a      	b.n	81fec <udd_ctrl_setup_received+0x50>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   81fd6:	7bfb      	ldrb	r3, [r7, #15]
   81fd8:	4a35      	ldr	r2, [pc, #212]	; (820b0 <udd_ctrl_setup_received+0x114>)
   81fda:	441a      	add	r2, r3
   81fdc:	68bb      	ldr	r3, [r7, #8]
   81fde:	1c59      	adds	r1, r3, #1
   81fe0:	60b9      	str	r1, [r7, #8]
   81fe2:	781b      	ldrb	r3, [r3, #0]
   81fe4:	7013      	strb	r3, [r2, #0]
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
   81fe6:	7bfb      	ldrb	r3, [r7, #15]
   81fe8:	3301      	adds	r3, #1
   81fea:	73fb      	strb	r3, [r7, #15]
   81fec:	7bfb      	ldrb	r3, [r7, #15]
   81fee:	2b07      	cmp	r3, #7
   81ff0:	d9f1      	bls.n	81fd6 <udd_ctrl_setup_received+0x3a>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   81ff2:	4b2f      	ldr	r3, [pc, #188]	; (820b0 <udd_ctrl_setup_received+0x114>)
   81ff4:	885a      	ldrh	r2, [r3, #2]
   81ff6:	4b2e      	ldr	r3, [pc, #184]	; (820b0 <udd_ctrl_setup_received+0x114>)
   81ff8:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   81ffa:	4b2d      	ldr	r3, [pc, #180]	; (820b0 <udd_ctrl_setup_received+0x114>)
   81ffc:	889a      	ldrh	r2, [r3, #4]
   81ffe:	4b2c      	ldr	r3, [pc, #176]	; (820b0 <udd_ctrl_setup_received+0x114>)
   82000:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   82002:	4b2b      	ldr	r3, [pc, #172]	; (820b0 <udd_ctrl_setup_received+0x114>)
   82004:	88da      	ldrh	r2, [r3, #6]
   82006:	4b2a      	ldr	r3, [pc, #168]	; (820b0 <udd_ctrl_setup_received+0x114>)
   82008:	80da      	strh	r2, [r3, #6]

	// Decode setup request
	if (udc_process_setup() == false) {
   8200a:	4b2a      	ldr	r3, [pc, #168]	; (820b4 <udd_ctrl_setup_received+0x118>)
   8200c:	4798      	blx	r3
   8200e:	4603      	mov	r3, r0
   82010:	f083 0301 	eor.w	r3, r3, #1
   82014:	b2db      	uxtb	r3, r3
   82016:	2b00      	cmp	r3, #0
   82018:	d005      	beq.n	82026 <udd_ctrl_setup_received+0x8a>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   8201a:	4b22      	ldr	r3, [pc, #136]	; (820a4 <udd_ctrl_setup_received+0x108>)
   8201c:	4798      	blx	r3
		udd_ack_setup_received(0);
   8201e:	4b22      	ldr	r3, [pc, #136]	; (820a8 <udd_ctrl_setup_received+0x10c>)
   82020:	2204      	movs	r2, #4
   82022:	601a      	str	r2, [r3, #0]
		return;
   82024:	e030      	b.n	82088 <udd_ctrl_setup_received+0xec>
	}
	udd_ack_setup_received(0);
   82026:	4b20      	ldr	r3, [pc, #128]	; (820a8 <udd_ctrl_setup_received+0x10c>)
   82028:	2204      	movs	r2, #4
   8202a:	601a      	str	r2, [r3, #0]

	if (Udd_setup_is_in()) {
   8202c:	4b20      	ldr	r3, [pc, #128]	; (820b0 <udd_ctrl_setup_received+0x114>)
   8202e:	781b      	ldrb	r3, [r3, #0]
   82030:	b2db      	uxtb	r3, r3
   82032:	b25b      	sxtb	r3, r3
   82034:	2b00      	cmp	r3, #0
   82036:	da0b      	bge.n	82050 <udd_ctrl_setup_received+0xb4>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   82038:	4b1f      	ldr	r3, [pc, #124]	; (820b8 <udd_ctrl_setup_received+0x11c>)
   8203a:	2200      	movs	r2, #0
   8203c:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8203e:	4b1f      	ldr	r3, [pc, #124]	; (820bc <udd_ctrl_setup_received+0x120>)
   82040:	2200      	movs	r2, #0
   82042:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   82044:	4b12      	ldr	r3, [pc, #72]	; (82090 <udd_ctrl_setup_received+0xf4>)
   82046:	2202      	movs	r2, #2
   82048:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   8204a:	4b1d      	ldr	r3, [pc, #116]	; (820c0 <udd_ctrl_setup_received+0x124>)
   8204c:	4798      	blx	r3
   8204e:	e01b      	b.n	82088 <udd_ctrl_setup_received+0xec>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   82050:	4b17      	ldr	r3, [pc, #92]	; (820b0 <udd_ctrl_setup_received+0x114>)
   82052:	88db      	ldrh	r3, [r3, #6]
   82054:	2b00      	cmp	r3, #0
   82056:	d102      	bne.n	8205e <udd_ctrl_setup_received+0xc2>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   82058:	4b1a      	ldr	r3, [pc, #104]	; (820c4 <udd_ctrl_setup_received+0x128>)
   8205a:	4798      	blx	r3
			return;
   8205c:	e014      	b.n	82088 <udd_ctrl_setup_received+0xec>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   8205e:	4b16      	ldr	r3, [pc, #88]	; (820b8 <udd_ctrl_setup_received+0x11c>)
   82060:	2200      	movs	r2, #0
   82062:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   82064:	4b15      	ldr	r3, [pc, #84]	; (820bc <udd_ctrl_setup_received+0x120>)
   82066:	2200      	movs	r2, #0
   82068:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   8206a:	4b09      	ldr	r3, [pc, #36]	; (82090 <udd_ctrl_setup_received+0xf4>)
   8206c:	2201      	movs	r2, #1
   8206e:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   82070:	4b0d      	ldr	r3, [pc, #52]	; (820a8 <udd_ctrl_setup_received+0x10c>)
   82072:	2210      	movs	r2, #16
   82074:	601a      	str	r2, [r3, #0]
		flags = cpu_irq_save();
   82076:	4b14      	ldr	r3, [pc, #80]	; (820c8 <udd_ctrl_setup_received+0x12c>)
   82078:	4798      	blx	r3
   8207a:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   8207c:	4b13      	ldr	r3, [pc, #76]	; (820cc <udd_ctrl_setup_received+0x130>)
   8207e:	2210      	movs	r2, #16
   82080:	601a      	str	r2, [r3, #0]
		cpu_irq_restore(flags);
   82082:	6878      	ldr	r0, [r7, #4]
   82084:	4b12      	ldr	r3, [pc, #72]	; (820d0 <udd_ctrl_setup_received+0x134>)
   82086:	4798      	blx	r3
	}
}
   82088:	3710      	adds	r7, #16
   8208a:	46bd      	mov	sp, r7
   8208c:	bd80      	pop	{r7, pc}
   8208e:	bf00      	nop
   82090:	20070754 	.word	0x20070754
   82094:	00082505 	.word	0x00082505
   82098:	00081f49 	.word	0x00081f49
   8209c:	400ac130 	.word	0x400ac130
   820a0:	7ff00000 	.word	0x7ff00000
   820a4:	00082455 	.word	0x00082455
   820a8:	400ac160 	.word	0x400ac160
   820ac:	20180000 	.word	0x20180000
   820b0:	2007086c 	.word	0x2007086c
   820b4:	00081001 	.word	0x00081001
   820b8:	20070756 	.word	0x20070756
   820bc:	20070758 	.word	0x20070758
   820c0:	000820d5 	.word	0x000820d5
   820c4:	00082479 	.word	0x00082479
   820c8:	00081119 	.word	0x00081119
   820cc:	400ac1f0 	.word	0x400ac1f0
   820d0:	00081171 	.word	0x00081171

000820d4 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   820d4:	b580      	push	{r7, lr}
   820d6:	b084      	sub	sp, #16
   820d8:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   820da:	4b46      	ldr	r3, [pc, #280]	; (821f4 <udd_ctrl_in_sent+0x120>)
   820dc:	4798      	blx	r3
   820de:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   820e0:	4b45      	ldr	r3, [pc, #276]	; (821f8 <udd_ctrl_in_sent+0x124>)
   820e2:	2201      	movs	r2, #1
   820e4:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
   820e6:	6838      	ldr	r0, [r7, #0]
   820e8:	4b44      	ldr	r3, [pc, #272]	; (821fc <udd_ctrl_in_sent+0x128>)
   820ea:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   820ec:	4b44      	ldr	r3, [pc, #272]	; (82200 <udd_ctrl_in_sent+0x12c>)
   820ee:	781b      	ldrb	r3, [r3, #0]
   820f0:	2b03      	cmp	r3, #3
   820f2:	d104      	bne.n	820fe <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   820f4:	4b43      	ldr	r3, [pc, #268]	; (82204 <udd_ctrl_in_sent+0x130>)
   820f6:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   820f8:	4b43      	ldr	r3, [pc, #268]	; (82208 <udd_ctrl_in_sent+0x134>)
   820fa:	4798      	blx	r3
		return;
   820fc:	e077      	b.n	821ee <udd_ctrl_in_sent+0x11a>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   820fe:	4b43      	ldr	r3, [pc, #268]	; (8220c <udd_ctrl_in_sent+0x138>)
   82100:	899a      	ldrh	r2, [r3, #12]
   82102:	4b43      	ldr	r3, [pc, #268]	; (82210 <udd_ctrl_in_sent+0x13c>)
   82104:	881b      	ldrh	r3, [r3, #0]
   82106:	1ad3      	subs	r3, r2, r3
   82108:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   8210a:	89fb      	ldrh	r3, [r7, #14]
   8210c:	2b00      	cmp	r3, #0
   8210e:	d127      	bne.n	82160 <udd_ctrl_in_sent+0x8c>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   82110:	4b40      	ldr	r3, [pc, #256]	; (82214 <udd_ctrl_in_sent+0x140>)
   82112:	881a      	ldrh	r2, [r3, #0]
   82114:	4b3e      	ldr	r3, [pc, #248]	; (82210 <udd_ctrl_in_sent+0x13c>)
   82116:	881b      	ldrh	r3, [r3, #0]
   82118:	4413      	add	r3, r2
   8211a:	b29a      	uxth	r2, r3
   8211c:	4b3d      	ldr	r3, [pc, #244]	; (82214 <udd_ctrl_in_sent+0x140>)
   8211e:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   82120:	4b3a      	ldr	r3, [pc, #232]	; (8220c <udd_ctrl_in_sent+0x138>)
   82122:	88da      	ldrh	r2, [r3, #6]
   82124:	4b3b      	ldr	r3, [pc, #236]	; (82214 <udd_ctrl_in_sent+0x140>)
   82126:	881b      	ldrh	r3, [r3, #0]
   82128:	429a      	cmp	r2, r3
   8212a:	d003      	beq.n	82134 <udd_ctrl_in_sent+0x60>
					|| b_shortpacket) {
   8212c:	4b3a      	ldr	r3, [pc, #232]	; (82218 <udd_ctrl_in_sent+0x144>)
   8212e:	781b      	ldrb	r3, [r3, #0]
   82130:	2b00      	cmp	r3, #0
   82132:	d002      	beq.n	8213a <udd_ctrl_in_sent+0x66>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
   82134:	4b39      	ldr	r3, [pc, #228]	; (8221c <udd_ctrl_in_sent+0x148>)
   82136:	4798      	blx	r3
			return;
   82138:	e059      	b.n	821ee <udd_ctrl_in_sent+0x11a>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   8213a:	4b34      	ldr	r3, [pc, #208]	; (8220c <udd_ctrl_in_sent+0x138>)
   8213c:	695b      	ldr	r3, [r3, #20]
   8213e:	2b00      	cmp	r3, #0
   82140:	d00e      	beq.n	82160 <udd_ctrl_in_sent+0x8c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   82142:	4b32      	ldr	r3, [pc, #200]	; (8220c <udd_ctrl_in_sent+0x138>)
   82144:	695b      	ldr	r3, [r3, #20]
   82146:	4798      	blx	r3
   82148:	4603      	mov	r3, r0
   8214a:	f083 0301 	eor.w	r3, r3, #1
   8214e:	b2db      	uxtb	r3, r3
   82150:	2b00      	cmp	r3, #0
   82152:	d105      	bne.n	82160 <udd_ctrl_in_sent+0x8c>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   82154:	4b2e      	ldr	r3, [pc, #184]	; (82210 <udd_ctrl_in_sent+0x13c>)
   82156:	2200      	movs	r2, #0
   82158:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   8215a:	4b2c      	ldr	r3, [pc, #176]	; (8220c <udd_ctrl_in_sent+0x138>)
   8215c:	899b      	ldrh	r3, [r3, #12]
   8215e:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   82160:	89fb      	ldrh	r3, [r7, #14]
   82162:	2b07      	cmp	r3, #7
   82164:	d905      	bls.n	82172 <udd_ctrl_in_sent+0x9e>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   82166:	2308      	movs	r3, #8
   82168:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   8216a:	4b2b      	ldr	r3, [pc, #172]	; (82218 <udd_ctrl_in_sent+0x144>)
   8216c:	2200      	movs	r2, #0
   8216e:	701a      	strb	r2, [r3, #0]
   82170:	e002      	b.n	82178 <udd_ctrl_in_sent+0xa4>
	} else {
		b_shortpacket = true;
   82172:	4b29      	ldr	r3, [pc, #164]	; (82218 <udd_ctrl_in_sent+0x144>)
   82174:	2201      	movs	r2, #1
   82176:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82178:	4b29      	ldr	r3, [pc, #164]	; (82220 <udd_ctrl_in_sent+0x14c>)
   8217a:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8217c:	4b23      	ldr	r3, [pc, #140]	; (8220c <udd_ctrl_in_sent+0x138>)
   8217e:	689b      	ldr	r3, [r3, #8]
   82180:	4a23      	ldr	r2, [pc, #140]	; (82210 <udd_ctrl_in_sent+0x13c>)
   82182:	8812      	ldrh	r2, [r2, #0]
   82184:	4413      	add	r3, r2
   82186:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   82188:	4b1a      	ldr	r3, [pc, #104]	; (821f4 <udd_ctrl_in_sent+0x120>)
   8218a:	4798      	blx	r3
   8218c:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   8218e:	4b25      	ldr	r3, [pc, #148]	; (82224 <udd_ctrl_in_sent+0x150>)
   82190:	681b      	ldr	r3, [r3, #0]
   82192:	f003 0302 	and.w	r3, r3, #2
   82196:	2b00      	cmp	r3, #0
   82198:	d006      	beq.n	821a8 <udd_ctrl_in_sent+0xd4>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   8219a:	6838      	ldr	r0, [r7, #0]
   8219c:	4b17      	ldr	r3, [pc, #92]	; (821fc <udd_ctrl_in_sent+0x128>)
   8219e:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   821a0:	4b17      	ldr	r3, [pc, #92]	; (82200 <udd_ctrl_in_sent+0x12c>)
   821a2:	2204      	movs	r2, #4
   821a4:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   821a6:	e022      	b.n	821ee <udd_ctrl_in_sent+0x11a>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   821a8:	2300      	movs	r3, #0
   821aa:	737b      	strb	r3, [r7, #13]
   821ac:	e00a      	b.n	821c4 <udd_ctrl_in_sent+0xf0>
		*ptr_dest++ = *ptr_src++;
   821ae:	68bb      	ldr	r3, [r7, #8]
   821b0:	1c5a      	adds	r2, r3, #1
   821b2:	60ba      	str	r2, [r7, #8]
   821b4:	687a      	ldr	r2, [r7, #4]
   821b6:	1c51      	adds	r1, r2, #1
   821b8:	6079      	str	r1, [r7, #4]
   821ba:	7812      	ldrb	r2, [r2, #0]
   821bc:	701a      	strb	r2, [r3, #0]
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   821be:	7b7b      	ldrb	r3, [r7, #13]
   821c0:	3301      	adds	r3, #1
   821c2:	737b      	strb	r3, [r7, #13]
   821c4:	7b7b      	ldrb	r3, [r7, #13]
   821c6:	b29b      	uxth	r3, r3
   821c8:	89fa      	ldrh	r2, [r7, #14]
   821ca:	429a      	cmp	r2, r3
   821cc:	d8ef      	bhi.n	821ae <udd_ctrl_in_sent+0xda>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   821ce:	4b10      	ldr	r3, [pc, #64]	; (82210 <udd_ctrl_in_sent+0x13c>)
   821d0:	881a      	ldrh	r2, [r3, #0]
   821d2:	89fb      	ldrh	r3, [r7, #14]
   821d4:	4413      	add	r3, r2
   821d6:	b29a      	uxth	r2, r3
   821d8:	4b0d      	ldr	r3, [pc, #52]	; (82210 <udd_ctrl_in_sent+0x13c>)
   821da:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   821dc:	4b12      	ldr	r3, [pc, #72]	; (82228 <udd_ctrl_in_sent+0x154>)
   821de:	2201      	movs	r2, #1
   821e0:	601a      	str	r2, [r3, #0]
	udd_enable_in_send_interrupt(0);
   821e2:	4b12      	ldr	r3, [pc, #72]	; (8222c <udd_ctrl_in_sent+0x158>)
   821e4:	2201      	movs	r2, #1
   821e6:	601a      	str	r2, [r3, #0]
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   821e8:	6838      	ldr	r0, [r7, #0]
   821ea:	4b04      	ldr	r3, [pc, #16]	; (821fc <udd_ctrl_in_sent+0x128>)
   821ec:	4798      	blx	r3
}
   821ee:	3710      	adds	r7, #16
   821f0:	46bd      	mov	sp, r7
   821f2:	bd80      	pop	{r7, pc}
   821f4:	00081119 	.word	0x00081119
   821f8:	400ac220 	.word	0x400ac220
   821fc:	00081171 	.word	0x00081171
   82200:	20070754 	.word	0x20070754
   82204:	00082505 	.word	0x00082505
   82208:	00081f49 	.word	0x00081f49
   8220c:	2007086c 	.word	0x2007086c
   82210:	20070758 	.word	0x20070758
   82214:	20070756 	.word	0x20070756
   82218:	20070774 	.word	0x20070774
   8221c:	000824c5 	.word	0x000824c5
   82220:	20180000 	.word	0x20180000
   82224:	400ac130 	.word	0x400ac130
   82228:	400ac160 	.word	0x400ac160
   8222c:	400ac1f0 	.word	0x400ac1f0

00082230 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   82230:	b580      	push	{r7, lr}
   82232:	b084      	sub	sp, #16
   82234:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   82236:	4b59      	ldr	r3, [pc, #356]	; (8239c <udd_ctrl_out_received+0x16c>)
   82238:	781b      	ldrb	r3, [r3, #0]
   8223a:	2b01      	cmp	r3, #1
   8223c:	d00f      	beq.n	8225e <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   8223e:	4b57      	ldr	r3, [pc, #348]	; (8239c <udd_ctrl_out_received+0x16c>)
   82240:	781b      	ldrb	r3, [r3, #0]
   82242:	2b02      	cmp	r3, #2
   82244:	d003      	beq.n	8224e <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   82246:	4b55      	ldr	r3, [pc, #340]	; (8239c <udd_ctrl_out_received+0x16c>)
   82248:	781b      	ldrb	r3, [r3, #0]
   8224a:	2b04      	cmp	r3, #4
   8224c:	d102      	bne.n	82254 <udd_ctrl_out_received+0x24>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   8224e:	4b54      	ldr	r3, [pc, #336]	; (823a0 <udd_ctrl_out_received+0x170>)
   82250:	4798      	blx	r3
   82252:	e001      	b.n	82258 <udd_ctrl_out_received+0x28>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   82254:	4b53      	ldr	r3, [pc, #332]	; (823a4 <udd_ctrl_out_received+0x174>)
   82256:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   82258:	4b53      	ldr	r3, [pc, #332]	; (823a8 <udd_ctrl_out_received+0x178>)
   8225a:	4798      	blx	r3
		return;
   8225c:	e09b      	b.n	82396 <udd_ctrl_out_received+0x166>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   8225e:	4b53      	ldr	r3, [pc, #332]	; (823ac <udd_ctrl_out_received+0x17c>)
   82260:	681a      	ldr	r2, [r3, #0]
   82262:	4b53      	ldr	r3, [pc, #332]	; (823b0 <udd_ctrl_out_received+0x180>)
   82264:	4013      	ands	r3, r2
   82266:	0d1b      	lsrs	r3, r3, #20
   82268:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   8226a:	4b52      	ldr	r3, [pc, #328]	; (823b4 <udd_ctrl_out_received+0x184>)
   8226c:	899b      	ldrh	r3, [r3, #12]
   8226e:	461a      	mov	r2, r3
   82270:	4b51      	ldr	r3, [pc, #324]	; (823b8 <udd_ctrl_out_received+0x188>)
   82272:	881b      	ldrh	r3, [r3, #0]
   82274:	4619      	mov	r1, r3
   82276:	89bb      	ldrh	r3, [r7, #12]
   82278:	440b      	add	r3, r1
   8227a:	429a      	cmp	r2, r3
   8227c:	da05      	bge.n	8228a <udd_ctrl_out_received+0x5a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8227e:	4b4d      	ldr	r3, [pc, #308]	; (823b4 <udd_ctrl_out_received+0x184>)
   82280:	899a      	ldrh	r2, [r3, #12]
   82282:	4b4d      	ldr	r3, [pc, #308]	; (823b8 <udd_ctrl_out_received+0x188>)
   82284:	881b      	ldrh	r3, [r3, #0]
   82286:	1ad3      	subs	r3, r2, r3
   82288:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8228a:	4b4c      	ldr	r3, [pc, #304]	; (823bc <udd_ctrl_out_received+0x18c>)
   8228c:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8228e:	4b49      	ldr	r3, [pc, #292]	; (823b4 <udd_ctrl_out_received+0x184>)
   82290:	689b      	ldr	r3, [r3, #8]
   82292:	4a49      	ldr	r2, [pc, #292]	; (823b8 <udd_ctrl_out_received+0x188>)
   82294:	8812      	ldrh	r2, [r2, #0]
   82296:	4413      	add	r3, r2
   82298:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   8229a:	2300      	movs	r3, #0
   8229c:	73fb      	strb	r3, [r7, #15]
   8229e:	e00a      	b.n	822b6 <udd_ctrl_out_received+0x86>
		*ptr_dest++ = *ptr_src++;
   822a0:	687b      	ldr	r3, [r7, #4]
   822a2:	1c5a      	adds	r2, r3, #1
   822a4:	607a      	str	r2, [r7, #4]
   822a6:	68ba      	ldr	r2, [r7, #8]
   822a8:	1c51      	adds	r1, r2, #1
   822aa:	60b9      	str	r1, [r7, #8]
   822ac:	7812      	ldrb	r2, [r2, #0]
   822ae:	701a      	strb	r2, [r3, #0]
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   822b0:	7bfb      	ldrb	r3, [r7, #15]
   822b2:	3301      	adds	r3, #1
   822b4:	73fb      	strb	r3, [r7, #15]
   822b6:	7bfb      	ldrb	r3, [r7, #15]
   822b8:	b29b      	uxth	r3, r3
   822ba:	89ba      	ldrh	r2, [r7, #12]
   822bc:	429a      	cmp	r2, r3
   822be:	d8ef      	bhi.n	822a0 <udd_ctrl_out_received+0x70>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   822c0:	4b3d      	ldr	r3, [pc, #244]	; (823b8 <udd_ctrl_out_received+0x188>)
   822c2:	881a      	ldrh	r2, [r3, #0]
   822c4:	89bb      	ldrh	r3, [r7, #12]
   822c6:	4413      	add	r3, r2
   822c8:	b29a      	uxth	r2, r3
   822ca:	4b3b      	ldr	r3, [pc, #236]	; (823b8 <udd_ctrl_out_received+0x188>)
   822cc:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   822ce:	89bb      	ldrh	r3, [r7, #12]
   822d0:	2b08      	cmp	r3, #8
   822d2:	d10a      	bne.n	822ea <udd_ctrl_out_received+0xba>
			|| (udd_g_ctrlreq.req.wLength <=
   822d4:	4b37      	ldr	r3, [pc, #220]	; (823b4 <udd_ctrl_out_received+0x184>)
   822d6:	88db      	ldrh	r3, [r3, #6]
   822d8:	461a      	mov	r2, r3
					(udd_ctrl_prev_payload_buf_cnt +
   822da:	4b39      	ldr	r3, [pc, #228]	; (823c0 <udd_ctrl_out_received+0x190>)
   822dc:	881b      	ldrh	r3, [r3, #0]
   822de:	4619      	mov	r1, r3
   822e0:	4b35      	ldr	r3, [pc, #212]	; (823b8 <udd_ctrl_out_received+0x188>)
   822e2:	881b      	ldrh	r3, [r3, #0]
   822e4:	440b      	add	r3, r1
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   822e6:	429a      	cmp	r2, r3
   822e8:	dc1c      	bgt.n	82324 <udd_ctrl_out_received+0xf4>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   822ea:	4b33      	ldr	r3, [pc, #204]	; (823b8 <udd_ctrl_out_received+0x188>)
   822ec:	881a      	ldrh	r2, [r3, #0]
   822ee:	4b31      	ldr	r3, [pc, #196]	; (823b4 <udd_ctrl_out_received+0x184>)
   822f0:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   822f2:	4b30      	ldr	r3, [pc, #192]	; (823b4 <udd_ctrl_out_received+0x184>)
   822f4:	695b      	ldr	r3, [r3, #20]
   822f6:	2b00      	cmp	r3, #0
   822f8:	d00e      	beq.n	82318 <udd_ctrl_out_received+0xe8>
			if (!udd_g_ctrlreq.over_under_run()) {
   822fa:	4b2e      	ldr	r3, [pc, #184]	; (823b4 <udd_ctrl_out_received+0x184>)
   822fc:	695b      	ldr	r3, [r3, #20]
   822fe:	4798      	blx	r3
   82300:	4603      	mov	r3, r0
   82302:	f083 0301 	eor.w	r3, r3, #1
   82306:	b2db      	uxtb	r3, r3
   82308:	2b00      	cmp	r3, #0
   8230a:	d005      	beq.n	82318 <udd_ctrl_out_received+0xe8>
				// Stall ZLP
				udd_ctrl_stall_data();
   8230c:	4b25      	ldr	r3, [pc, #148]	; (823a4 <udd_ctrl_out_received+0x174>)
   8230e:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   82310:	4b2c      	ldr	r3, [pc, #176]	; (823c4 <udd_ctrl_out_received+0x194>)
   82312:	2202      	movs	r2, #2
   82314:	601a      	str	r2, [r3, #0]
				return;
   82316:	e03e      	b.n	82396 <udd_ctrl_out_received+0x166>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   82318:	4b2a      	ldr	r3, [pc, #168]	; (823c4 <udd_ctrl_out_received+0x194>)
   8231a:	2202      	movs	r2, #2
   8231c:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
   8231e:	4b2a      	ldr	r3, [pc, #168]	; (823c8 <udd_ctrl_out_received+0x198>)
   82320:	4798      	blx	r3
		return;
   82322:	e038      	b.n	82396 <udd_ctrl_out_received+0x166>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   82324:	4b23      	ldr	r3, [pc, #140]	; (823b4 <udd_ctrl_out_received+0x184>)
   82326:	899a      	ldrh	r2, [r3, #12]
   82328:	4b23      	ldr	r3, [pc, #140]	; (823b8 <udd_ctrl_out_received+0x188>)
   8232a:	881b      	ldrh	r3, [r3, #0]
   8232c:	429a      	cmp	r2, r3
   8232e:	d123      	bne.n	82378 <udd_ctrl_out_received+0x148>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   82330:	4b20      	ldr	r3, [pc, #128]	; (823b4 <udd_ctrl_out_received+0x184>)
   82332:	695b      	ldr	r3, [r3, #20]
   82334:	2b00      	cmp	r3, #0
   82336:	d105      	bne.n	82344 <udd_ctrl_out_received+0x114>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   82338:	4b1a      	ldr	r3, [pc, #104]	; (823a4 <udd_ctrl_out_received+0x174>)
   8233a:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   8233c:	4b21      	ldr	r3, [pc, #132]	; (823c4 <udd_ctrl_out_received+0x194>)
   8233e:	2202      	movs	r2, #2
   82340:	601a      	str	r2, [r3, #0]
			return;
   82342:	e028      	b.n	82396 <udd_ctrl_out_received+0x166>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   82344:	4b1b      	ldr	r3, [pc, #108]	; (823b4 <udd_ctrl_out_received+0x184>)
   82346:	695b      	ldr	r3, [r3, #20]
   82348:	4798      	blx	r3
   8234a:	4603      	mov	r3, r0
   8234c:	f083 0301 	eor.w	r3, r3, #1
   82350:	b2db      	uxtb	r3, r3
   82352:	2b00      	cmp	r3, #0
   82354:	d005      	beq.n	82362 <udd_ctrl_out_received+0x132>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   82356:	4b13      	ldr	r3, [pc, #76]	; (823a4 <udd_ctrl_out_received+0x174>)
   82358:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   8235a:	4b1a      	ldr	r3, [pc, #104]	; (823c4 <udd_ctrl_out_received+0x194>)
   8235c:	2202      	movs	r2, #2
   8235e:	601a      	str	r2, [r3, #0]
			return;
   82360:	e019      	b.n	82396 <udd_ctrl_out_received+0x166>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   82362:	4b17      	ldr	r3, [pc, #92]	; (823c0 <udd_ctrl_out_received+0x190>)
   82364:	881a      	ldrh	r2, [r3, #0]
   82366:	4b14      	ldr	r3, [pc, #80]	; (823b8 <udd_ctrl_out_received+0x188>)
   82368:	881b      	ldrh	r3, [r3, #0]
   8236a:	4413      	add	r3, r2
   8236c:	b29a      	uxth	r2, r3
   8236e:	4b14      	ldr	r3, [pc, #80]	; (823c0 <udd_ctrl_out_received+0x190>)
   82370:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   82372:	4b11      	ldr	r3, [pc, #68]	; (823b8 <udd_ctrl_out_received+0x188>)
   82374:	2200      	movs	r2, #0
   82376:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   82378:	4b12      	ldr	r3, [pc, #72]	; (823c4 <udd_ctrl_out_received+0x194>)
   8237a:	2202      	movs	r2, #2
   8237c:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   8237e:	4b11      	ldr	r3, [pc, #68]	; (823c4 <udd_ctrl_out_received+0x194>)
   82380:	2210      	movs	r2, #16
   82382:	601a      	str	r2, [r3, #0]
	flags = cpu_irq_save();
   82384:	4b11      	ldr	r3, [pc, #68]	; (823cc <udd_ctrl_out_received+0x19c>)
   82386:	4798      	blx	r3
   82388:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   8238a:	4b11      	ldr	r3, [pc, #68]	; (823d0 <udd_ctrl_out_received+0x1a0>)
   8238c:	2210      	movs	r2, #16
   8238e:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
   82390:	6838      	ldr	r0, [r7, #0]
   82392:	4b10      	ldr	r3, [pc, #64]	; (823d4 <udd_ctrl_out_received+0x1a4>)
   82394:	4798      	blx	r3
}
   82396:	3710      	adds	r7, #16
   82398:	46bd      	mov	sp, r7
   8239a:	bd80      	pop	{r7, pc}
   8239c:	20070754 	.word	0x20070754
   823a0:	00082505 	.word	0x00082505
   823a4:	00082455 	.word	0x00082455
   823a8:	00081f49 	.word	0x00081f49
   823ac:	400ac130 	.word	0x400ac130
   823b0:	7ff00000 	.word	0x7ff00000
   823b4:	2007086c 	.word	0x2007086c
   823b8:	20070758 	.word	0x20070758
   823bc:	20180000 	.word	0x20180000
   823c0:	20070756 	.word	0x20070756
   823c4:	400ac160 	.word	0x400ac160
   823c8:	00082479 	.word	0x00082479
   823cc:	00081119 	.word	0x00081119
   823d0:	400ac1f0 	.word	0x400ac1f0
   823d4:	00081171 	.word	0x00081171

000823d8 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   823d8:	b580      	push	{r7, lr}
   823da:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   823dc:	4b0b      	ldr	r3, [pc, #44]	; (8240c <udd_ctrl_underflow+0x34>)
   823de:	681b      	ldr	r3, [r3, #0]
   823e0:	f003 0302 	and.w	r3, r3, #2
   823e4:	2b00      	cmp	r3, #0
   823e6:	d000      	beq.n	823ea <udd_ctrl_underflow+0x12>
		return; // Underflow ignored if OUT data is received
   823e8:	e00e      	b.n	82408 <udd_ctrl_underflow+0x30>

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   823ea:	4b09      	ldr	r3, [pc, #36]	; (82410 <udd_ctrl_underflow+0x38>)
   823ec:	781b      	ldrb	r3, [r3, #0]
   823ee:	2b01      	cmp	r3, #1
   823f0:	d102      	bne.n	823f8 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   823f2:	4b08      	ldr	r3, [pc, #32]	; (82414 <udd_ctrl_underflow+0x3c>)
   823f4:	4798      	blx	r3
   823f6:	e007      	b.n	82408 <udd_ctrl_underflow+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   823f8:	4b05      	ldr	r3, [pc, #20]	; (82410 <udd_ctrl_underflow+0x38>)
   823fa:	781b      	ldrb	r3, [r3, #0]
   823fc:	2b04      	cmp	r3, #4
   823fe:	d103      	bne.n	82408 <udd_ctrl_underflow+0x30>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   82400:	4b05      	ldr	r3, [pc, #20]	; (82418 <udd_ctrl_underflow+0x40>)
   82402:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82406:	601a      	str	r2, [r3, #0]
	}
}
   82408:	bd80      	pop	{r7, pc}
   8240a:	bf00      	nop
   8240c:	400ac130 	.word	0x400ac130
   82410:	20070754 	.word	0x20070754
   82414:	00082479 	.word	0x00082479
   82418:	400ac1f0 	.word	0x400ac1f0

0008241c <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   8241c:	b480      	push	{r7}
   8241e:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   82420:	4b09      	ldr	r3, [pc, #36]	; (82448 <udd_ctrl_overflow+0x2c>)
   82422:	681b      	ldr	r3, [r3, #0]
   82424:	f003 0301 	and.w	r3, r3, #1
   82428:	2b00      	cmp	r3, #0
   8242a:	d000      	beq.n	8242e <udd_ctrl_overflow+0x12>
		return; // Overflow ignored if IN data is received
   8242c:	e007      	b.n	8243e <udd_ctrl_overflow+0x22>

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8242e:	4b07      	ldr	r3, [pc, #28]	; (8244c <udd_ctrl_overflow+0x30>)
   82430:	781b      	ldrb	r3, [r3, #0]
   82432:	2b03      	cmp	r3, #3
   82434:	d103      	bne.n	8243e <udd_ctrl_overflow+0x22>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   82436:	4b06      	ldr	r3, [pc, #24]	; (82450 <udd_ctrl_overflow+0x34>)
   82438:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8243c:	601a      	str	r2, [r3, #0]
	}
}
   8243e:	46bd      	mov	sp, r7
   82440:	f85d 7b04 	ldr.w	r7, [sp], #4
   82444:	4770      	bx	lr
   82446:	bf00      	nop
   82448:	400ac130 	.word	0x400ac130
   8244c:	20070754 	.word	0x20070754
   82450:	400ac1f0 	.word	0x400ac1f0

00082454 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   82454:	b480      	push	{r7}
   82456:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   82458:	4b05      	ldr	r3, [pc, #20]	; (82470 <udd_ctrl_stall_data+0x1c>)
   8245a:	2205      	movs	r2, #5
   8245c:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8245e:	4b05      	ldr	r3, [pc, #20]	; (82474 <udd_ctrl_stall_data+0x20>)
   82460:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82464:	601a      	str	r2, [r3, #0]
}
   82466:	46bd      	mov	sp, r7
   82468:	f85d 7b04 	ldr.w	r7, [sp], #4
   8246c:	4770      	bx	lr
   8246e:	bf00      	nop
   82470:	20070754 	.word	0x20070754
   82474:	400ac1f0 	.word	0x400ac1f0

00082478 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   82478:	b580      	push	{r7, lr}
   8247a:	b082      	sub	sp, #8
   8247c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8247e:	4b0c      	ldr	r3, [pc, #48]	; (824b0 <udd_ctrl_send_zlp_in+0x38>)
   82480:	2203      	movs	r2, #3
   82482:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   82484:	4b0b      	ldr	r3, [pc, #44]	; (824b4 <udd_ctrl_send_zlp_in+0x3c>)
   82486:	4798      	blx	r3
   82488:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   8248a:	4b0b      	ldr	r3, [pc, #44]	; (824b8 <udd_ctrl_send_zlp_in+0x40>)
   8248c:	2201      	movs	r2, #1
   8248e:	601a      	str	r2, [r3, #0]
	udd_enable_in_send_interrupt(0);
   82490:	4b0a      	ldr	r3, [pc, #40]	; (824bc <udd_ctrl_send_zlp_in+0x44>)
   82492:	2201      	movs	r2, #1
   82494:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   82496:	4b08      	ldr	r3, [pc, #32]	; (824b8 <udd_ctrl_send_zlp_in+0x40>)
   82498:	2208      	movs	r2, #8
   8249a:	601a      	str	r2, [r3, #0]
	udd_enable_nak_out_interrupt(0);
   8249c:	4b07      	ldr	r3, [pc, #28]	; (824bc <udd_ctrl_send_zlp_in+0x44>)
   8249e:	2208      	movs	r2, #8
   824a0:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
   824a2:	6878      	ldr	r0, [r7, #4]
   824a4:	4b06      	ldr	r3, [pc, #24]	; (824c0 <udd_ctrl_send_zlp_in+0x48>)
   824a6:	4798      	blx	r3
}
   824a8:	3708      	adds	r7, #8
   824aa:	46bd      	mov	sp, r7
   824ac:	bd80      	pop	{r7, pc}
   824ae:	bf00      	nop
   824b0:	20070754 	.word	0x20070754
   824b4:	00081119 	.word	0x00081119
   824b8:	400ac160 	.word	0x400ac160
   824bc:	400ac1f0 	.word	0x400ac1f0
   824c0:	00081171 	.word	0x00081171

000824c4 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   824c4:	b580      	push	{r7, lr}
   824c6:	b082      	sub	sp, #8
   824c8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   824ca:	4b09      	ldr	r3, [pc, #36]	; (824f0 <udd_ctrl_send_zlp_out+0x2c>)
   824cc:	2204      	movs	r2, #4
   824ce:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   824d0:	4b08      	ldr	r3, [pc, #32]	; (824f4 <udd_ctrl_send_zlp_out+0x30>)
   824d2:	4798      	blx	r3
   824d4:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   824d6:	4b08      	ldr	r3, [pc, #32]	; (824f8 <udd_ctrl_send_zlp_out+0x34>)
   824d8:	2210      	movs	r2, #16
   824da:	601a      	str	r2, [r3, #0]
	udd_enable_nak_in_interrupt(0);
   824dc:	4b07      	ldr	r3, [pc, #28]	; (824fc <udd_ctrl_send_zlp_out+0x38>)
   824de:	2210      	movs	r2, #16
   824e0:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
   824e2:	6878      	ldr	r0, [r7, #4]
   824e4:	4b06      	ldr	r3, [pc, #24]	; (82500 <udd_ctrl_send_zlp_out+0x3c>)
   824e6:	4798      	blx	r3
}
   824e8:	3708      	adds	r7, #8
   824ea:	46bd      	mov	sp, r7
   824ec:	bd80      	pop	{r7, pc}
   824ee:	bf00      	nop
   824f0:	20070754 	.word	0x20070754
   824f4:	00081119 	.word	0x00081119
   824f8:	400ac160 	.word	0x400ac160
   824fc:	400ac1f0 	.word	0x400ac1f0
   82500:	00081171 	.word	0x00081171

00082504 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   82504:	b580      	push	{r7, lr}
   82506:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   82508:	4b03      	ldr	r3, [pc, #12]	; (82518 <udd_ctrl_endofrequest+0x14>)
   8250a:	691b      	ldr	r3, [r3, #16]
   8250c:	2b00      	cmp	r3, #0
   8250e:	d002      	beq.n	82516 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   82510:	4b01      	ldr	r3, [pc, #4]	; (82518 <udd_ctrl_endofrequest+0x14>)
   82512:	691b      	ldr	r3, [r3, #16]
   82514:	4798      	blx	r3
	}
}
   82516:	bd80      	pop	{r7, pc}
   82518:	2007086c 	.word	0x2007086c

0008251c <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   8251c:	b580      	push	{r7, lr}
   8251e:	af00      	add	r7, sp, #0

	if (!Is_udd_endpoint_interrupt(0)) {
   82520:	4b27      	ldr	r3, [pc, #156]	; (825c0 <udd_ctrl_interrupt+0xa4>)
   82522:	685b      	ldr	r3, [r3, #4]
   82524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   82528:	2b00      	cmp	r3, #0
   8252a:	d101      	bne.n	82530 <udd_ctrl_interrupt+0x14>
		return false; // No interrupt events on control endpoint
   8252c:	2300      	movs	r3, #0
   8252e:	e044      	b.n	825ba <udd_ctrl_interrupt+0x9e>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   82530:	4b24      	ldr	r3, [pc, #144]	; (825c4 <udd_ctrl_interrupt+0xa8>)
   82532:	2210      	movs	r2, #16
   82534:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
   82536:	4b23      	ldr	r3, [pc, #140]	; (825c4 <udd_ctrl_interrupt+0xa8>)
   82538:	2208      	movs	r2, #8
   8253a:	601a      	str	r2, [r3, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   8253c:	4b22      	ldr	r3, [pc, #136]	; (825c8 <udd_ctrl_interrupt+0xac>)
   8253e:	681b      	ldr	r3, [r3, #0]
   82540:	f003 0304 	and.w	r3, r3, #4
   82544:	2b00      	cmp	r3, #0
   82546:	d003      	beq.n	82550 <udd_ctrl_interrupt+0x34>
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
   82548:	4b20      	ldr	r3, [pc, #128]	; (825cc <udd_ctrl_interrupt+0xb0>)
   8254a:	4798      	blx	r3
		return true;
   8254c:	2301      	movs	r3, #1
   8254e:	e034      	b.n	825ba <udd_ctrl_interrupt+0x9e>
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   82550:	4b1d      	ldr	r3, [pc, #116]	; (825c8 <udd_ctrl_interrupt+0xac>)
   82552:	681b      	ldr	r3, [r3, #0]
   82554:	f003 0301 	and.w	r3, r3, #1
   82558:	2b00      	cmp	r3, #0
   8255a:	d009      	beq.n	82570 <udd_ctrl_interrupt+0x54>
   8255c:	4b1c      	ldr	r3, [pc, #112]	; (825d0 <udd_ctrl_interrupt+0xb4>)
   8255e:	681b      	ldr	r3, [r3, #0]
   82560:	f003 0301 	and.w	r3, r3, #1
   82564:	2b00      	cmp	r3, #0
   82566:	d003      	beq.n	82570 <udd_ctrl_interrupt+0x54>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   82568:	4b1a      	ldr	r3, [pc, #104]	; (825d4 <udd_ctrl_interrupt+0xb8>)
   8256a:	4798      	blx	r3
		return true;
   8256c:	2301      	movs	r3, #1
   8256e:	e024      	b.n	825ba <udd_ctrl_interrupt+0x9e>
	}
	if (Is_udd_out_received(0)) {
   82570:	4b15      	ldr	r3, [pc, #84]	; (825c8 <udd_ctrl_interrupt+0xac>)
   82572:	681b      	ldr	r3, [r3, #0]
   82574:	f003 0302 	and.w	r3, r3, #2
   82578:	2b00      	cmp	r3, #0
   8257a:	d003      	beq.n	82584 <udd_ctrl_interrupt+0x68>
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
   8257c:	4b16      	ldr	r3, [pc, #88]	; (825d8 <udd_ctrl_interrupt+0xbc>)
   8257e:	4798      	blx	r3
		return true;
   82580:	2301      	movs	r3, #1
   82582:	e01a      	b.n	825ba <udd_ctrl_interrupt+0x9e>
	}
	if (Is_udd_nak_out(0)) {
   82584:	4b10      	ldr	r3, [pc, #64]	; (825c8 <udd_ctrl_interrupt+0xac>)
   82586:	681b      	ldr	r3, [r3, #0]
   82588:	f003 0308 	and.w	r3, r3, #8
   8258c:	2b00      	cmp	r3, #0
   8258e:	d006      	beq.n	8259e <udd_ctrl_interrupt+0x82>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   82590:	4b12      	ldr	r3, [pc, #72]	; (825dc <udd_ctrl_interrupt+0xc0>)
   82592:	2208      	movs	r2, #8
   82594:	601a      	str	r2, [r3, #0]
		udd_ctrl_overflow();
   82596:	4b12      	ldr	r3, [pc, #72]	; (825e0 <udd_ctrl_interrupt+0xc4>)
   82598:	4798      	blx	r3
		return true;
   8259a:	2301      	movs	r3, #1
   8259c:	e00d      	b.n	825ba <udd_ctrl_interrupt+0x9e>
	}
	if (Is_udd_nak_in(0)) {
   8259e:	4b0a      	ldr	r3, [pc, #40]	; (825c8 <udd_ctrl_interrupt+0xac>)
   825a0:	681b      	ldr	r3, [r3, #0]
   825a2:	f003 0310 	and.w	r3, r3, #16
   825a6:	2b00      	cmp	r3, #0
   825a8:	d006      	beq.n	825b8 <udd_ctrl_interrupt+0x9c>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   825aa:	4b0c      	ldr	r3, [pc, #48]	; (825dc <udd_ctrl_interrupt+0xc0>)
   825ac:	2210      	movs	r2, #16
   825ae:	601a      	str	r2, [r3, #0]
		udd_ctrl_underflow();
   825b0:	4b0c      	ldr	r3, [pc, #48]	; (825e4 <udd_ctrl_interrupt+0xc8>)
   825b2:	4798      	blx	r3
		return true;
   825b4:	2301      	movs	r3, #1
   825b6:	e000      	b.n	825ba <udd_ctrl_interrupt+0x9e>
	}
	dbg_print("n%x ", UOTGHS_ARRAY(UOTGHS_DEVEPTISR[0], 0));
	return false;
   825b8:	2300      	movs	r3, #0
}
   825ba:	4618      	mov	r0, r3
   825bc:	bd80      	pop	{r7, pc}
   825be:	bf00      	nop
   825c0:	400ac000 	.word	0x400ac000
   825c4:	400ac220 	.word	0x400ac220
   825c8:	400ac130 	.word	0x400ac130
   825cc:	00081f9d 	.word	0x00081f9d
   825d0:	400ac1c0 	.word	0x400ac1c0
   825d4:	000820d5 	.word	0x000820d5
   825d8:	00082231 	.word	0x00082231
   825dc:	400ac160 	.word	0x400ac160
   825e0:	0008241d 	.word	0x0008241d
   825e4:	000823d9 	.word	0x000823d9

000825e8 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0 != USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   825e8:	b480      	push	{r7}
   825ea:	b083      	sub	sp, #12
   825ec:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   825ee:	2300      	movs	r3, #0
   825f0:	71fb      	strb	r3, [r7, #7]
   825f2:	e01c      	b.n	8262e <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   825f4:	79fa      	ldrb	r2, [r7, #7]
   825f6:	4912      	ldr	r1, [pc, #72]	; (82640 <udd_ep_job_table_reset+0x58>)
   825f8:	4613      	mov	r3, r2
   825fa:	005b      	lsls	r3, r3, #1
   825fc:	4413      	add	r3, r2
   825fe:	00db      	lsls	r3, r3, #3
   82600:	440b      	add	r3, r1
   82602:	f103 0210 	add.w	r2, r3, #16
   82606:	7913      	ldrb	r3, [r2, #4]
   82608:	f36f 0300 	bfc	r3, #0, #1
   8260c:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   8260e:	79fa      	ldrb	r2, [r7, #7]
   82610:	490b      	ldr	r1, [pc, #44]	; (82640 <udd_ep_job_table_reset+0x58>)
   82612:	4613      	mov	r3, r2
   82614:	005b      	lsls	r3, r3, #1
   82616:	4413      	add	r3, r2
   82618:	00db      	lsls	r3, r3, #3
   8261a:	440b      	add	r3, r1
   8261c:	f103 0210 	add.w	r2, r3, #16
   82620:	7913      	ldrb	r3, [r2, #4]
   82622:	f36f 0382 	bfc	r3, #2, #1
   82626:	7113      	strb	r3, [r2, #4]
#if (0 != USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   82628:	79fb      	ldrb	r3, [r7, #7]
   8262a:	3301      	adds	r3, #1
   8262c:	71fb      	strb	r3, [r7, #7]
   8262e:	79fb      	ldrb	r3, [r7, #7]
   82630:	2b00      	cmp	r3, #0
   82632:	d0df      	beq.n	825f4 <udd_ep_job_table_reset+0xc>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].stall_requested = false;
	}
}
   82634:	370c      	adds	r7, #12
   82636:	46bd      	mov	sp, r7
   82638:	f85d 7b04 	ldr.w	r7, [sp], #4
   8263c:	4770      	bx	lr
   8263e:	bf00      	nop
   82640:	2007075c 	.word	0x2007075c

00082644 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   82644:	b580      	push	{r7, lr}
   82646:	b082      	sub	sp, #8
   82648:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8264a:	2300      	movs	r3, #0
   8264c:	71fb      	strb	r3, [r7, #7]
   8264e:	e011      	b.n	82674 <udd_ep_job_table_kill+0x30>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   82650:	79fa      	ldrb	r2, [r7, #7]
   82652:	4613      	mov	r3, r2
   82654:	005b      	lsls	r3, r3, #1
   82656:	4413      	add	r3, r2
   82658:	00db      	lsls	r3, r3, #3
   8265a:	4a09      	ldr	r2, [pc, #36]	; (82680 <udd_ep_job_table_kill+0x3c>)
   8265c:	441a      	add	r2, r3
   8265e:	79fb      	ldrb	r3, [r7, #7]
   82660:	3301      	adds	r3, #1
   82662:	b2db      	uxtb	r3, r3
   82664:	4610      	mov	r0, r2
   82666:	2101      	movs	r1, #1
   82668:	461a      	mov	r2, r3
   8266a:	4b06      	ldr	r3, [pc, #24]	; (82684 <udd_ep_job_table_kill+0x40>)
   8266c:	4798      	blx	r3
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8266e:	79fb      	ldrb	r3, [r7, #7]
   82670:	3301      	adds	r3, #1
   82672:	71fb      	strb	r3, [r7, #7]
   82674:	79fb      	ldrb	r3, [r7, #7]
   82676:	2b00      	cmp	r3, #0
   82678:	d0ea      	beq.n	82650 <udd_ep_job_table_kill+0xc>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
	}
}
   8267a:	3708      	adds	r7, #8
   8267c:	46bd      	mov	sp, r7
   8267e:	bd80      	pop	{r7, pc}
   82680:	2007075c 	.word	0x2007075c
   82684:	000826c5 	.word	0x000826c5

00082688 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   82688:	b580      	push	{r7, lr}
   8268a:	b082      	sub	sp, #8
   8268c:	af00      	add	r7, sp, #0
   8268e:	4603      	mov	r3, r0
   82690:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   82692:	79fb      	ldrb	r3, [r7, #7]
   82694:	f003 030f 	and.w	r3, r3, #15
   82698:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8269a:	79fb      	ldrb	r3, [r7, #7]
   8269c:	1e5a      	subs	r2, r3, #1
   8269e:	4613      	mov	r3, r2
   826a0:	005b      	lsls	r3, r3, #1
   826a2:	4413      	add	r3, r2
   826a4:	00db      	lsls	r3, r3, #3
   826a6:	4a05      	ldr	r2, [pc, #20]	; (826bc <udd_ep_abort_job+0x34>)
   826a8:	441a      	add	r2, r3
   826aa:	79fb      	ldrb	r3, [r7, #7]
   826ac:	4610      	mov	r0, r2
   826ae:	2101      	movs	r1, #1
   826b0:	461a      	mov	r2, r3
   826b2:	4b03      	ldr	r3, [pc, #12]	; (826c0 <udd_ep_abort_job+0x38>)
   826b4:	4798      	blx	r3
}
   826b6:	3708      	adds	r7, #8
   826b8:	46bd      	mov	sp, r7
   826ba:	bd80      	pop	{r7, pc}
   826bc:	2007075c 	.word	0x2007075c
   826c0:	000826c5 	.word	0x000826c5

000826c4 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   826c4:	b580      	push	{r7, lr}
   826c6:	b082      	sub	sp, #8
   826c8:	af00      	add	r7, sp, #0
   826ca:	6078      	str	r0, [r7, #4]
   826cc:	460b      	mov	r3, r1
   826ce:	70fb      	strb	r3, [r7, #3]
   826d0:	4613      	mov	r3, r2
   826d2:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   826d4:	687b      	ldr	r3, [r7, #4]
   826d6:	7d1b      	ldrb	r3, [r3, #20]
   826d8:	f003 0301 	and.w	r3, r3, #1
   826dc:	b2db      	uxtb	r3, r3
   826de:	2b00      	cmp	r3, #0
   826e0:	d100      	bne.n	826e4 <udd_ep_finish_job+0x20>
		return; // No on-going job
   826e2:	e01d      	b.n	82720 <udd_ep_finish_job+0x5c>
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   826e4:	687a      	ldr	r2, [r7, #4]
   826e6:	7d13      	ldrb	r3, [r2, #20]
   826e8:	f36f 0300 	bfc	r3, #0, #1
   826ec:	7513      	strb	r3, [r2, #20]
	if (NULL == ptr_job->call_trans) {
   826ee:	687b      	ldr	r3, [r7, #4]
   826f0:	681b      	ldr	r3, [r3, #0]
   826f2:	2b00      	cmp	r3, #0
   826f4:	d100      	bne.n	826f8 <udd_ep_finish_job+0x34>
		return; // No callback linked to job
   826f6:	e013      	b.n	82720 <udd_ep_finish_job+0x5c>
	}
	if (Is_udd_endpoint_in(ep_num)) {
   826f8:	78bb      	ldrb	r3, [r7, #2]
   826fa:	009a      	lsls	r2, r3, #2
   826fc:	4b0a      	ldr	r3, [pc, #40]	; (82728 <udd_ep_finish_job+0x64>)
   826fe:	4413      	add	r3, r2
   82700:	681b      	ldr	r3, [r3, #0]
   82702:	f403 7380 	and.w	r3, r3, #256	; 0x100
   82706:	2b00      	cmp	r3, #0
   82708:	d003      	beq.n	82712 <udd_ep_finish_job+0x4e>
		ep_num |= USB_EP_DIR_IN;
   8270a:	78bb      	ldrb	r3, [r7, #2]
   8270c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   82710:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82712:	687b      	ldr	r3, [r7, #4]
   82714:	681b      	ldr	r3, [r3, #0]
   82716:	78f8      	ldrb	r0, [r7, #3]
   82718:	687a      	ldr	r2, [r7, #4]
   8271a:	6891      	ldr	r1, [r2, #8]
   8271c:	78ba      	ldrb	r2, [r7, #2]
   8271e:	4798      	blx	r3
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   82720:	3708      	adds	r7, #8
   82722:	46bd      	mov	sp, r7
   82724:	bd80      	pop	{r7, pc}
   82726:	bf00      	nop
   82728:	400ac100 	.word	0x400ac100

0008272c <udd_ep_trans_done>:

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   8272c:	b580      	push	{r7, lr}
   8272e:	b086      	sub	sp, #24
   82730:	af00      	add	r7, sp, #0
   82732:	4603      	mov	r3, r0
   82734:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   82736:	2300      	movs	r3, #0
   82738:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8273a:	79fb      	ldrb	r3, [r7, #7]
   8273c:	1e5a      	subs	r2, r3, #1
   8273e:	4613      	mov	r3, r2
   82740:	005b      	lsls	r3, r3, #1
   82742:	4413      	add	r3, r2
   82744:	00db      	lsls	r3, r3, #3
   82746:	4a6f      	ldr	r2, [pc, #444]	; (82904 <udd_ep_trans_done+0x1d8>)
   82748:	4413      	add	r3, r2
   8274a:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   8274c:	68fb      	ldr	r3, [r7, #12]
   8274e:	7d1b      	ldrb	r3, [r3, #20]
   82750:	f003 0301 	and.w	r3, r3, #1
   82754:	b2db      	uxtb	r3, r3
   82756:	2b00      	cmp	r3, #0
   82758:	d100      	bne.n	8275c <udd_ep_trans_done+0x30>
		return; // No job is running, then ignore it (system error)
   8275a:	e0cf      	b.n	828fc <udd_ep_trans_done+0x1d0>
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   8275c:	68fb      	ldr	r3, [r7, #12]
   8275e:	68da      	ldr	r2, [r3, #12]
   82760:	68fb      	ldr	r3, [r7, #12]
   82762:	689b      	ldr	r3, [r3, #8]
   82764:	429a      	cmp	r2, r3
   82766:	f000 8090 	beq.w	8288a <udd_ep_trans_done+0x15e>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8276a:	68fb      	ldr	r3, [r7, #12]
   8276c:	689a      	ldr	r2, [r3, #8]
   8276e:	68fb      	ldr	r3, [r7, #12]
   82770:	68db      	ldr	r3, [r3, #12]
   82772:	1ad3      	subs	r3, r2, r3
   82774:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   82776:	693b      	ldr	r3, [r7, #16]
   82778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8277c:	d905      	bls.n	8278a <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   8277e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   82782:	613b      	str	r3, [r7, #16]

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   82784:	2300      	movs	r3, #0
   82786:	617b      	str	r3, [r7, #20]
   82788:	e002      	b.n	82790 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   8278a:	693b      	ldr	r3, [r7, #16]
   8278c:	041b      	lsls	r3, r3, #16
   8278e:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   82790:	79fb      	ldrb	r3, [r7, #7]
   82792:	009a      	lsls	r2, r3, #2
   82794:	4b5c      	ldr	r3, [pc, #368]	; (82908 <udd_ep_trans_done+0x1dc>)
   82796:	4413      	add	r3, r2
   82798:	681b      	ldr	r3, [r3, #0]
   8279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
   8279e:	2b00      	cmp	r3, #0
   827a0:	d01a      	beq.n	827d8 <udd_ep_trans_done+0xac>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   827a2:	79fb      	ldrb	r3, [r7, #7]
   827a4:	009a      	lsls	r2, r3, #2
   827a6:	4b58      	ldr	r3, [pc, #352]	; (82908 <udd_ep_trans_done+0x1dc>)
   827a8:	4413      	add	r3, r2
   827aa:	681b      	ldr	r3, [r3, #0]
   827ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
   827b0:	091b      	lsrs	r3, r3, #4
   827b2:	461a      	mov	r2, r3
   827b4:	2308      	movs	r3, #8
   827b6:	4093      	lsls	r3, r2
   827b8:	3b01      	subs	r3, #1
   827ba:	461a      	mov	r2, r3
   827bc:	693b      	ldr	r3, [r7, #16]
   827be:	4013      	ands	r3, r2
   827c0:	2b00      	cmp	r3, #0
   827c2:	d026      	beq.n	82812 <udd_ep_trans_done+0xe6>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   827c4:	697b      	ldr	r3, [r7, #20]
   827c6:	f043 0308 	orr.w	r3, r3, #8
   827ca:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   827cc:	68fa      	ldr	r2, [r7, #12]
   827ce:	7d13      	ldrb	r3, [r2, #20]
   827d0:	f36f 0341 	bfc	r3, #1, #1
   827d4:	7513      	strb	r3, [r2, #20]
   827d6:	e01c      	b.n	82812 <udd_ep_trans_done+0xe6>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   827d8:	79fb      	ldrb	r3, [r7, #7]
   827da:	009a      	lsls	r2, r3, #2
   827dc:	4b4a      	ldr	r3, [pc, #296]	; (82908 <udd_ep_trans_done+0x1dc>)
   827de:	4413      	add	r3, r2
   827e0:	681b      	ldr	r3, [r3, #0]
   827e2:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   827e6:	0adb      	lsrs	r3, r3, #11
   827e8:	2b01      	cmp	r3, #1
   827ea:	d10e      	bne.n	8280a <udd_ep_trans_done+0xde>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   827ec:	79fb      	ldrb	r3, [r7, #7]
   827ee:	009a      	lsls	r2, r3, #2
   827f0:	4b45      	ldr	r3, [pc, #276]	; (82908 <udd_ep_trans_done+0x1dc>)
   827f2:	4413      	add	r3, r2
   827f4:	681b      	ldr	r3, [r3, #0]
   827f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   827fa:	091b      	lsrs	r3, r3, #4
   827fc:	461a      	mov	r2, r3
   827fe:	2308      	movs	r3, #8
   82800:	4093      	lsls	r3, r2
   82802:	461a      	mov	r2, r3
   82804:	693b      	ldr	r3, [r7, #16]
   82806:	429a      	cmp	r2, r3
   82808:	d303      	bcc.n	82812 <udd_ep_trans_done+0xe6>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   8280a:	697b      	ldr	r3, [r7, #20]
   8280c:	f043 0314 	orr.w	r3, r3, #20
   82810:	617b      	str	r3, [r7, #20]
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   82812:	79fb      	ldrb	r3, [r7, #7]
   82814:	011a      	lsls	r2, r3, #4
   82816:	4b3d      	ldr	r3, [pc, #244]	; (8290c <udd_ep_trans_done+0x1e0>)
   82818:	4413      	add	r3, r2
   8281a:	68fa      	ldr	r2, [r7, #12]
   8281c:	6851      	ldr	r1, [r2, #4]
   8281e:	68fa      	ldr	r2, [r7, #12]
   82820:	68d2      	ldr	r2, [r2, #12]
   82822:	440a      	add	r2, r1
   82824:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   82826:	697b      	ldr	r3, [r7, #20]
   82828:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   8282c:	617b      	str	r3, [r7, #20]
				UOTGHS_DEVDMACONTROL_CHANN_ENB;


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   8282e:	4b38      	ldr	r3, [pc, #224]	; (82910 <udd_ep_trans_done+0x1e4>)
   82830:	4798      	blx	r3
   82832:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   82834:	79fb      	ldrb	r3, [r7, #7]
   82836:	011a      	lsls	r2, r3, #4
   82838:	4b34      	ldr	r3, [pc, #208]	; (8290c <udd_ep_trans_done+0x1e0>)
   8283a:	4413      	add	r3, r2
   8283c:	68db      	ldr	r3, [r3, #12]
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
   8283e:	f003 0310 	and.w	r3, r3, #16


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   82842:	2b00      	cmp	r3, #0
   82844:	d11a      	bne.n	8287c <udd_ep_trans_done+0x150>
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   82846:	79fb      	ldrb	r3, [r7, #7]
   82848:	011a      	lsls	r2, r3, #4
   8284a:	4b30      	ldr	r3, [pc, #192]	; (8290c <udd_ep_trans_done+0x1e0>)
   8284c:	4413      	add	r3, r2
   8284e:	697a      	ldr	r2, [r7, #20]
   82850:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   82852:	68fb      	ldr	r3, [r7, #12]
   82854:	68da      	ldr	r2, [r3, #12]
   82856:	693b      	ldr	r3, [r7, #16]
   82858:	441a      	add	r2, r3
   8285a:	68fb      	ldr	r3, [r7, #12]
   8285c:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   8285e:	68fb      	ldr	r3, [r7, #12]
   82860:	693a      	ldr	r2, [r7, #16]
   82862:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   82864:	4a2b      	ldr	r2, [pc, #172]	; (82914 <udd_ep_trans_done+0x1e8>)
   82866:	79fb      	ldrb	r3, [r7, #7]
   82868:	3b01      	subs	r3, #1
   8286a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8286e:	fa01 f303 	lsl.w	r3, r1, r3
   82872:	6193      	str	r3, [r2, #24]
			cpu_irq_restore(flags);
   82874:	68b8      	ldr	r0, [r7, #8]
   82876:	4b28      	ldr	r3, [pc, #160]	; (82918 <udd_ep_trans_done+0x1ec>)
   82878:	4798      	blx	r3
			return;
   8287a:	e03f      	b.n	828fc <udd_ep_trans_done+0x1d0>
		}
		cpu_irq_restore(flags);
   8287c:	68b8      	ldr	r0, [r7, #8]
   8287e:	4b26      	ldr	r3, [pc, #152]	; (82918 <udd_ep_trans_done+0x1ec>)
   82880:	4798      	blx	r3

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   82882:	68fb      	ldr	r3, [r7, #12]
   82884:	68da      	ldr	r2, [r3, #12]
   82886:	68fb      	ldr	r3, [r7, #12]
   82888:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   8288a:	79fb      	ldrb	r3, [r7, #7]
   8288c:	009a      	lsls	r2, r3, #2
   8288e:	4b1e      	ldr	r3, [pc, #120]	; (82908 <udd_ep_trans_done+0x1dc>)
   82890:	4413      	add	r3, r2
   82892:	681b      	ldr	r3, [r3, #0]
   82894:	f403 7380 	and.w	r3, r3, #256	; 0x100
   82898:	2b00      	cmp	r3, #0
   8289a:	d029      	beq.n	828f0 <udd_ep_trans_done+0x1c4>
		if (ptr_job->b_shortpacket) {
   8289c:	68fb      	ldr	r3, [r7, #12]
   8289e:	7d1b      	ldrb	r3, [r3, #20]
   828a0:	f003 0302 	and.w	r3, r3, #2
   828a4:	b2db      	uxtb	r3, r3
   828a6:	2b00      	cmp	r3, #0
   828a8:	d022      	beq.n	828f0 <udd_ep_trans_done+0x1c4>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   828aa:	79fb      	ldrb	r3, [r7, #7]
   828ac:	009a      	lsls	r2, r3, #2
   828ae:	4b1b      	ldr	r3, [pc, #108]	; (8291c <udd_ep_trans_done+0x1f0>)
   828b0:	4413      	add	r3, r2
   828b2:	2201      	movs	r2, #1
   828b4:	601a      	str	r2, [r3, #0]
			if (Is_udd_write_enabled(ep)) {
   828b6:	79fb      	ldrb	r3, [r7, #7]
   828b8:	009a      	lsls	r2, r3, #2
   828ba:	4b19      	ldr	r3, [pc, #100]	; (82920 <udd_ep_trans_done+0x1f4>)
   828bc:	4413      	add	r3, r2
   828be:	681b      	ldr	r3, [r3, #0]
   828c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   828c4:	2b00      	cmp	r3, #0
   828c6:	d005      	beq.n	828d4 <udd_ep_trans_done+0x1a8>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   828c8:	79fb      	ldrb	r3, [r7, #7]
   828ca:	009a      	lsls	r2, r3, #2
   828cc:	4b15      	ldr	r3, [pc, #84]	; (82924 <udd_ep_trans_done+0x1f8>)
   828ce:	4413      	add	r3, r2
   828d0:	2201      	movs	r2, #1
   828d2:	601a      	str	r2, [r3, #0]
			}
			udd_enable_in_send_interrupt(ep);
   828d4:	79fb      	ldrb	r3, [r7, #7]
   828d6:	009a      	lsls	r2, r3, #2
   828d8:	4b13      	ldr	r3, [pc, #76]	; (82928 <udd_ep_trans_done+0x1fc>)
   828da:	4413      	add	r3, r2
   828dc:	2201      	movs	r2, #1
   828de:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   828e0:	4a0c      	ldr	r2, [pc, #48]	; (82914 <udd_ep_trans_done+0x1e8>)
   828e2:	79fb      	ldrb	r3, [r7, #7]
   828e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   828e8:	fa01 f303 	lsl.w	r3, r1, r3
   828ec:	6193      	str	r3, [r2, #24]
			return;
   828ee:	e005      	b.n	828fc <udd_ep_trans_done+0x1d0>
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   828f0:	79fb      	ldrb	r3, [r7, #7]
   828f2:	68f8      	ldr	r0, [r7, #12]
   828f4:	2100      	movs	r1, #0
   828f6:	461a      	mov	r2, r3
   828f8:	4b0c      	ldr	r3, [pc, #48]	; (8292c <udd_ep_trans_done+0x200>)
   828fa:	4798      	blx	r3
}
   828fc:	3718      	adds	r7, #24
   828fe:	46bd      	mov	sp, r7
   82900:	bd80      	pop	{r7, pc}
   82902:	bf00      	nop
   82904:	2007075c 	.word	0x2007075c
   82908:	400ac100 	.word	0x400ac100
   8290c:	400ac300 	.word	0x400ac300
   82910:	00081119 	.word	0x00081119
   82914:	400ac000 	.word	0x400ac000
   82918:	00081171 	.word	0x00081171
   8291c:	400ac160 	.word	0x400ac160
   82920:	400ac130 	.word	0x400ac130
   82924:	400ac190 	.word	0x400ac190
   82928:	400ac1f0 	.word	0x400ac1f0
   8292c:	000826c5 	.word	0x000826c5

00082930 <udd_ep_interrupt>:
	}
}
#endif // #ifdef UDD_EP_FIFO_SUPPORTED

static bool udd_ep_interrupt(void)
{
   82930:	b580      	push	{r7, lr}
   82932:	b084      	sub	sp, #16
   82934:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   82936:	2301      	movs	r3, #1
   82938:	73fb      	strb	r3, [r7, #15]
   8293a:	e0c7      	b.n	82acc <udd_ep_interrupt+0x19c>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8293c:	7bfb      	ldrb	r3, [r7, #15]
   8293e:	1e5a      	subs	r2, r3, #1
   82940:	4613      	mov	r3, r2
   82942:	005b      	lsls	r3, r3, #1
   82944:	4413      	add	r3, r2
   82946:	00db      	lsls	r3, r3, #3
   82948:	4a65      	ldr	r2, [pc, #404]	; (82ae0 <udd_ep_interrupt+0x1b0>)
   8294a:	4413      	add	r3, r2
   8294c:	60bb      	str	r3, [r7, #8]

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8294e:	4b65      	ldr	r3, [pc, #404]	; (82ae4 <udd_ep_interrupt+0x1b4>)
   82950:	691a      	ldr	r2, [r3, #16]
   82952:	7bfb      	ldrb	r3, [r7, #15]
   82954:	3b01      	subs	r3, #1
   82956:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8295a:	fa01 f303 	lsl.w	r3, r1, r3
   8295e:	4013      	ands	r3, r2
   82960:	2b00      	cmp	r3, #0
   82962:	d037      	beq.n	829d4 <udd_ep_interrupt+0xa4>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   82964:	4b5f      	ldr	r3, [pc, #380]	; (82ae4 <udd_ep_interrupt+0x1b4>)
   82966:	685a      	ldr	r2, [r3, #4]
   82968:	7bfb      	ldrb	r3, [r7, #15]
   8296a:	3b01      	subs	r3, #1
   8296c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   82970:	fa01 f303 	lsl.w	r3, r1, r3
   82974:	4013      	ands	r3, r2
   82976:	2b00      	cmp	r3, #0
   82978:	d02c      	beq.n	829d4 <udd_ep_interrupt+0xa4>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   8297a:	7bfb      	ldrb	r3, [r7, #15]
   8297c:	011a      	lsls	r2, r3, #4
   8297e:	4b5a      	ldr	r3, [pc, #360]	; (82ae8 <udd_ep_interrupt+0x1b8>)
   82980:	4413      	add	r3, r2
   82982:	68db      	ldr	r3, [r3, #12]
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
   82984:	f003 0301 	and.w	r3, r3, #1
#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   82988:	2b00      	cmp	r3, #0
   8298a:	d001      	beq.n	82990 <udd_ep_interrupt+0x60>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
   8298c:	2301      	movs	r3, #1
   8298e:	e0a2      	b.n	82ad6 <udd_ep_interrupt+0x1a6>
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   82990:	4a54      	ldr	r2, [pc, #336]	; (82ae4 <udd_ep_interrupt+0x1b4>)
   82992:	7bfb      	ldrb	r3, [r7, #15]
   82994:	3b01      	subs	r3, #1
   82996:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8299a:	fa01 f303 	lsl.w	r3, r1, r3
   8299e:	6153      	str	r3, [r2, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   829a0:	7bfb      	ldrb	r3, [r7, #15]
   829a2:	011a      	lsls	r2, r3, #4
   829a4:	4b50      	ldr	r3, [pc, #320]	; (82ae8 <udd_ep_interrupt+0x1b8>)
   829a6:	4413      	add	r3, r2
   829a8:	68db      	ldr	r3, [r3, #12]
   829aa:	0c1b      	lsrs	r3, r3, #16
   829ac:	607b      	str	r3, [r7, #4]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   829ae:	687b      	ldr	r3, [r7, #4]
   829b0:	2b00      	cmp	r3, #0
   829b2:	d009      	beq.n	829c8 <udd_ep_interrupt+0x98>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   829b4:	68bb      	ldr	r3, [r7, #8]
   829b6:	68da      	ldr	r2, [r3, #12]
   829b8:	687b      	ldr	r3, [r7, #4]
   829ba:	1ad2      	subs	r2, r2, r3
   829bc:	68bb      	ldr	r3, [r7, #8]
   829be:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   829c0:	68bb      	ldr	r3, [r7, #8]
   829c2:	68da      	ldr	r2, [r3, #12]
   829c4:	68bb      	ldr	r3, [r7, #8]
   829c6:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   829c8:	7bfb      	ldrb	r3, [r7, #15]
   829ca:	4618      	mov	r0, r3
   829cc:	4b47      	ldr	r3, [pc, #284]	; (82aec <udd_ep_interrupt+0x1bc>)
   829ce:	4798      	blx	r3
			return true;
   829d0:	2301      	movs	r3, #1
   829d2:	e080      	b.n	82ad6 <udd_ep_interrupt+0x1a6>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   829d4:	4b43      	ldr	r3, [pc, #268]	; (82ae4 <udd_ep_interrupt+0x1b4>)
   829d6:	691a      	ldr	r2, [r3, #16]
   829d8:	7bfb      	ldrb	r3, [r7, #15]
   829da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   829de:	fa01 f303 	lsl.w	r3, r1, r3
   829e2:	4013      	ands	r3, r2
   829e4:	2b00      	cmp	r3, #0
   829e6:	d06e      	beq.n	82ac6 <udd_ep_interrupt+0x196>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   829e8:	7bfb      	ldrb	r3, [r7, #15]
   829ea:	009a      	lsls	r2, r3, #2
   829ec:	4b40      	ldr	r3, [pc, #256]	; (82af0 <udd_ep_interrupt+0x1c0>)
   829ee:	4413      	add	r3, r2
   829f0:	681b      	ldr	r3, [r3, #0]
   829f2:	f003 0301 	and.w	r3, r3, #1
   829f6:	2b00      	cmp	r3, #0
   829f8:	d023      	beq.n	82a42 <udd_ep_interrupt+0x112>
					&& Is_udd_in_send(ep)) {
   829fa:	7bfb      	ldrb	r3, [r7, #15]
   829fc:	009a      	lsls	r2, r3, #2
   829fe:	4b3d      	ldr	r3, [pc, #244]	; (82af4 <udd_ep_interrupt+0x1c4>)
   82a00:	4413      	add	r3, r2
   82a02:	681b      	ldr	r3, [r3, #0]
   82a04:	f003 0301 	and.w	r3, r3, #1
   82a08:	2b00      	cmp	r3, #0
   82a0a:	d01a      	beq.n	82a42 <udd_ep_interrupt+0x112>
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   82a0c:	7bfb      	ldrb	r3, [r7, #15]
   82a0e:	009a      	lsls	r2, r3, #2
   82a10:	4b39      	ldr	r3, [pc, #228]	; (82af8 <udd_ep_interrupt+0x1c8>)
   82a12:	4413      	add	r3, r2
   82a14:	2201      	movs	r2, #1
   82a16:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   82a18:	7bfb      	ldrb	r3, [r7, #15]
   82a1a:	009a      	lsls	r2, r3, #2
   82a1c:	4b37      	ldr	r3, [pc, #220]	; (82afc <udd_ep_interrupt+0x1cc>)
   82a1e:	4413      	add	r3, r2
   82a20:	2201      	movs	r2, #1
   82a22:	601a      	str	r2, [r3, #0]
				udd_ack_fifocon(ep);
   82a24:	7bfb      	ldrb	r3, [r7, #15]
   82a26:	009a      	lsls	r2, r3, #2
   82a28:	4b33      	ldr	r3, [pc, #204]	; (82af8 <udd_ep_interrupt+0x1c8>)
   82a2a:	4413      	add	r3, r2
   82a2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82a30:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   82a32:	7bfb      	ldrb	r3, [r7, #15]
   82a34:	68b8      	ldr	r0, [r7, #8]
   82a36:	2100      	movs	r1, #0
   82a38:	461a      	mov	r2, r3
   82a3a:	4b31      	ldr	r3, [pc, #196]	; (82b00 <udd_ep_interrupt+0x1d0>)
   82a3c:	4798      	blx	r3
				return true;
   82a3e:	2301      	movs	r3, #1
   82a40:	e049      	b.n	82ad6 <udd_ep_interrupt+0x1a6>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   82a42:	7bfb      	ldrb	r3, [r7, #15]
   82a44:	009a      	lsls	r2, r3, #2
   82a46:	4b2a      	ldr	r3, [pc, #168]	; (82af0 <udd_ep_interrupt+0x1c0>)
   82a48:	4413      	add	r3, r2
   82a4a:	681b      	ldr	r3, [r3, #0]
   82a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   82a50:	2b00      	cmp	r3, #0
   82a52:	d038      	beq.n	82ac6 <udd_ep_interrupt+0x196>
					&& (0 == udd_nb_busy_bank(ep))) {
   82a54:	7bfb      	ldrb	r3, [r7, #15]
   82a56:	009a      	lsls	r2, r3, #2
   82a58:	4b26      	ldr	r3, [pc, #152]	; (82af4 <udd_ep_interrupt+0x1c4>)
   82a5a:	4413      	add	r3, r2
   82a5c:	681b      	ldr	r3, [r3, #0]
   82a5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   82a62:	0b1b      	lsrs	r3, r3, #12
   82a64:	2b00      	cmp	r3, #0
   82a66:	d12e      	bne.n	82ac6 <udd_ep_interrupt+0x196>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   82a68:	7bfb      	ldrb	r3, [r7, #15]
   82a6a:	009a      	lsls	r2, r3, #2
   82a6c:	4b22      	ldr	r3, [pc, #136]	; (82af8 <udd_ep_interrupt+0x1c8>)
   82a6e:	4413      	add	r3, r2
   82a70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82a74:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   82a76:	4a1b      	ldr	r2, [pc, #108]	; (82ae4 <udd_ep_interrupt+0x1b4>)
   82a78:	7bfb      	ldrb	r3, [r7, #15]
   82a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82a7e:	fa01 f303 	lsl.w	r3, r1, r3
   82a82:	6153      	str	r3, [r2, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   82a84:	68ba      	ldr	r2, [r7, #8]
   82a86:	7d13      	ldrb	r3, [r2, #20]
   82a88:	f36f 0382 	bfc	r3, #2, #1
   82a8c:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   82a8e:	7bfb      	ldrb	r3, [r7, #15]
   82a90:	009a      	lsls	r2, r3, #2
   82a92:	4b1c      	ldr	r3, [pc, #112]	; (82b04 <udd_ep_interrupt+0x1d4>)
   82a94:	4413      	add	r3, r2
   82a96:	7bfa      	ldrb	r2, [r7, #15]
   82a98:	0091      	lsls	r1, r2, #2
   82a9a:	4a1a      	ldr	r2, [pc, #104]	; (82b04 <udd_ep_interrupt+0x1d4>)
   82a9c:	440a      	add	r2, r1
   82a9e:	6812      	ldr	r2, [r2, #0]
   82aa0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   82aa4:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   82aa6:	7bfb      	ldrb	r3, [r7, #15]
   82aa8:	009a      	lsls	r2, r3, #2
   82aaa:	4b17      	ldr	r3, [pc, #92]	; (82b08 <udd_ep_interrupt+0x1d8>)
   82aac:	4413      	add	r3, r2
   82aae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82ab2:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   82ab4:	7bfb      	ldrb	r3, [r7, #15]
   82ab6:	009a      	lsls	r2, r3, #2
   82ab8:	4b13      	ldr	r3, [pc, #76]	; (82b08 <udd_ep_interrupt+0x1d8>)
   82aba:	4413      	add	r3, r2
   82abc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   82ac0:	601a      	str	r2, [r3, #0]
				return true;
   82ac2:	2301      	movs	r3, #1
   82ac4:	e007      	b.n	82ad6 <udd_ep_interrupt+0x1a6>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   82ac6:	7bfb      	ldrb	r3, [r7, #15]
   82ac8:	3301      	adds	r3, #1
   82aca:	73fb      	strb	r3, [r7, #15]
   82acc:	7bfb      	ldrb	r3, [r7, #15]
   82ace:	2b01      	cmp	r3, #1
   82ad0:	f67f af34 	bls.w	8293c <udd_ep_interrupt+0xc>
				udd_reset_data_toggle(ep);
				return true;
			}
		}
	}
	return false;
   82ad4:	2300      	movs	r3, #0
}
   82ad6:	4618      	mov	r0, r3
   82ad8:	3710      	adds	r7, #16
   82ada:	46bd      	mov	sp, r7
   82adc:	bd80      	pop	{r7, pc}
   82ade:	bf00      	nop
   82ae0:	2007075c 	.word	0x2007075c
   82ae4:	400ac000 	.word	0x400ac000
   82ae8:	400ac300 	.word	0x400ac300
   82aec:	0008272d 	.word	0x0008272d
   82af0:	400ac1c0 	.word	0x400ac1c0
   82af4:	400ac130 	.word	0x400ac130
   82af8:	400ac220 	.word	0x400ac220
   82afc:	400ac160 	.word	0x400ac160
   82b00:	000826c5 	.word	0x000826c5
   82b04:	400ac100 	.word	0x400ac100
   82b08:	400ac1f0 	.word	0x400ac1f0

00082b0c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
   82b0c:	b580      	push	{r7, lr}
   82b0e:	b084      	sub	sp, #16
   82b10:	af00      	add	r7, sp, #0
   82b12:	60f8      	str	r0, [r7, #12]
   82b14:	60b9      	str	r1, [r7, #8]
   82b16:	607a      	str	r2, [r7, #4]
   82b18:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
   82b1a:	4b35      	ldr	r3, [pc, #212]	; (82bf0 <udi_hid_setup+0xe4>)
   82b1c:	781b      	ldrb	r3, [r3, #0]
   82b1e:	b2db      	uxtb	r3, r3
   82b20:	b25b      	sxtb	r3, r3
   82b22:	2b00      	cmp	r3, #0
   82b24:	da30      	bge.n	82b88 <udi_hid_setup+0x7c>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   82b26:	4b32      	ldr	r3, [pc, #200]	; (82bf0 <udi_hid_setup+0xe4>)
   82b28:	781b      	ldrb	r3, [r3, #0]
   82b2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
   82b2e:	2b00      	cmp	r3, #0
   82b30:	d108      	bne.n	82b44 <udi_hid_setup+0x38>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   82b32:	4b2f      	ldr	r3, [pc, #188]	; (82bf0 <udi_hid_setup+0xe4>)
   82b34:	785b      	ldrb	r3, [r3, #1]
   82b36:	2b06      	cmp	r3, #6
   82b38:	d104      	bne.n	82b44 <udi_hid_setup+0x38>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
   82b3a:	6878      	ldr	r0, [r7, #4]
   82b3c:	4b2d      	ldr	r3, [pc, #180]	; (82bf4 <udi_hid_setup+0xe8>)
   82b3e:	4798      	blx	r3
   82b40:	4603      	mov	r3, r0
   82b42:	e050      	b.n	82be6 <udi_hid_setup+0xda>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   82b44:	4b2a      	ldr	r3, [pc, #168]	; (82bf0 <udi_hid_setup+0xe4>)
   82b46:	781b      	ldrb	r3, [r3, #0]
   82b48:	f003 0360 	and.w	r3, r3, #96	; 0x60
   82b4c:	2b20      	cmp	r3, #32
   82b4e:	d11b      	bne.n	82b88 <udi_hid_setup+0x7c>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   82b50:	4b27      	ldr	r3, [pc, #156]	; (82bf0 <udi_hid_setup+0xe4>)
   82b52:	785b      	ldrb	r3, [r3, #1]
   82b54:	2b02      	cmp	r3, #2
   82b56:	d007      	beq.n	82b68 <udi_hid_setup+0x5c>
   82b58:	2b03      	cmp	r3, #3
   82b5a:	d00d      	beq.n	82b78 <udi_hid_setup+0x6c>
   82b5c:	2b01      	cmp	r3, #1
   82b5e:	d113      	bne.n	82b88 <udi_hid_setup+0x7c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
   82b60:	683b      	ldr	r3, [r7, #0]
   82b62:	4798      	blx	r3
   82b64:	4603      	mov	r3, r0
   82b66:	e03e      	b.n	82be6 <udi_hid_setup+0xda>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
   82b68:	4a21      	ldr	r2, [pc, #132]	; (82bf0 <udi_hid_setup+0xe4>)
   82b6a:	68fb      	ldr	r3, [r7, #12]
   82b6c:	6093      	str	r3, [r2, #8]
				udd_g_ctrlreq.payload_size = 1;
   82b6e:	4b20      	ldr	r3, [pc, #128]	; (82bf0 <udi_hid_setup+0xe4>)
   82b70:	2201      	movs	r2, #1
   82b72:	819a      	strh	r2, [r3, #12]
				return true;
   82b74:	2301      	movs	r3, #1
   82b76:	e036      	b.n	82be6 <udi_hid_setup+0xda>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
   82b78:	4a1d      	ldr	r2, [pc, #116]	; (82bf0 <udi_hid_setup+0xe4>)
   82b7a:	68bb      	ldr	r3, [r7, #8]
   82b7c:	6093      	str	r3, [r2, #8]
				udd_g_ctrlreq.payload_size = 1;
   82b7e:	4b1c      	ldr	r3, [pc, #112]	; (82bf0 <udi_hid_setup+0xe4>)
   82b80:	2201      	movs	r2, #1
   82b82:	819a      	strh	r2, [r3, #12]
				return true;
   82b84:	2301      	movs	r3, #1
   82b86:	e02e      	b.n	82be6 <udi_hid_setup+0xda>
			}
		}
	}
	if (Udd_setup_is_out()) {
   82b88:	4b19      	ldr	r3, [pc, #100]	; (82bf0 <udi_hid_setup+0xe4>)
   82b8a:	781b      	ldrb	r3, [r3, #0]
   82b8c:	b2db      	uxtb	r3, r3
   82b8e:	b25b      	sxtb	r3, r3
   82b90:	2b00      	cmp	r3, #0
   82b92:	db27      	blt.n	82be4 <udi_hid_setup+0xd8>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   82b94:	4b16      	ldr	r3, [pc, #88]	; (82bf0 <udi_hid_setup+0xe4>)
   82b96:	781b      	ldrb	r3, [r3, #0]
   82b98:	f003 0360 	and.w	r3, r3, #96	; 0x60
   82b9c:	2b20      	cmp	r3, #32
   82b9e:	d121      	bne.n	82be4 <udi_hid_setup+0xd8>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   82ba0:	4b13      	ldr	r3, [pc, #76]	; (82bf0 <udi_hid_setup+0xe4>)
   82ba2:	785b      	ldrb	r3, [r3, #1]
   82ba4:	2b0a      	cmp	r3, #10
   82ba6:	d007      	beq.n	82bb8 <udi_hid_setup+0xac>
   82ba8:	2b0b      	cmp	r3, #11
   82baa:	d00e      	beq.n	82bca <udi_hid_setup+0xbe>
   82bac:	2b09      	cmp	r3, #9
   82bae:	d119      	bne.n	82be4 <udi_hid_setup+0xd8>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
   82bb0:	683b      	ldr	r3, [r7, #0]
   82bb2:	4798      	blx	r3
   82bb4:	4603      	mov	r3, r0
   82bb6:	e016      	b.n	82be6 <udi_hid_setup+0xda>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
   82bb8:	4b0d      	ldr	r3, [pc, #52]	; (82bf0 <udi_hid_setup+0xe4>)
   82bba:	885b      	ldrh	r3, [r3, #2]
   82bbc:	0a1b      	lsrs	r3, r3, #8
   82bbe:	b29b      	uxth	r3, r3
   82bc0:	b2da      	uxtb	r2, r3
   82bc2:	68fb      	ldr	r3, [r7, #12]
   82bc4:	701a      	strb	r2, [r3, #0]
				return true;
   82bc6:	2301      	movs	r3, #1
   82bc8:	e00d      	b.n	82be6 <udi_hid_setup+0xda>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
   82bca:	4b09      	ldr	r3, [pc, #36]	; (82bf0 <udi_hid_setup+0xe4>)
   82bcc:	88db      	ldrh	r3, [r3, #6]
   82bce:	2b00      	cmp	r3, #0
   82bd0:	d001      	beq.n	82bd6 <udi_hid_setup+0xca>
					return false;
   82bd2:	2300      	movs	r3, #0
   82bd4:	e007      	b.n	82be6 <udi_hid_setup+0xda>
				*protocol = udd_g_ctrlreq.req.wValue;
   82bd6:	4b06      	ldr	r3, [pc, #24]	; (82bf0 <udi_hid_setup+0xe4>)
   82bd8:	885b      	ldrh	r3, [r3, #2]
   82bda:	b2da      	uxtb	r2, r3
   82bdc:	68bb      	ldr	r3, [r7, #8]
   82bde:	701a      	strb	r2, [r3, #0]
				return true;
   82be0:	2301      	movs	r3, #1
   82be2:	e000      	b.n	82be6 <udi_hid_setup+0xda>
			}
		}
	}
	return false;	// Request not supported
   82be4:	2300      	movs	r3, #0
}
   82be6:	4618      	mov	r0, r3
   82be8:	3710      	adds	r7, #16
   82bea:	46bd      	mov	sp, r7
   82bec:	bd80      	pop	{r7, pc}
   82bee:	bf00      	nop
   82bf0:	2007086c 	.word	0x2007086c
   82bf4:	00082bf9 	.word	0x00082bf9

00082bf8 <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
   82bf8:	b580      	push	{r7, lr}
   82bfa:	b084      	sub	sp, #16
   82bfc:	af00      	add	r7, sp, #0
   82bfe:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
   82c00:	4b20      	ldr	r3, [pc, #128]	; (82c84 <udi_hid_reqstdifaceget_descriptor+0x8c>)
   82c02:	4798      	blx	r3
   82c04:	4603      	mov	r3, r0
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
   82c06:	3309      	adds	r3, #9
   82c08:	60fb      	str	r3, [r7, #12]
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
   82c0a:	68fb      	ldr	r3, [r7, #12]
   82c0c:	785b      	ldrb	r3, [r3, #1]
   82c0e:	2b21      	cmp	r3, #33	; 0x21
   82c10:	d001      	beq.n	82c16 <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
   82c12:	2300      	movs	r3, #0
   82c14:	e031      	b.n	82c7a <udi_hid_reqstdifaceget_descriptor+0x82>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   82c16:	4b1c      	ldr	r3, [pc, #112]	; (82c88 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82c18:	885b      	ldrh	r3, [r3, #2]
   82c1a:	0a1b      	lsrs	r3, r3, #8
   82c1c:	b29b      	uxth	r3, r3
   82c1e:	b2db      	uxtb	r3, r3
   82c20:	2b21      	cmp	r3, #33	; 0x21
   82c22:	d10f      	bne.n	82c44 <udi_hid_reqstdifaceget_descriptor+0x4c>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
   82c24:	4a18      	ldr	r2, [pc, #96]	; (82c88 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82c26:	68fb      	ldr	r3, [r7, #12]
   82c28:	6093      	str	r3, [r2, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
   82c2a:	68fb      	ldr	r3, [r7, #12]
   82c2c:	781b      	ldrb	r3, [r3, #0]
   82c2e:	b29a      	uxth	r2, r3
   82c30:	4b15      	ldr	r3, [pc, #84]	; (82c88 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82c32:	88db      	ldrh	r3, [r3, #6]
   82c34:	4293      	cmp	r3, r2
   82c36:	bf28      	it	cs
   82c38:	4613      	movcs	r3, r2
   82c3a:	b29a      	uxth	r2, r3
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
   82c3c:	4b12      	ldr	r3, [pc, #72]	; (82c88 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82c3e:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
   82c40:	2301      	movs	r3, #1
   82c42:	e01a      	b.n	82c7a <udi_hid_reqstdifaceget_descriptor+0x82>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
   82c44:	68fb      	ldr	r3, [r7, #12]
   82c46:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   82c48:	4b0f      	ldr	r3, [pc, #60]	; (82c88 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82c4a:	885b      	ldrh	r3, [r3, #2]
   82c4c:	0a1b      	lsrs	r3, r3, #8
   82c4e:	b29b      	uxth	r3, r3
   82c50:	b2db      	uxtb	r3, r3
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
   82c52:	429a      	cmp	r2, r3
   82c54:	d110      	bne.n	82c78 <udi_hid_reqstdifaceget_descriptor+0x80>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
   82c56:	4a0c      	ldr	r2, [pc, #48]	; (82c88 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82c58:	687b      	ldr	r3, [r7, #4]
   82c5a:	6093      	str	r3, [r2, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
   82c5c:	68fb      	ldr	r3, [r7, #12]
   82c5e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
   82c62:	b29a      	uxth	r2, r3
   82c64:	4b08      	ldr	r3, [pc, #32]	; (82c88 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82c66:	88db      	ldrh	r3, [r3, #6]
   82c68:	4293      	cmp	r3, r2
   82c6a:	bf28      	it	cs
   82c6c:	4613      	movcs	r3, r2
   82c6e:	b29a      	uxth	r2, r3
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
   82c70:	4b05      	ldr	r3, [pc, #20]	; (82c88 <udi_hid_reqstdifaceget_descriptor+0x90>)
   82c72:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
   82c74:	2301      	movs	r3, #1
   82c76:	e000      	b.n	82c7a <udi_hid_reqstdifaceget_descriptor+0x82>
	}
	return false;
   82c78:	2300      	movs	r3, #0
}
   82c7a:	4618      	mov	r0, r3
   82c7c:	3710      	adds	r7, #16
   82c7e:	46bd      	mov	sp, r7
   82c80:	bd80      	pop	{r7, pc}
   82c82:	bf00      	nop
   82c84:	000804a9 	.word	0x000804a9
   82c88:	2007086c 	.word	0x2007086c

00082c8c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   82c8c:	b580      	push	{r7, lr}
   82c8e:	b082      	sub	sp, #8
   82c90:	af00      	add	r7, sp, #0
   82c92:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82c94:	687b      	ldr	r3, [r7, #4]
   82c96:	2b07      	cmp	r3, #7
   82c98:	d830      	bhi.n	82cfc <osc_enable+0x70>
   82c9a:	a201      	add	r2, pc, #4	; (adr r2, 82ca0 <osc_enable+0x14>)
   82c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82ca0:	00082cfd 	.word	0x00082cfd
   82ca4:	00082cc1 	.word	0x00082cc1
   82ca8:	00082cc9 	.word	0x00082cc9
   82cac:	00082cd1 	.word	0x00082cd1
   82cb0:	00082cd9 	.word	0x00082cd9
   82cb4:	00082ce1 	.word	0x00082ce1
   82cb8:	00082ce9 	.word	0x00082ce9
   82cbc:	00082cf3 	.word	0x00082cf3
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   82cc0:	2000      	movs	r0, #0
   82cc2:	4b10      	ldr	r3, [pc, #64]	; (82d04 <osc_enable+0x78>)
   82cc4:	4798      	blx	r3
		break;
   82cc6:	e019      	b.n	82cfc <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   82cc8:	2001      	movs	r0, #1
   82cca:	4b0e      	ldr	r3, [pc, #56]	; (82d04 <osc_enable+0x78>)
   82ccc:	4798      	blx	r3
		break;
   82cce:	e015      	b.n	82cfc <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   82cd0:	2000      	movs	r0, #0
   82cd2:	4b0d      	ldr	r3, [pc, #52]	; (82d08 <osc_enable+0x7c>)
   82cd4:	4798      	blx	r3
		break;
   82cd6:	e011      	b.n	82cfc <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   82cd8:	2010      	movs	r0, #16
   82cda:	4b0b      	ldr	r3, [pc, #44]	; (82d08 <osc_enable+0x7c>)
   82cdc:	4798      	blx	r3
		break;
   82cde:	e00d      	b.n	82cfc <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   82ce0:	2020      	movs	r0, #32
   82ce2:	4b09      	ldr	r3, [pc, #36]	; (82d08 <osc_enable+0x7c>)
   82ce4:	4798      	blx	r3
		break;
   82ce6:	e009      	b.n	82cfc <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82ce8:	2000      	movs	r0, #0
   82cea:	213e      	movs	r1, #62	; 0x3e
   82cec:	4b07      	ldr	r3, [pc, #28]	; (82d0c <osc_enable+0x80>)
   82cee:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   82cf0:	e004      	b.n	82cfc <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   82cf2:	2001      	movs	r0, #1
   82cf4:	213e      	movs	r1, #62	; 0x3e
   82cf6:	4b05      	ldr	r3, [pc, #20]	; (82d0c <osc_enable+0x80>)
   82cf8:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   82cfa:	bf00      	nop
	}
}
   82cfc:	3708      	adds	r7, #8
   82cfe:	46bd      	mov	sp, r7
   82d00:	bd80      	pop	{r7, pc}
   82d02:	bf00      	nop
   82d04:	0008367d 	.word	0x0008367d
   82d08:	000836e9 	.word	0x000836e9
   82d0c:	00083759 	.word	0x00083759

00082d10 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   82d10:	b580      	push	{r7, lr}
   82d12:	b082      	sub	sp, #8
   82d14:	af00      	add	r7, sp, #0
   82d16:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82d18:	687b      	ldr	r3, [r7, #4]
   82d1a:	2b07      	cmp	r3, #7
   82d1c:	d826      	bhi.n	82d6c <osc_is_ready+0x5c>
   82d1e:	a201      	add	r2, pc, #4	; (adr r2, 82d24 <osc_is_ready+0x14>)
   82d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82d24:	00082d45 	.word	0x00082d45
   82d28:	00082d49 	.word	0x00082d49
   82d2c:	00082d49 	.word	0x00082d49
   82d30:	00082d5b 	.word	0x00082d5b
   82d34:	00082d5b 	.word	0x00082d5b
   82d38:	00082d5b 	.word	0x00082d5b
   82d3c:	00082d5b 	.word	0x00082d5b
   82d40:	00082d5b 	.word	0x00082d5b
	case OSC_SLCK_32K_RC:
		return 1;
   82d44:	2301      	movs	r3, #1
   82d46:	e012      	b.n	82d6e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   82d48:	4b0b      	ldr	r3, [pc, #44]	; (82d78 <osc_is_ready+0x68>)
   82d4a:	4798      	blx	r3
   82d4c:	4603      	mov	r3, r0
   82d4e:	2b00      	cmp	r3, #0
   82d50:	bf14      	ite	ne
   82d52:	2301      	movne	r3, #1
   82d54:	2300      	moveq	r3, #0
   82d56:	b2db      	uxtb	r3, r3
   82d58:	e009      	b.n	82d6e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82d5a:	4b08      	ldr	r3, [pc, #32]	; (82d7c <osc_is_ready+0x6c>)
   82d5c:	4798      	blx	r3
   82d5e:	4603      	mov	r3, r0
   82d60:	2b00      	cmp	r3, #0
   82d62:	bf14      	ite	ne
   82d64:	2301      	movne	r3, #1
   82d66:	2300      	moveq	r3, #0
   82d68:	b2db      	uxtb	r3, r3
   82d6a:	e000      	b.n	82d6e <osc_is_ready+0x5e>
	}

	return 0;
   82d6c:	2300      	movs	r3, #0
}
   82d6e:	4618      	mov	r0, r3
   82d70:	3708      	adds	r7, #8
   82d72:	46bd      	mov	sp, r7
   82d74:	bd80      	pop	{r7, pc}
   82d76:	bf00      	nop
   82d78:	000836b5 	.word	0x000836b5
   82d7c:	000837d1 	.word	0x000837d1

00082d80 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   82d80:	b480      	push	{r7}
   82d82:	b083      	sub	sp, #12
   82d84:	af00      	add	r7, sp, #0
   82d86:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82d88:	687b      	ldr	r3, [r7, #4]
   82d8a:	2b07      	cmp	r3, #7
   82d8c:	d825      	bhi.n	82dda <osc_get_rate+0x5a>
   82d8e:	a201      	add	r2, pc, #4	; (adr r2, 82d94 <osc_get_rate+0x14>)
   82d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82d94:	00082db5 	.word	0x00082db5
   82d98:	00082dbb 	.word	0x00082dbb
   82d9c:	00082dc1 	.word	0x00082dc1
   82da0:	00082dc7 	.word	0x00082dc7
   82da4:	00082dcb 	.word	0x00082dcb
   82da8:	00082dcf 	.word	0x00082dcf
   82dac:	00082dd3 	.word	0x00082dd3
   82db0:	00082dd7 	.word	0x00082dd7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   82db4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   82db8:	e010      	b.n	82ddc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   82dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82dbe:	e00d      	b.n	82ddc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   82dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82dc4:	e00a      	b.n	82ddc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   82dc6:	4b08      	ldr	r3, [pc, #32]	; (82de8 <osc_get_rate+0x68>)
   82dc8:	e008      	b.n	82ddc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   82dca:	4b08      	ldr	r3, [pc, #32]	; (82dec <osc_get_rate+0x6c>)
   82dcc:	e006      	b.n	82ddc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   82dce:	4b08      	ldr	r3, [pc, #32]	; (82df0 <osc_get_rate+0x70>)
   82dd0:	e004      	b.n	82ddc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   82dd2:	4b07      	ldr	r3, [pc, #28]	; (82df0 <osc_get_rate+0x70>)
   82dd4:	e002      	b.n	82ddc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   82dd6:	4b06      	ldr	r3, [pc, #24]	; (82df0 <osc_get_rate+0x70>)
   82dd8:	e000      	b.n	82ddc <osc_get_rate+0x5c>
	}

	return 0;
   82dda:	2300      	movs	r3, #0
}
   82ddc:	4618      	mov	r0, r3
   82dde:	370c      	adds	r7, #12
   82de0:	46bd      	mov	sp, r7
   82de2:	f85d 7b04 	ldr.w	r7, [sp], #4
   82de6:	4770      	bx	lr
   82de8:	003d0900 	.word	0x003d0900
   82dec:	007a1200 	.word	0x007a1200
   82df0:	00b71b00 	.word	0x00b71b00

00082df4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   82df4:	b580      	push	{r7, lr}
   82df6:	b082      	sub	sp, #8
   82df8:	af00      	add	r7, sp, #0
   82dfa:	4603      	mov	r3, r0
   82dfc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   82dfe:	bf00      	nop
   82e00:	79fb      	ldrb	r3, [r7, #7]
   82e02:	4618      	mov	r0, r3
   82e04:	4b05      	ldr	r3, [pc, #20]	; (82e1c <osc_wait_ready+0x28>)
   82e06:	4798      	blx	r3
   82e08:	4603      	mov	r3, r0
   82e0a:	f083 0301 	eor.w	r3, r3, #1
   82e0e:	b2db      	uxtb	r3, r3
   82e10:	2b00      	cmp	r3, #0
   82e12:	d1f5      	bne.n	82e00 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   82e14:	3708      	adds	r7, #8
   82e16:	46bd      	mov	sp, r7
   82e18:	bd80      	pop	{r7, pc}
   82e1a:	bf00      	nop
   82e1c:	00082d11 	.word	0x00082d11

00082e20 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   82e20:	b580      	push	{r7, lr}
   82e22:	b086      	sub	sp, #24
   82e24:	af00      	add	r7, sp, #0
   82e26:	60f8      	str	r0, [r7, #12]
   82e28:	607a      	str	r2, [r7, #4]
   82e2a:	603b      	str	r3, [r7, #0]
   82e2c:	460b      	mov	r3, r1
   82e2e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   82e30:	687b      	ldr	r3, [r7, #4]
   82e32:	2b00      	cmp	r3, #0
   82e34:	d107      	bne.n	82e46 <pll_config_init+0x26>
   82e36:	683b      	ldr	r3, [r7, #0]
   82e38:	2b00      	cmp	r3, #0
   82e3a:	d104      	bne.n	82e46 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   82e3c:	68fb      	ldr	r3, [r7, #12]
   82e3e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   82e42:	601a      	str	r2, [r3, #0]
   82e44:	e019      	b.n	82e7a <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   82e46:	7afb      	ldrb	r3, [r7, #11]
   82e48:	4618      	mov	r0, r3
   82e4a:	4b0d      	ldr	r3, [pc, #52]	; (82e80 <pll_config_init+0x60>)
   82e4c:	4798      	blx	r3
   82e4e:	4602      	mov	r2, r0
   82e50:	687b      	ldr	r3, [r7, #4]
   82e52:	fbb2 f3f3 	udiv	r3, r2, r3
   82e56:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   82e58:	697b      	ldr	r3, [r7, #20]
   82e5a:	683a      	ldr	r2, [r7, #0]
   82e5c:	fb02 f303 	mul.w	r3, r2, r3
   82e60:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   82e62:	683b      	ldr	r3, [r7, #0]
   82e64:	3b01      	subs	r3, #1
   82e66:	041a      	lsls	r2, r3, #16
   82e68:	4b06      	ldr	r3, [pc, #24]	; (82e84 <pll_config_init+0x64>)
   82e6a:	4013      	ands	r3, r2
   82e6c:	687a      	ldr	r2, [r7, #4]
   82e6e:	b2d2      	uxtb	r2, r2
   82e70:	4313      	orrs	r3, r2
   82e72:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   82e76:	68fb      	ldr	r3, [r7, #12]
   82e78:	601a      	str	r2, [r3, #0]
	}
}
   82e7a:	3718      	adds	r7, #24
   82e7c:	46bd      	mov	sp, r7
   82e7e:	bd80      	pop	{r7, pc}
   82e80:	00082d81 	.word	0x00082d81
   82e84:	07ff0000 	.word	0x07ff0000

00082e88 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   82e88:	b580      	push	{r7, lr}
   82e8a:	b082      	sub	sp, #8
   82e8c:	af00      	add	r7, sp, #0
   82e8e:	6078      	str	r0, [r7, #4]
   82e90:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82e92:	683b      	ldr	r3, [r7, #0]
   82e94:	2b00      	cmp	r3, #0
   82e96:	d108      	bne.n	82eaa <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   82e98:	4b08      	ldr	r3, [pc, #32]	; (82ebc <pll_enable+0x34>)
   82e9a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82e9c:	4a08      	ldr	r2, [pc, #32]	; (82ec0 <pll_enable+0x38>)
   82e9e:	687b      	ldr	r3, [r7, #4]
   82ea0:	681b      	ldr	r3, [r3, #0]
   82ea2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82ea6:	6293      	str	r3, [r2, #40]	; 0x28
   82ea8:	e005      	b.n	82eb6 <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82eaa:	4a05      	ldr	r2, [pc, #20]	; (82ec0 <pll_enable+0x38>)
   82eac:	687b      	ldr	r3, [r7, #4]
   82eae:	681b      	ldr	r3, [r3, #0]
   82eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82eb4:	61d3      	str	r3, [r2, #28]
	}
}
   82eb6:	3708      	adds	r7, #8
   82eb8:	46bd      	mov	sp, r7
   82eba:	bd80      	pop	{r7, pc}
   82ebc:	000837ed 	.word	0x000837ed
   82ec0:	400e0600 	.word	0x400e0600

00082ec4 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   82ec4:	b580      	push	{r7, lr}
   82ec6:	b082      	sub	sp, #8
   82ec8:	af00      	add	r7, sp, #0
   82eca:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82ecc:	687b      	ldr	r3, [r7, #4]
   82ece:	2b00      	cmp	r3, #0
   82ed0:	d103      	bne.n	82eda <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   82ed2:	4b05      	ldr	r3, [pc, #20]	; (82ee8 <pll_is_locked+0x24>)
   82ed4:	4798      	blx	r3
   82ed6:	4603      	mov	r3, r0
   82ed8:	e002      	b.n	82ee0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   82eda:	4b04      	ldr	r3, [pc, #16]	; (82eec <pll_is_locked+0x28>)
   82edc:	4798      	blx	r3
   82ede:	4603      	mov	r3, r0
	}
}
   82ee0:	4618      	mov	r0, r3
   82ee2:	3708      	adds	r7, #8
   82ee4:	46bd      	mov	sp, r7
   82ee6:	bd80      	pop	{r7, pc}
   82ee8:	00083805 	.word	0x00083805
   82eec:	00083849 	.word	0x00083849

00082ef0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   82ef0:	b580      	push	{r7, lr}
   82ef2:	b082      	sub	sp, #8
   82ef4:	af00      	add	r7, sp, #0
   82ef6:	4603      	mov	r3, r0
   82ef8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   82efa:	79fb      	ldrb	r3, [r7, #7]
   82efc:	3b03      	subs	r3, #3
   82efe:	2b04      	cmp	r3, #4
   82f00:	d808      	bhi.n	82f14 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   82f02:	79fb      	ldrb	r3, [r7, #7]
   82f04:	4618      	mov	r0, r3
   82f06:	4b05      	ldr	r3, [pc, #20]	; (82f1c <pll_enable_source+0x2c>)
   82f08:	4798      	blx	r3
		osc_wait_ready(e_src);
   82f0a:	79fb      	ldrb	r3, [r7, #7]
   82f0c:	4618      	mov	r0, r3
   82f0e:	4b04      	ldr	r3, [pc, #16]	; (82f20 <pll_enable_source+0x30>)
   82f10:	4798      	blx	r3
		break;
   82f12:	e000      	b.n	82f16 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   82f14:	bf00      	nop
	}
}
   82f16:	3708      	adds	r7, #8
   82f18:	46bd      	mov	sp, r7
   82f1a:	bd80      	pop	{r7, pc}
   82f1c:	00082c8d 	.word	0x00082c8d
   82f20:	00082df5 	.word	0x00082df5

00082f24 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   82f24:	b580      	push	{r7, lr}
   82f26:	b082      	sub	sp, #8
   82f28:	af00      	add	r7, sp, #0
   82f2a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82f2c:	bf00      	nop
   82f2e:	6878      	ldr	r0, [r7, #4]
   82f30:	4b04      	ldr	r3, [pc, #16]	; (82f44 <pll_wait_for_lock+0x20>)
   82f32:	4798      	blx	r3
   82f34:	4603      	mov	r3, r0
   82f36:	2b00      	cmp	r3, #0
   82f38:	d0f9      	beq.n	82f2e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   82f3a:	2300      	movs	r3, #0
}
   82f3c:	4618      	mov	r0, r3
   82f3e:	3708      	adds	r7, #8
   82f40:	46bd      	mov	sp, r7
   82f42:	bd80      	pop	{r7, pc}
   82f44:	00082ec5 	.word	0x00082ec5

00082f48 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   82f48:	b580      	push	{r7, lr}
   82f4a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   82f4c:	2006      	movs	r0, #6
   82f4e:	4b04      	ldr	r3, [pc, #16]	; (82f60 <sysclk_get_main_hz+0x18>)
   82f50:	4798      	blx	r3
   82f52:	4602      	mov	r2, r0
   82f54:	4613      	mov	r3, r2
   82f56:	00db      	lsls	r3, r3, #3
   82f58:	1a9b      	subs	r3, r3, r2
   82f5a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   82f5c:	4618      	mov	r0, r3
   82f5e:	bd80      	pop	{r7, pc}
   82f60:	00082d81 	.word	0x00082d81

00082f64 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   82f64:	b580      	push	{r7, lr}
   82f66:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   82f68:	4b02      	ldr	r3, [pc, #8]	; (82f74 <sysclk_get_cpu_hz+0x10>)
   82f6a:	4798      	blx	r3
   82f6c:	4603      	mov	r3, r0
   82f6e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   82f70:	4618      	mov	r0, r3
   82f72:	bd80      	pop	{r7, pc}
   82f74:	00082f49 	.word	0x00082f49

00082f78 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   82f78:	b580      	push	{r7, lr}
   82f7a:	b082      	sub	sp, #8
   82f7c:	af00      	add	r7, sp, #0
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   82f7e:	4b05      	ldr	r3, [pc, #20]	; (82f94 <sysclk_enable_usb+0x1c>)
   82f80:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   82f82:	2000      	movs	r0, #0
   82f84:	4b04      	ldr	r3, [pc, #16]	; (82f98 <sysclk_enable_usb+0x20>)
   82f86:	4798      	blx	r3
		pmc_enable_udpck();
   82f88:	4b04      	ldr	r3, [pc, #16]	; (82f9c <sysclk_enable_usb+0x24>)
   82f8a:	4798      	blx	r3
		return;
   82f8c:	bf00      	nop
	}
}
   82f8e:	3708      	adds	r7, #8
   82f90:	46bd      	mov	sp, r7
   82f92:	bd80      	pop	{r7, pc}
   82f94:	00083821 	.word	0x00083821
   82f98:	000838e9 	.word	0x000838e9
   82f9c:	00083911 	.word	0x00083911

00082fa0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82fa0:	b590      	push	{r4, r7, lr}
   82fa2:	b083      	sub	sp, #12
   82fa4:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82fa6:	4811      	ldr	r0, [pc, #68]	; (82fec <sysclk_init+0x4c>)
   82fa8:	4b11      	ldr	r3, [pc, #68]	; (82ff0 <sysclk_init+0x50>)
   82faa:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   82fac:	2006      	movs	r0, #6
   82fae:	4b11      	ldr	r3, [pc, #68]	; (82ff4 <sysclk_init+0x54>)
   82fb0:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   82fb2:	1d3b      	adds	r3, r7, #4
   82fb4:	4618      	mov	r0, r3
   82fb6:	2106      	movs	r1, #6
   82fb8:	2201      	movs	r2, #1
   82fba:	230e      	movs	r3, #14
   82fbc:	4c0e      	ldr	r4, [pc, #56]	; (82ff8 <sysclk_init+0x58>)
   82fbe:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   82fc0:	1d3b      	adds	r3, r7, #4
   82fc2:	4618      	mov	r0, r3
   82fc4:	2100      	movs	r1, #0
   82fc6:	4b0d      	ldr	r3, [pc, #52]	; (82ffc <sysclk_init+0x5c>)
   82fc8:	4798      	blx	r3
		pll_wait_for_lock(0);
   82fca:	2000      	movs	r0, #0
   82fcc:	4b0c      	ldr	r3, [pc, #48]	; (83000 <sysclk_init+0x60>)
   82fce:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82fd0:	2010      	movs	r0, #16
   82fd2:	4b0c      	ldr	r3, [pc, #48]	; (83004 <sysclk_init+0x64>)
   82fd4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82fd6:	4b0c      	ldr	r3, [pc, #48]	; (83008 <sysclk_init+0x68>)
   82fd8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82fda:	4b0c      	ldr	r3, [pc, #48]	; (8300c <sysclk_init+0x6c>)
   82fdc:	4798      	blx	r3
   82fde:	4603      	mov	r3, r0
   82fe0:	4618      	mov	r0, r3
   82fe2:	4b03      	ldr	r3, [pc, #12]	; (82ff0 <sysclk_init+0x50>)
   82fe4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   82fe6:	370c      	adds	r7, #12
   82fe8:	46bd      	mov	sp, r7
   82fea:	bd90      	pop	{r4, r7, pc}
   82fec:	0501bd00 	.word	0x0501bd00
   82ff0:	200700d1 	.word	0x200700d1
   82ff4:	00082ef1 	.word	0x00082ef1
   82ff8:	00082e21 	.word	0x00082e21
   82ffc:	00082e89 	.word	0x00082e89
   83000:	00082f25 	.word	0x00082f25
   83004:	000835f9 	.word	0x000835f9
   83008:	00083a35 	.word	0x00083a35
   8300c:	00082f65 	.word	0x00082f65

00083010 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   83010:	b580      	push	{r7, lr}
   83012:	b082      	sub	sp, #8
   83014:	af00      	add	r7, sp, #0
   83016:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   83018:	6878      	ldr	r0, [r7, #4]
   8301a:	4b02      	ldr	r3, [pc, #8]	; (83024 <sysclk_enable_peripheral_clock+0x14>)
   8301c:	4798      	blx	r3
}
   8301e:	3708      	adds	r7, #8
   83020:	46bd      	mov	sp, r7
   83022:	bd80      	pop	{r7, pc}
   83024:	00083865 	.word	0x00083865

00083028 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   83028:	b580      	push	{r7, lr}
   8302a:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   8302c:	200b      	movs	r0, #11
   8302e:	4b06      	ldr	r3, [pc, #24]	; (83048 <ioport_init+0x20>)
   83030:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   83032:	200c      	movs	r0, #12
   83034:	4b04      	ldr	r3, [pc, #16]	; (83048 <ioport_init+0x20>)
   83036:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   83038:	200d      	movs	r0, #13
   8303a:	4b03      	ldr	r3, [pc, #12]	; (83048 <ioport_init+0x20>)
   8303c:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   8303e:	200e      	movs	r0, #14
   83040:	4b01      	ldr	r3, [pc, #4]	; (83048 <ioport_init+0x20>)
   83042:	4798      	blx	r3
	arch_ioport_init();
}
   83044:	bd80      	pop	{r7, pc}
   83046:	bf00      	nop
   83048:	00083011 	.word	0x00083011

0008304c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8304c:	b580      	push	{r7, lr}
   8304e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83050:	4b16      	ldr	r3, [pc, #88]	; (830ac <board_init+0x60>)
   83052:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83056:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   83058:	4b15      	ldr	r3, [pc, #84]	; (830b0 <board_init+0x64>)
   8305a:	4798      	blx	r3
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8305c:	203b      	movs	r0, #59	; 0x3b
   8305e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83062:	4b14      	ldr	r3, [pc, #80]	; (830b4 <board_init+0x68>)
   83064:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   83066:	2055      	movs	r0, #85	; 0x55
   83068:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8306c:	4b11      	ldr	r3, [pc, #68]	; (830b4 <board_init+0x68>)
   8306e:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   83070:	2056      	movs	r0, #86	; 0x56
   83072:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83076:	4b0f      	ldr	r3, [pc, #60]	; (830b4 <board_init+0x68>)
   83078:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8307a:	2068      	movs	r0, #104	; 0x68
   8307c:	490e      	ldr	r1, [pc, #56]	; (830b8 <board_init+0x6c>)
   8307e:	4b0d      	ldr	r3, [pc, #52]	; (830b4 <board_init+0x68>)
   83080:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   83082:	205c      	movs	r0, #92	; 0x5c
   83084:	490d      	ldr	r1, [pc, #52]	; (830bc <board_init+0x70>)
   83086:	4b0b      	ldr	r3, [pc, #44]	; (830b4 <board_init+0x68>)
   83088:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8308a:	480d      	ldr	r0, [pc, #52]	; (830c0 <board_init+0x74>)
   8308c:	f44f 7140 	mov.w	r1, #768	; 0x300
   83090:	4a0c      	ldr	r2, [pc, #48]	; (830c4 <board_init+0x78>)
   83092:	4b0d      	ldr	r3, [pc, #52]	; (830c8 <board_init+0x7c>)
   83094:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   83096:	202b      	movs	r0, #43	; 0x2b
   83098:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8309c:	4b05      	ldr	r3, [pc, #20]	; (830b4 <board_init+0x68>)
   8309e:	4798      	blx	r3
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   830a0:	202a      	movs	r0, #42	; 0x2a
   830a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   830a6:	4b03      	ldr	r3, [pc, #12]	; (830b4 <board_init+0x68>)
   830a8:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   830aa:	bd80      	pop	{r7, pc}
   830ac:	400e1a50 	.word	0x400e1a50
   830b0:	00083029 	.word	0x00083029
   830b4:	000832a5 	.word	0x000832a5
   830b8:	28000079 	.word	0x28000079
   830bc:	28000001 	.word	0x28000001
   830c0:	400e0e00 	.word	0x400e0e00
   830c4:	08000001 	.word	0x08000001
   830c8:	000833e1 	.word	0x000833e1

000830cc <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   830cc:	b480      	push	{r7}
   830ce:	b085      	sub	sp, #20
   830d0:	af00      	add	r7, sp, #0
   830d2:	60f8      	str	r0, [r7, #12]
   830d4:	60b9      	str	r1, [r7, #8]
   830d6:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   830d8:	687b      	ldr	r3, [r7, #4]
   830da:	2b00      	cmp	r3, #0
   830dc:	d003      	beq.n	830e6 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   830de:	68fb      	ldr	r3, [r7, #12]
   830e0:	68ba      	ldr	r2, [r7, #8]
   830e2:	665a      	str	r2, [r3, #100]	; 0x64
   830e4:	e002      	b.n	830ec <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   830e6:	68fb      	ldr	r3, [r7, #12]
   830e8:	68ba      	ldr	r2, [r7, #8]
   830ea:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   830ec:	3714      	adds	r7, #20
   830ee:	46bd      	mov	sp, r7
   830f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   830f4:	4770      	bx	lr
   830f6:	bf00      	nop

000830f8 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   830f8:	b480      	push	{r7}
   830fa:	b087      	sub	sp, #28
   830fc:	af00      	add	r7, sp, #0
   830fe:	60f8      	str	r0, [r7, #12]
   83100:	60b9      	str	r1, [r7, #8]
   83102:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   83104:	68fb      	ldr	r3, [r7, #12]
   83106:	687a      	ldr	r2, [r7, #4]
   83108:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8310a:	68bb      	ldr	r3, [r7, #8]
   8310c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83110:	d01f      	beq.n	83152 <pio_set_peripheral+0x5a>
   83112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83116:	d805      	bhi.n	83124 <pio_set_peripheral+0x2c>
   83118:	2b00      	cmp	r3, #0
   8311a:	d027      	beq.n	8316c <pio_set_peripheral+0x74>
   8311c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83120:	d00a      	beq.n	83138 <pio_set_peripheral+0x40>
   83122:	e01f      	b.n	83164 <pio_set_peripheral+0x6c>
   83124:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83128:	d020      	beq.n	8316c <pio_set_peripheral+0x74>
   8312a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8312e:	d01d      	beq.n	8316c <pio_set_peripheral+0x74>
   83130:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83134:	d01a      	beq.n	8316c <pio_set_peripheral+0x74>
   83136:	e015      	b.n	83164 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   83138:	68fb      	ldr	r3, [r7, #12]
   8313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8313c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8313e:	68fb      	ldr	r3, [r7, #12]
   83140:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83142:	687b      	ldr	r3, [r7, #4]
   83144:	43d9      	mvns	r1, r3
   83146:	697b      	ldr	r3, [r7, #20]
   83148:	400b      	ands	r3, r1
   8314a:	401a      	ands	r2, r3
   8314c:	68fb      	ldr	r3, [r7, #12]
   8314e:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   83150:	e008      	b.n	83164 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   83152:	68fb      	ldr	r3, [r7, #12]
   83154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83156:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83158:	687a      	ldr	r2, [r7, #4]
   8315a:	697b      	ldr	r3, [r7, #20]
   8315c:	431a      	orrs	r2, r3
   8315e:	68fb      	ldr	r3, [r7, #12]
   83160:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   83162:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   83164:	68fb      	ldr	r3, [r7, #12]
   83166:	687a      	ldr	r2, [r7, #4]
   83168:	605a      	str	r2, [r3, #4]
   8316a:	e000      	b.n	8316e <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   8316c:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   8316e:	371c      	adds	r7, #28
   83170:	46bd      	mov	sp, r7
   83172:	f85d 7b04 	ldr.w	r7, [sp], #4
   83176:	4770      	bx	lr

00083178 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   83178:	b580      	push	{r7, lr}
   8317a:	b084      	sub	sp, #16
   8317c:	af00      	add	r7, sp, #0
   8317e:	60f8      	str	r0, [r7, #12]
   83180:	60b9      	str	r1, [r7, #8]
   83182:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   83184:	68f8      	ldr	r0, [r7, #12]
   83186:	68b9      	ldr	r1, [r7, #8]
   83188:	4b18      	ldr	r3, [pc, #96]	; (831ec <pio_set_input+0x74>)
   8318a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8318c:	687b      	ldr	r3, [r7, #4]
   8318e:	f003 0301 	and.w	r3, r3, #1
   83192:	68f8      	ldr	r0, [r7, #12]
   83194:	68b9      	ldr	r1, [r7, #8]
   83196:	461a      	mov	r2, r3
   83198:	4b15      	ldr	r3, [pc, #84]	; (831f0 <pio_set_input+0x78>)
   8319a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8319c:	687b      	ldr	r3, [r7, #4]
   8319e:	f003 030a 	and.w	r3, r3, #10
   831a2:	2b00      	cmp	r3, #0
   831a4:	d003      	beq.n	831ae <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   831a6:	68fb      	ldr	r3, [r7, #12]
   831a8:	68ba      	ldr	r2, [r7, #8]
   831aa:	621a      	str	r2, [r3, #32]
   831ac:	e002      	b.n	831b4 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   831ae:	68fb      	ldr	r3, [r7, #12]
   831b0:	68ba      	ldr	r2, [r7, #8]
   831b2:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   831b4:	687b      	ldr	r3, [r7, #4]
   831b6:	f003 0302 	and.w	r3, r3, #2
   831ba:	2b00      	cmp	r3, #0
   831bc:	d004      	beq.n	831c8 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   831be:	68fb      	ldr	r3, [r7, #12]
   831c0:	68ba      	ldr	r2, [r7, #8]
   831c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   831c6:	e008      	b.n	831da <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   831c8:	687b      	ldr	r3, [r7, #4]
   831ca:	f003 0308 	and.w	r3, r3, #8
   831ce:	2b00      	cmp	r3, #0
   831d0:	d003      	beq.n	831da <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   831d2:	68fb      	ldr	r3, [r7, #12]
   831d4:	68ba      	ldr	r2, [r7, #8]
   831d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   831da:	68fb      	ldr	r3, [r7, #12]
   831dc:	68ba      	ldr	r2, [r7, #8]
   831de:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   831e0:	68fb      	ldr	r3, [r7, #12]
   831e2:	68ba      	ldr	r2, [r7, #8]
   831e4:	601a      	str	r2, [r3, #0]
}
   831e6:	3710      	adds	r7, #16
   831e8:	46bd      	mov	sp, r7
   831ea:	bd80      	pop	{r7, pc}
   831ec:	00083259 	.word	0x00083259
   831f0:	000830cd 	.word	0x000830cd

000831f4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   831f4:	b580      	push	{r7, lr}
   831f6:	b084      	sub	sp, #16
   831f8:	af00      	add	r7, sp, #0
   831fa:	60f8      	str	r0, [r7, #12]
   831fc:	60b9      	str	r1, [r7, #8]
   831fe:	607a      	str	r2, [r7, #4]
   83200:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   83202:	68f8      	ldr	r0, [r7, #12]
   83204:	68b9      	ldr	r1, [r7, #8]
   83206:	4b12      	ldr	r3, [pc, #72]	; (83250 <pio_set_output+0x5c>)
   83208:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   8320a:	68f8      	ldr	r0, [r7, #12]
   8320c:	68b9      	ldr	r1, [r7, #8]
   8320e:	69ba      	ldr	r2, [r7, #24]
   83210:	4b10      	ldr	r3, [pc, #64]	; (83254 <pio_set_output+0x60>)
   83212:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   83214:	683b      	ldr	r3, [r7, #0]
   83216:	2b00      	cmp	r3, #0
   83218:	d003      	beq.n	83222 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   8321a:	68fb      	ldr	r3, [r7, #12]
   8321c:	68ba      	ldr	r2, [r7, #8]
   8321e:	651a      	str	r2, [r3, #80]	; 0x50
   83220:	e002      	b.n	83228 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   83222:	68fb      	ldr	r3, [r7, #12]
   83224:	68ba      	ldr	r2, [r7, #8]
   83226:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   83228:	687b      	ldr	r3, [r7, #4]
   8322a:	2b00      	cmp	r3, #0
   8322c:	d003      	beq.n	83236 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   8322e:	68fb      	ldr	r3, [r7, #12]
   83230:	68ba      	ldr	r2, [r7, #8]
   83232:	631a      	str	r2, [r3, #48]	; 0x30
   83234:	e002      	b.n	8323c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   83236:	68fb      	ldr	r3, [r7, #12]
   83238:	68ba      	ldr	r2, [r7, #8]
   8323a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8323c:	68fb      	ldr	r3, [r7, #12]
   8323e:	68ba      	ldr	r2, [r7, #8]
   83240:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   83242:	68fb      	ldr	r3, [r7, #12]
   83244:	68ba      	ldr	r2, [r7, #8]
   83246:	601a      	str	r2, [r3, #0]
}
   83248:	3710      	adds	r7, #16
   8324a:	46bd      	mov	sp, r7
   8324c:	bd80      	pop	{r7, pc}
   8324e:	bf00      	nop
   83250:	00083259 	.word	0x00083259
   83254:	000830cd 	.word	0x000830cd

00083258 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   83258:	b480      	push	{r7}
   8325a:	b083      	sub	sp, #12
   8325c:	af00      	add	r7, sp, #0
   8325e:	6078      	str	r0, [r7, #4]
   83260:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   83262:	687b      	ldr	r3, [r7, #4]
   83264:	683a      	ldr	r2, [r7, #0]
   83266:	645a      	str	r2, [r3, #68]	; 0x44
}
   83268:	370c      	adds	r7, #12
   8326a:	46bd      	mov	sp, r7
   8326c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83270:	4770      	bx	lr
   83272:	bf00      	nop

00083274 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   83274:	b480      	push	{r7}
   83276:	b083      	sub	sp, #12
   83278:	af00      	add	r7, sp, #0
   8327a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   8327c:	687b      	ldr	r3, [r7, #4]
   8327e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   83280:	4618      	mov	r0, r3
   83282:	370c      	adds	r7, #12
   83284:	46bd      	mov	sp, r7
   83286:	f85d 7b04 	ldr.w	r7, [sp], #4
   8328a:	4770      	bx	lr

0008328c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   8328c:	b480      	push	{r7}
   8328e:	b083      	sub	sp, #12
   83290:	af00      	add	r7, sp, #0
   83292:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   83294:	687b      	ldr	r3, [r7, #4]
   83296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   83298:	4618      	mov	r0, r3
   8329a:	370c      	adds	r7, #12
   8329c:	46bd      	mov	sp, r7
   8329e:	f85d 7b04 	ldr.w	r7, [sp], #4
   832a2:	4770      	bx	lr

000832a4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   832a4:	b590      	push	{r4, r7, lr}
   832a6:	b087      	sub	sp, #28
   832a8:	af02      	add	r7, sp, #8
   832aa:	6078      	str	r0, [r7, #4]
   832ac:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   832ae:	6878      	ldr	r0, [r7, #4]
   832b0:	4b46      	ldr	r3, [pc, #280]	; (833cc <pio_configure_pin+0x128>)
   832b2:	4798      	blx	r3
   832b4:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   832b6:	683b      	ldr	r3, [r7, #0]
   832b8:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   832bc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   832c0:	d048      	beq.n	83354 <pio_configure_pin+0xb0>
   832c2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   832c6:	d806      	bhi.n	832d6 <pio_configure_pin+0x32>
   832c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   832cc:	d00a      	beq.n	832e4 <pio_configure_pin+0x40>
   832ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   832d2:	d023      	beq.n	8331c <pio_configure_pin+0x78>
   832d4:	e072      	b.n	833bc <pio_configure_pin+0x118>
   832d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   832da:	d047      	beq.n	8336c <pio_configure_pin+0xc8>
   832dc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   832e0:	d044      	beq.n	8336c <pio_configure_pin+0xc8>
   832e2:	e06b      	b.n	833bc <pio_configure_pin+0x118>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   832e4:	687b      	ldr	r3, [r7, #4]
   832e6:	f003 031f 	and.w	r3, r3, #31
   832ea:	2201      	movs	r2, #1
   832ec:	fa02 f303 	lsl.w	r3, r2, r3
   832f0:	68f8      	ldr	r0, [r7, #12]
   832f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   832f6:	461a      	mov	r2, r3
   832f8:	4b35      	ldr	r3, [pc, #212]	; (833d0 <pio_configure_pin+0x12c>)
   832fa:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   832fc:	687b      	ldr	r3, [r7, #4]
   832fe:	f003 031f 	and.w	r3, r3, #31
   83302:	2201      	movs	r2, #1
   83304:	fa02 f303 	lsl.w	r3, r2, r3
   83308:	461a      	mov	r2, r3
   8330a:	683b      	ldr	r3, [r7, #0]
   8330c:	f003 0301 	and.w	r3, r3, #1
   83310:	68f8      	ldr	r0, [r7, #12]
   83312:	4611      	mov	r1, r2
   83314:	461a      	mov	r2, r3
   83316:	4b2f      	ldr	r3, [pc, #188]	; (833d4 <pio_configure_pin+0x130>)
   83318:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8331a:	e051      	b.n	833c0 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8331c:	687b      	ldr	r3, [r7, #4]
   8331e:	f003 031f 	and.w	r3, r3, #31
   83322:	2201      	movs	r2, #1
   83324:	fa02 f303 	lsl.w	r3, r2, r3
   83328:	68f8      	ldr	r0, [r7, #12]
   8332a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8332e:	461a      	mov	r2, r3
   83330:	4b27      	ldr	r3, [pc, #156]	; (833d0 <pio_configure_pin+0x12c>)
   83332:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   83334:	687b      	ldr	r3, [r7, #4]
   83336:	f003 031f 	and.w	r3, r3, #31
   8333a:	2201      	movs	r2, #1
   8333c:	fa02 f303 	lsl.w	r3, r2, r3
   83340:	461a      	mov	r2, r3
   83342:	683b      	ldr	r3, [r7, #0]
   83344:	f003 0301 	and.w	r3, r3, #1
   83348:	68f8      	ldr	r0, [r7, #12]
   8334a:	4611      	mov	r1, r2
   8334c:	461a      	mov	r2, r3
   8334e:	4b21      	ldr	r3, [pc, #132]	; (833d4 <pio_configure_pin+0x130>)
   83350:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   83352:	e035      	b.n	833c0 <pio_configure_pin+0x11c>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83354:	687b      	ldr	r3, [r7, #4]
   83356:	f003 031f 	and.w	r3, r3, #31
   8335a:	2201      	movs	r2, #1
   8335c:	fa02 f303 	lsl.w	r3, r2, r3
   83360:	68f8      	ldr	r0, [r7, #12]
   83362:	4619      	mov	r1, r3
   83364:	683a      	ldr	r2, [r7, #0]
   83366:	4b1c      	ldr	r3, [pc, #112]	; (833d8 <pio_configure_pin+0x134>)
   83368:	4798      	blx	r3
		break;
   8336a:	e029      	b.n	833c0 <pio_configure_pin+0x11c>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8336c:	687b      	ldr	r3, [r7, #4]
   8336e:	f003 031f 	and.w	r3, r3, #31
   83372:	2201      	movs	r2, #1
   83374:	fa02 f303 	lsl.w	r3, r2, r3
   83378:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8337a:	683b      	ldr	r3, [r7, #0]
   8337c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83380:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83384:	bf0c      	ite	eq
   83386:	2301      	moveq	r3, #1
   83388:	2300      	movne	r3, #0
   8338a:	b2db      	uxtb	r3, r3
   8338c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8338e:	683b      	ldr	r3, [r7, #0]
   83390:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83394:	2b00      	cmp	r3, #0
   83396:	bf14      	ite	ne
   83398:	2301      	movne	r3, #1
   8339a:	2300      	moveq	r3, #0
   8339c:	b2db      	uxtb	r3, r3
   8339e:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   833a0:	683b      	ldr	r3, [r7, #0]
   833a2:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   833a6:	2b00      	cmp	r3, #0
   833a8:	bf14      	ite	ne
   833aa:	2301      	movne	r3, #1
   833ac:	2300      	moveq	r3, #0
   833ae:	b2db      	uxtb	r3, r3
   833b0:	9300      	str	r3, [sp, #0]
   833b2:	68f8      	ldr	r0, [r7, #12]
   833b4:	4623      	mov	r3, r4
   833b6:	4c09      	ldr	r4, [pc, #36]	; (833dc <pio_configure_pin+0x138>)
   833b8:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   833ba:	e001      	b.n	833c0 <pio_configure_pin+0x11c>

	default:
		return 0;
   833bc:	2300      	movs	r3, #0
   833be:	e000      	b.n	833c2 <pio_configure_pin+0x11e>
	}

	return 1;
   833c0:	2301      	movs	r3, #1
}
   833c2:	4618      	mov	r0, r3
   833c4:	3714      	adds	r7, #20
   833c6:	46bd      	mov	sp, r7
   833c8:	bd90      	pop	{r4, r7, pc}
   833ca:	bf00      	nop
   833cc:	000834c5 	.word	0x000834c5
   833d0:	000830f9 	.word	0x000830f9
   833d4:	000830cd 	.word	0x000830cd
   833d8:	00083179 	.word	0x00083179
   833dc:	000831f5 	.word	0x000831f5

000833e0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   833e0:	b590      	push	{r4, r7, lr}
   833e2:	b087      	sub	sp, #28
   833e4:	af02      	add	r7, sp, #8
   833e6:	60f8      	str	r0, [r7, #12]
   833e8:	60b9      	str	r1, [r7, #8]
   833ea:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   833ec:	687b      	ldr	r3, [r7, #4]
   833ee:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   833f2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   833f6:	d02e      	beq.n	83456 <pio_configure_pin_group+0x76>
   833f8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   833fc:	d806      	bhi.n	8340c <pio_configure_pin_group+0x2c>
   833fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83402:	d00a      	beq.n	8341a <pio_configure_pin_group+0x3a>
   83404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83408:	d016      	beq.n	83438 <pio_configure_pin_group+0x58>
   8340a:	e04c      	b.n	834a6 <pio_configure_pin_group+0xc6>
   8340c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83410:	d027      	beq.n	83462 <pio_configure_pin_group+0x82>
   83412:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83416:	d024      	beq.n	83462 <pio_configure_pin_group+0x82>
   83418:	e045      	b.n	834a6 <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8341a:	68f8      	ldr	r0, [r7, #12]
   8341c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83420:	68ba      	ldr	r2, [r7, #8]
   83422:	4b24      	ldr	r3, [pc, #144]	; (834b4 <pio_configure_pin_group+0xd4>)
   83424:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   83426:	687b      	ldr	r3, [r7, #4]
   83428:	f003 0301 	and.w	r3, r3, #1
   8342c:	68f8      	ldr	r0, [r7, #12]
   8342e:	68b9      	ldr	r1, [r7, #8]
   83430:	461a      	mov	r2, r3
   83432:	4b21      	ldr	r3, [pc, #132]	; (834b8 <pio_configure_pin_group+0xd8>)
   83434:	4798      	blx	r3
		break;
   83436:	e038      	b.n	834aa <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   83438:	68f8      	ldr	r0, [r7, #12]
   8343a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8343e:	68ba      	ldr	r2, [r7, #8]
   83440:	4b1c      	ldr	r3, [pc, #112]	; (834b4 <pio_configure_pin_group+0xd4>)
   83442:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   83444:	687b      	ldr	r3, [r7, #4]
   83446:	f003 0301 	and.w	r3, r3, #1
   8344a:	68f8      	ldr	r0, [r7, #12]
   8344c:	68b9      	ldr	r1, [r7, #8]
   8344e:	461a      	mov	r2, r3
   83450:	4b19      	ldr	r3, [pc, #100]	; (834b8 <pio_configure_pin_group+0xd8>)
   83452:	4798      	blx	r3
		break;
   83454:	e029      	b.n	834aa <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   83456:	68f8      	ldr	r0, [r7, #12]
   83458:	68b9      	ldr	r1, [r7, #8]
   8345a:	687a      	ldr	r2, [r7, #4]
   8345c:	4b17      	ldr	r3, [pc, #92]	; (834bc <pio_configure_pin_group+0xdc>)
   8345e:	4798      	blx	r3
		break;
   83460:	e023      	b.n	834aa <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83462:	687b      	ldr	r3, [r7, #4]
   83464:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83468:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8346c:	bf0c      	ite	eq
   8346e:	2301      	moveq	r3, #1
   83470:	2300      	movne	r3, #0
   83472:	b2db      	uxtb	r3, r3
   83474:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   83476:	687b      	ldr	r3, [r7, #4]
   83478:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8347c:	2b00      	cmp	r3, #0
   8347e:	bf14      	ite	ne
   83480:	2301      	movne	r3, #1
   83482:	2300      	moveq	r3, #0
   83484:	b2db      	uxtb	r3, r3
   83486:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   83488:	687b      	ldr	r3, [r7, #4]
   8348a:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8348e:	2b00      	cmp	r3, #0
   83490:	bf14      	ite	ne
   83492:	2301      	movne	r3, #1
   83494:	2300      	moveq	r3, #0
   83496:	b2db      	uxtb	r3, r3
   83498:	9300      	str	r3, [sp, #0]
   8349a:	68f8      	ldr	r0, [r7, #12]
   8349c:	68b9      	ldr	r1, [r7, #8]
   8349e:	4623      	mov	r3, r4
   834a0:	4c07      	ldr	r4, [pc, #28]	; (834c0 <pio_configure_pin_group+0xe0>)
   834a2:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   834a4:	e001      	b.n	834aa <pio_configure_pin_group+0xca>

	default:
		return 0;
   834a6:	2300      	movs	r3, #0
   834a8:	e000      	b.n	834ac <pio_configure_pin_group+0xcc>
	}

	return 1;
   834aa:	2301      	movs	r3, #1
}
   834ac:	4618      	mov	r0, r3
   834ae:	3714      	adds	r7, #20
   834b0:	46bd      	mov	sp, r7
   834b2:	bd90      	pop	{r4, r7, pc}
   834b4:	000830f9 	.word	0x000830f9
   834b8:	000830cd 	.word	0x000830cd
   834bc:	00083179 	.word	0x00083179
   834c0:	000831f5 	.word	0x000831f5

000834c4 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   834c4:	b480      	push	{r7}
   834c6:	b085      	sub	sp, #20
   834c8:	af00      	add	r7, sp, #0
   834ca:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   834cc:	687b      	ldr	r3, [r7, #4]
   834ce:	095b      	lsrs	r3, r3, #5
   834d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   834d4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   834d8:	025b      	lsls	r3, r3, #9
   834da:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   834dc:	68fb      	ldr	r3, [r7, #12]
}
   834de:	4618      	mov	r0, r3
   834e0:	3714      	adds	r7, #20
   834e2:	46bd      	mov	sp, r7
   834e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   834e8:	4770      	bx	lr
   834ea:	bf00      	nop

000834ec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   834ec:	b580      	push	{r7, lr}
   834ee:	b084      	sub	sp, #16
   834f0:	af00      	add	r7, sp, #0
   834f2:	6078      	str	r0, [r7, #4]
   834f4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   834f6:	6878      	ldr	r0, [r7, #4]
   834f8:	4b24      	ldr	r3, [pc, #144]	; (8358c <pio_handler_process+0xa0>)
   834fa:	4798      	blx	r3
   834fc:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   834fe:	6878      	ldr	r0, [r7, #4]
   83500:	4b23      	ldr	r3, [pc, #140]	; (83590 <pio_handler_process+0xa4>)
   83502:	4798      	blx	r3
   83504:	4602      	mov	r2, r0
   83506:	68fb      	ldr	r3, [r7, #12]
   83508:	4013      	ands	r3, r2
   8350a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   8350c:	68fb      	ldr	r3, [r7, #12]
   8350e:	2b00      	cmp	r3, #0
   83510:	d038      	beq.n	83584 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
   83512:	2300      	movs	r3, #0
   83514:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   83516:	e032      	b.n	8357e <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83518:	4a1e      	ldr	r2, [pc, #120]	; (83594 <pio_handler_process+0xa8>)
   8351a:	68bb      	ldr	r3, [r7, #8]
   8351c:	011b      	lsls	r3, r3, #4
   8351e:	4413      	add	r3, r2
   83520:	681a      	ldr	r2, [r3, #0]
   83522:	683b      	ldr	r3, [r7, #0]
   83524:	429a      	cmp	r2, r3
   83526:	d123      	bne.n	83570 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83528:	4a1a      	ldr	r2, [pc, #104]	; (83594 <pio_handler_process+0xa8>)
   8352a:	68bb      	ldr	r3, [r7, #8]
   8352c:	011b      	lsls	r3, r3, #4
   8352e:	4413      	add	r3, r2
   83530:	685a      	ldr	r2, [r3, #4]
   83532:	68fb      	ldr	r3, [r7, #12]
   83534:	4013      	ands	r3, r2
   83536:	2b00      	cmp	r3, #0
   83538:	d01a      	beq.n	83570 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8353a:	4a16      	ldr	r2, [pc, #88]	; (83594 <pio_handler_process+0xa8>)
   8353c:	68bb      	ldr	r3, [r7, #8]
   8353e:	011b      	lsls	r3, r3, #4
   83540:	4413      	add	r3, r2
   83542:	3308      	adds	r3, #8
   83544:	685b      	ldr	r3, [r3, #4]
   83546:	4913      	ldr	r1, [pc, #76]	; (83594 <pio_handler_process+0xa8>)
   83548:	68ba      	ldr	r2, [r7, #8]
   8354a:	0112      	lsls	r2, r2, #4
   8354c:	440a      	add	r2, r1
   8354e:	6810      	ldr	r0, [r2, #0]
   83550:	4910      	ldr	r1, [pc, #64]	; (83594 <pio_handler_process+0xa8>)
   83552:	68ba      	ldr	r2, [r7, #8]
   83554:	0112      	lsls	r2, r2, #4
   83556:	440a      	add	r2, r1
   83558:	6852      	ldr	r2, [r2, #4]
   8355a:	4611      	mov	r1, r2
   8355c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8355e:	4a0d      	ldr	r2, [pc, #52]	; (83594 <pio_handler_process+0xa8>)
   83560:	68bb      	ldr	r3, [r7, #8]
   83562:	011b      	lsls	r3, r3, #4
   83564:	4413      	add	r3, r2
   83566:	685b      	ldr	r3, [r3, #4]
   83568:	43db      	mvns	r3, r3
   8356a:	68fa      	ldr	r2, [r7, #12]
   8356c:	4013      	ands	r3, r2
   8356e:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   83570:	68bb      	ldr	r3, [r7, #8]
   83572:	3301      	adds	r3, #1
   83574:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   83576:	68bb      	ldr	r3, [r7, #8]
   83578:	2b06      	cmp	r3, #6
   8357a:	d900      	bls.n	8357e <pio_handler_process+0x92>
				break;
   8357c:	e002      	b.n	83584 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8357e:	68fb      	ldr	r3, [r7, #12]
   83580:	2b00      	cmp	r3, #0
   83582:	d1c9      	bne.n	83518 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   83584:	3710      	adds	r7, #16
   83586:	46bd      	mov	sp, r7
   83588:	bd80      	pop	{r7, pc}
   8358a:	bf00      	nop
   8358c:	00083275 	.word	0x00083275
   83590:	0008328d 	.word	0x0008328d
   83594:	20070778 	.word	0x20070778

00083598 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83598:	b580      	push	{r7, lr}
   8359a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   8359c:	4802      	ldr	r0, [pc, #8]	; (835a8 <PIOA_Handler+0x10>)
   8359e:	210b      	movs	r1, #11
   835a0:	4b02      	ldr	r3, [pc, #8]	; (835ac <PIOA_Handler+0x14>)
   835a2:	4798      	blx	r3
}
   835a4:	bd80      	pop	{r7, pc}
   835a6:	bf00      	nop
   835a8:	400e0e00 	.word	0x400e0e00
   835ac:	000834ed 	.word	0x000834ed

000835b0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   835b0:	b580      	push	{r7, lr}
   835b2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   835b4:	4802      	ldr	r0, [pc, #8]	; (835c0 <PIOB_Handler+0x10>)
   835b6:	210c      	movs	r1, #12
   835b8:	4b02      	ldr	r3, [pc, #8]	; (835c4 <PIOB_Handler+0x14>)
   835ba:	4798      	blx	r3
}
   835bc:	bd80      	pop	{r7, pc}
   835be:	bf00      	nop
   835c0:	400e1000 	.word	0x400e1000
   835c4:	000834ed 	.word	0x000834ed

000835c8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   835c8:	b580      	push	{r7, lr}
   835ca:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   835cc:	4802      	ldr	r0, [pc, #8]	; (835d8 <PIOC_Handler+0x10>)
   835ce:	210d      	movs	r1, #13
   835d0:	4b02      	ldr	r3, [pc, #8]	; (835dc <PIOC_Handler+0x14>)
   835d2:	4798      	blx	r3
}
   835d4:	bd80      	pop	{r7, pc}
   835d6:	bf00      	nop
   835d8:	400e1200 	.word	0x400e1200
   835dc:	000834ed 	.word	0x000834ed

000835e0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   835e0:	b580      	push	{r7, lr}
   835e2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   835e4:	4802      	ldr	r0, [pc, #8]	; (835f0 <PIOD_Handler+0x10>)
   835e6:	210e      	movs	r1, #14
   835e8:	4b02      	ldr	r3, [pc, #8]	; (835f4 <PIOD_Handler+0x14>)
   835ea:	4798      	blx	r3
}
   835ec:	bd80      	pop	{r7, pc}
   835ee:	bf00      	nop
   835f0:	400e1400 	.word	0x400e1400
   835f4:	000834ed 	.word	0x000834ed

000835f8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   835f8:	b480      	push	{r7}
   835fa:	b085      	sub	sp, #20
   835fc:	af00      	add	r7, sp, #0
   835fe:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83600:	491d      	ldr	r1, [pc, #116]	; (83678 <pmc_switch_mck_to_pllack+0x80>)
   83602:	4b1d      	ldr	r3, [pc, #116]	; (83678 <pmc_switch_mck_to_pllack+0x80>)
   83604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   8360a:	687b      	ldr	r3, [r7, #4]
   8360c:	4313      	orrs	r3, r2
   8360e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83610:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83614:	60fb      	str	r3, [r7, #12]
   83616:	e007      	b.n	83628 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83618:	68fb      	ldr	r3, [r7, #12]
   8361a:	2b00      	cmp	r3, #0
   8361c:	d101      	bne.n	83622 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8361e:	2301      	movs	r3, #1
   83620:	e023      	b.n	8366a <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   83622:	68fb      	ldr	r3, [r7, #12]
   83624:	3b01      	subs	r3, #1
   83626:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83628:	4b13      	ldr	r3, [pc, #76]	; (83678 <pmc_switch_mck_to_pllack+0x80>)
   8362a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8362c:	f003 0308 	and.w	r3, r3, #8
   83630:	2b00      	cmp	r3, #0
   83632:	d0f1      	beq.n	83618 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83634:	4a10      	ldr	r2, [pc, #64]	; (83678 <pmc_switch_mck_to_pllack+0x80>)
   83636:	4b10      	ldr	r3, [pc, #64]	; (83678 <pmc_switch_mck_to_pllack+0x80>)
   83638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8363a:	f023 0303 	bic.w	r3, r3, #3
   8363e:	f043 0302 	orr.w	r3, r3, #2
   83642:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83644:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83648:	60fb      	str	r3, [r7, #12]
   8364a:	e007      	b.n	8365c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8364c:	68fb      	ldr	r3, [r7, #12]
   8364e:	2b00      	cmp	r3, #0
   83650:	d101      	bne.n	83656 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   83652:	2301      	movs	r3, #1
   83654:	e009      	b.n	8366a <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   83656:	68fb      	ldr	r3, [r7, #12]
   83658:	3b01      	subs	r3, #1
   8365a:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8365c:	4b06      	ldr	r3, [pc, #24]	; (83678 <pmc_switch_mck_to_pllack+0x80>)
   8365e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83660:	f003 0308 	and.w	r3, r3, #8
   83664:	2b00      	cmp	r3, #0
   83666:	d0f1      	beq.n	8364c <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   83668:	2300      	movs	r3, #0
}
   8366a:	4618      	mov	r0, r3
   8366c:	3714      	adds	r7, #20
   8366e:	46bd      	mov	sp, r7
   83670:	f85d 7b04 	ldr.w	r7, [sp], #4
   83674:	4770      	bx	lr
   83676:	bf00      	nop
   83678:	400e0600 	.word	0x400e0600

0008367c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   8367c:	b480      	push	{r7}
   8367e:	b083      	sub	sp, #12
   83680:	af00      	add	r7, sp, #0
   83682:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83684:	687b      	ldr	r3, [r7, #4]
   83686:	2b01      	cmp	r3, #1
   83688:	d107      	bne.n	8369a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   8368a:	4a08      	ldr	r2, [pc, #32]	; (836ac <pmc_switch_sclk_to_32kxtal+0x30>)
   8368c:	4b07      	ldr	r3, [pc, #28]	; (836ac <pmc_switch_sclk_to_32kxtal+0x30>)
   8368e:	689b      	ldr	r3, [r3, #8]
   83690:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83698:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   8369a:	4b04      	ldr	r3, [pc, #16]	; (836ac <pmc_switch_sclk_to_32kxtal+0x30>)
   8369c:	4a04      	ldr	r2, [pc, #16]	; (836b0 <pmc_switch_sclk_to_32kxtal+0x34>)
   8369e:	601a      	str	r2, [r3, #0]
}
   836a0:	370c      	adds	r7, #12
   836a2:	46bd      	mov	sp, r7
   836a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   836a8:	4770      	bx	lr
   836aa:	bf00      	nop
   836ac:	400e1a10 	.word	0x400e1a10
   836b0:	a5000008 	.word	0xa5000008

000836b4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   836b4:	b480      	push	{r7}
   836b6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   836b8:	4b09      	ldr	r3, [pc, #36]	; (836e0 <pmc_osc_is_ready_32kxtal+0x2c>)
   836ba:	695b      	ldr	r3, [r3, #20]
   836bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   836c0:	2b00      	cmp	r3, #0
   836c2:	d007      	beq.n	836d4 <pmc_osc_is_ready_32kxtal+0x20>
   836c4:	4b07      	ldr	r3, [pc, #28]	; (836e4 <pmc_osc_is_ready_32kxtal+0x30>)
   836c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   836c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   836cc:	2b00      	cmp	r3, #0
   836ce:	d001      	beq.n	836d4 <pmc_osc_is_ready_32kxtal+0x20>
   836d0:	2301      	movs	r3, #1
   836d2:	e000      	b.n	836d6 <pmc_osc_is_ready_32kxtal+0x22>
   836d4:	2300      	movs	r3, #0
}
   836d6:	4618      	mov	r0, r3
   836d8:	46bd      	mov	sp, r7
   836da:	f85d 7b04 	ldr.w	r7, [sp], #4
   836de:	4770      	bx	lr
   836e0:	400e1a10 	.word	0x400e1a10
   836e4:	400e0600 	.word	0x400e0600

000836e8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   836e8:	b480      	push	{r7}
   836ea:	b083      	sub	sp, #12
   836ec:	af00      	add	r7, sp, #0
   836ee:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   836f0:	4a18      	ldr	r2, [pc, #96]	; (83754 <pmc_switch_mainck_to_fastrc+0x6c>)
   836f2:	4b18      	ldr	r3, [pc, #96]	; (83754 <pmc_switch_mainck_to_fastrc+0x6c>)
   836f4:	6a1b      	ldr	r3, [r3, #32]
   836f6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   836fa:	f043 0308 	orr.w	r3, r3, #8
   836fe:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83700:	bf00      	nop
   83702:	4b14      	ldr	r3, [pc, #80]	; (83754 <pmc_switch_mainck_to_fastrc+0x6c>)
   83704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8370a:	2b00      	cmp	r3, #0
   8370c:	d0f9      	beq.n	83702 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8370e:	4911      	ldr	r1, [pc, #68]	; (83754 <pmc_switch_mainck_to_fastrc+0x6c>)
   83710:	4b10      	ldr	r3, [pc, #64]	; (83754 <pmc_switch_mainck_to_fastrc+0x6c>)
   83712:	6a1b      	ldr	r3, [r3, #32]
   83714:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   8371c:	687a      	ldr	r2, [r7, #4]
   8371e:	4313      	orrs	r3, r2
   83720:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83724:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83726:	bf00      	nop
   83728:	4b0a      	ldr	r3, [pc, #40]	; (83754 <pmc_switch_mainck_to_fastrc+0x6c>)
   8372a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8372c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83730:	2b00      	cmp	r3, #0
   83732:	d0f9      	beq.n	83728 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   83734:	4a07      	ldr	r2, [pc, #28]	; (83754 <pmc_switch_mainck_to_fastrc+0x6c>)
   83736:	4b07      	ldr	r3, [pc, #28]	; (83754 <pmc_switch_mainck_to_fastrc+0x6c>)
   83738:	6a1b      	ldr	r3, [r3, #32]
   8373a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8373e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83742:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83746:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   83748:	370c      	adds	r7, #12
   8374a:	46bd      	mov	sp, r7
   8374c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83750:	4770      	bx	lr
   83752:	bf00      	nop
   83754:	400e0600 	.word	0x400e0600

00083758 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   83758:	b480      	push	{r7}
   8375a:	b083      	sub	sp, #12
   8375c:	af00      	add	r7, sp, #0
   8375e:	6078      	str	r0, [r7, #4]
   83760:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83762:	687b      	ldr	r3, [r7, #4]
   83764:	2b00      	cmp	r3, #0
   83766:	d008      	beq.n	8377a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83768:	4916      	ldr	r1, [pc, #88]	; (837c4 <pmc_switch_mainck_to_xtal+0x6c>)
   8376a:	4b16      	ldr	r3, [pc, #88]	; (837c4 <pmc_switch_mainck_to_xtal+0x6c>)
   8376c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8376e:	4a16      	ldr	r2, [pc, #88]	; (837c8 <pmc_switch_mainck_to_xtal+0x70>)
   83770:	401a      	ands	r2, r3
   83772:	4b16      	ldr	r3, [pc, #88]	; (837cc <pmc_switch_mainck_to_xtal+0x74>)
   83774:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83776:	620b      	str	r3, [r1, #32]
   83778:	e01e      	b.n	837b8 <pmc_switch_mainck_to_xtal+0x60>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8377a:	4912      	ldr	r1, [pc, #72]	; (837c4 <pmc_switch_mainck_to_xtal+0x6c>)
   8377c:	4b11      	ldr	r3, [pc, #68]	; (837c4 <pmc_switch_mainck_to_xtal+0x6c>)
   8377e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83780:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83784:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83788:	683a      	ldr	r2, [r7, #0]
   8378a:	0212      	lsls	r2, r2, #8
   8378c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8378e:	4313      	orrs	r3, r2
   83790:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83794:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83798:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8379a:	bf00      	nop
   8379c:	4b09      	ldr	r3, [pc, #36]	; (837c4 <pmc_switch_mainck_to_xtal+0x6c>)
   8379e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   837a0:	f003 0301 	and.w	r3, r3, #1
   837a4:	2b00      	cmp	r3, #0
   837a6:	d0f9      	beq.n	8379c <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   837a8:	4a06      	ldr	r2, [pc, #24]	; (837c4 <pmc_switch_mainck_to_xtal+0x6c>)
   837aa:	4b06      	ldr	r3, [pc, #24]	; (837c4 <pmc_switch_mainck_to_xtal+0x6c>)
   837ac:	6a1b      	ldr	r3, [r3, #32]
   837ae:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   837b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   837b6:	6213      	str	r3, [r2, #32]
	}
}
   837b8:	370c      	adds	r7, #12
   837ba:	46bd      	mov	sp, r7
   837bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   837c0:	4770      	bx	lr
   837c2:	bf00      	nop
   837c4:	400e0600 	.word	0x400e0600
   837c8:	fec8fffc 	.word	0xfec8fffc
   837cc:	01370002 	.word	0x01370002

000837d0 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   837d0:	b480      	push	{r7}
   837d2:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   837d4:	4b04      	ldr	r3, [pc, #16]	; (837e8 <pmc_osc_is_ready_mainck+0x18>)
   837d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   837d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   837dc:	4618      	mov	r0, r3
   837de:	46bd      	mov	sp, r7
   837e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   837e4:	4770      	bx	lr
   837e6:	bf00      	nop
   837e8:	400e0600 	.word	0x400e0600

000837ec <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   837ec:	b480      	push	{r7}
   837ee:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   837f0:	4b03      	ldr	r3, [pc, #12]	; (83800 <pmc_disable_pllack+0x14>)
   837f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   837f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   837f8:	46bd      	mov	sp, r7
   837fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   837fe:	4770      	bx	lr
   83800:	400e0600 	.word	0x400e0600

00083804 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83804:	b480      	push	{r7}
   83806:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83808:	4b04      	ldr	r3, [pc, #16]	; (8381c <pmc_is_locked_pllack+0x18>)
   8380a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8380c:	f003 0302 	and.w	r3, r3, #2
}
   83810:	4618      	mov	r0, r3
   83812:	46bd      	mov	sp, r7
   83814:	f85d 7b04 	ldr.w	r7, [sp], #4
   83818:	4770      	bx	lr
   8381a:	bf00      	nop
   8381c:	400e0600 	.word	0x400e0600

00083820 <pmc_enable_upll_clock>:
#if (SAM3XA || SAM3U || SAMV71 || SAMV70 || SAME70 || SAMS70)
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
   83820:	b480      	push	{r7}
   83822:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   83824:	4b07      	ldr	r3, [pc, #28]	; (83844 <pmc_enable_upll_clock+0x24>)
   83826:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   8382a:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   8382c:	bf00      	nop
   8382e:	4b05      	ldr	r3, [pc, #20]	; (83844 <pmc_enable_upll_clock+0x24>)
   83830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83832:	f003 0340 	and.w	r3, r3, #64	; 0x40
   83836:	2b00      	cmp	r3, #0
   83838:	d0f9      	beq.n	8382e <pmc_enable_upll_clock+0xe>
}
   8383a:	46bd      	mov	sp, r7
   8383c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83840:	4770      	bx	lr
   83842:	bf00      	nop
   83844:	400e0600 	.word	0x400e0600

00083848 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   83848:	b480      	push	{r7}
   8384a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   8384c:	4b04      	ldr	r3, [pc, #16]	; (83860 <pmc_is_locked_upll+0x18>)
   8384e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83850:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83854:	4618      	mov	r0, r3
   83856:	46bd      	mov	sp, r7
   83858:	f85d 7b04 	ldr.w	r7, [sp], #4
   8385c:	4770      	bx	lr
   8385e:	bf00      	nop
   83860:	400e0600 	.word	0x400e0600

00083864 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83864:	b480      	push	{r7}
   83866:	b083      	sub	sp, #12
   83868:	af00      	add	r7, sp, #0
   8386a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   8386c:	687b      	ldr	r3, [r7, #4]
   8386e:	2b2c      	cmp	r3, #44	; 0x2c
   83870:	d901      	bls.n	83876 <pmc_enable_periph_clk+0x12>
		return 1;
   83872:	2301      	movs	r3, #1
   83874:	e02f      	b.n	838d6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   83876:	687b      	ldr	r3, [r7, #4]
   83878:	2b1f      	cmp	r3, #31
   8387a:	d813      	bhi.n	838a4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8387c:	4b19      	ldr	r3, [pc, #100]	; (838e4 <pmc_enable_periph_clk+0x80>)
   8387e:	699a      	ldr	r2, [r3, #24]
   83880:	687b      	ldr	r3, [r7, #4]
   83882:	2101      	movs	r1, #1
   83884:	fa01 f303 	lsl.w	r3, r1, r3
   83888:	401a      	ands	r2, r3
   8388a:	687b      	ldr	r3, [r7, #4]
   8388c:	2101      	movs	r1, #1
   8388e:	fa01 f303 	lsl.w	r3, r1, r3
   83892:	429a      	cmp	r2, r3
   83894:	d01e      	beq.n	838d4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   83896:	4a13      	ldr	r2, [pc, #76]	; (838e4 <pmc_enable_periph_clk+0x80>)
   83898:	687b      	ldr	r3, [r7, #4]
   8389a:	2101      	movs	r1, #1
   8389c:	fa01 f303 	lsl.w	r3, r1, r3
   838a0:	6113      	str	r3, [r2, #16]
   838a2:	e017      	b.n	838d4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   838a4:	687b      	ldr	r3, [r7, #4]
   838a6:	3b20      	subs	r3, #32
   838a8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   838aa:	4b0e      	ldr	r3, [pc, #56]	; (838e4 <pmc_enable_periph_clk+0x80>)
   838ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   838b0:	687b      	ldr	r3, [r7, #4]
   838b2:	2101      	movs	r1, #1
   838b4:	fa01 f303 	lsl.w	r3, r1, r3
   838b8:	401a      	ands	r2, r3
   838ba:	687b      	ldr	r3, [r7, #4]
   838bc:	2101      	movs	r1, #1
   838be:	fa01 f303 	lsl.w	r3, r1, r3
   838c2:	429a      	cmp	r2, r3
   838c4:	d006      	beq.n	838d4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   838c6:	4a07      	ldr	r2, [pc, #28]	; (838e4 <pmc_enable_periph_clk+0x80>)
   838c8:	687b      	ldr	r3, [r7, #4]
   838ca:	2101      	movs	r1, #1
   838cc:	fa01 f303 	lsl.w	r3, r1, r3
   838d0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   838d4:	2300      	movs	r3, #0
}
   838d6:	4618      	mov	r0, r3
   838d8:	370c      	adds	r7, #12
   838da:	46bd      	mov	sp, r7
   838dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   838e0:	4770      	bx	lr
   838e2:	bf00      	nop
   838e4:	400e0600 	.word	0x400e0600

000838e8 <pmc_switch_udpck_to_upllck>:
 * \brief Switch UDP (USB) clock source selection to UPLL clock.
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
   838e8:	b480      	push	{r7}
   838ea:	b083      	sub	sp, #12
   838ec:	af00      	add	r7, sp, #0
   838ee:	6078      	str	r0, [r7, #4]
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   838f0:	4a06      	ldr	r2, [pc, #24]	; (8390c <pmc_switch_udpck_to_upllck+0x24>)
   838f2:	687b      	ldr	r3, [r7, #4]
   838f4:	021b      	lsls	r3, r3, #8
   838f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   838fa:	f043 0301 	orr.w	r3, r3, #1
   838fe:	6393      	str	r3, [r2, #56]	; 0x38
}
   83900:	370c      	adds	r7, #12
   83902:	46bd      	mov	sp, r7
   83904:	f85d 7b04 	ldr.w	r7, [sp], #4
   83908:	4770      	bx	lr
   8390a:	bf00      	nop
   8390c:	400e0600 	.word	0x400e0600

00083910 <pmc_enable_udpck>:
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
/**
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
   83910:	b480      	push	{r7}
   83912:	af00      	add	r7, sp, #0
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
#else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   83914:	4b03      	ldr	r3, [pc, #12]	; (83924 <pmc_enable_udpck+0x14>)
   83916:	2220      	movs	r2, #32
   83918:	601a      	str	r2, [r3, #0]
# endif
}
   8391a:	46bd      	mov	sp, r7
   8391c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83920:	4770      	bx	lr
   83922:	bf00      	nop
   83924:	400e0600 	.word	0x400e0600

00083928 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   83928:	b480      	push	{r7}
   8392a:	b083      	sub	sp, #12
   8392c:	af00      	add	r7, sp, #0
   8392e:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   83930:	687b      	ldr	r3, [r7, #4]
   83932:	f3c3 0312 	ubfx	r3, r3, #0, #19
   83936:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   83938:	4905      	ldr	r1, [pc, #20]	; (83950 <pmc_set_fast_startup_input+0x28>)
   8393a:	4b05      	ldr	r3, [pc, #20]	; (83950 <pmc_set_fast_startup_input+0x28>)
   8393c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8393e:	687b      	ldr	r3, [r7, #4]
   83940:	4313      	orrs	r3, r2
   83942:	670b      	str	r3, [r1, #112]	; 0x70
}
   83944:	370c      	adds	r7, #12
   83946:	46bd      	mov	sp, r7
   83948:	f85d 7b04 	ldr.w	r7, [sp], #4
   8394c:	4770      	bx	lr
   8394e:	bf00      	nop
   83950:	400e0600 	.word	0x400e0600

00083954 <pmc_is_wakeup_clocks_restored>:
#endif
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
   83954:	b480      	push	{r7}
   83956:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   83958:	4b09      	ldr	r3, [pc, #36]	; (83980 <pmc_is_wakeup_clocks_restored+0x2c>)
   8395a:	781b      	ldrb	r3, [r3, #0]
   8395c:	b2db      	uxtb	r3, r3
   8395e:	2b00      	cmp	r3, #0
   83960:	bf14      	ite	ne
   83962:	2301      	movne	r3, #1
   83964:	2300      	moveq	r3, #0
   83966:	b2db      	uxtb	r3, r3
   83968:	f083 0301 	eor.w	r3, r3, #1
   8396c:	b2db      	uxtb	r3, r3
   8396e:	f003 0301 	and.w	r3, r3, #1
   83972:	b2db      	uxtb	r3, r3
}
   83974:	4618      	mov	r0, r3
   83976:	46bd      	mov	sp, r7
   83978:	f85d 7b04 	ldr.w	r7, [sp], #4
   8397c:	4770      	bx	lr
   8397e:	bf00      	nop
   83980:	200707e8 	.word	0x200707e8

00083984 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83984:	b480      	push	{r7}
   83986:	af00      	add	r7, sp, #0

	while (1) {
	}
   83988:	e7fe      	b.n	83988 <Dummy_Handler+0x4>
   8398a:	bf00      	nop

0008398c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8398c:	b580      	push	{r7, lr}
   8398e:	b082      	sub	sp, #8
   83990:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83992:	4b1e      	ldr	r3, [pc, #120]	; (83a0c <Reset_Handler+0x80>)
   83994:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83996:	4b1e      	ldr	r3, [pc, #120]	; (83a10 <Reset_Handler+0x84>)
   83998:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8399a:	687a      	ldr	r2, [r7, #4]
   8399c:	683b      	ldr	r3, [r7, #0]
   8399e:	429a      	cmp	r2, r3
   839a0:	d00c      	beq.n	839bc <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   839a2:	e007      	b.n	839b4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   839a4:	683b      	ldr	r3, [r7, #0]
   839a6:	1d1a      	adds	r2, r3, #4
   839a8:	603a      	str	r2, [r7, #0]
   839aa:	687a      	ldr	r2, [r7, #4]
   839ac:	1d11      	adds	r1, r2, #4
   839ae:	6079      	str	r1, [r7, #4]
   839b0:	6812      	ldr	r2, [r2, #0]
   839b2:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   839b4:	683b      	ldr	r3, [r7, #0]
   839b6:	4a17      	ldr	r2, [pc, #92]	; (83a14 <Reset_Handler+0x88>)
   839b8:	4293      	cmp	r3, r2
   839ba:	d3f3      	bcc.n	839a4 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   839bc:	4b16      	ldr	r3, [pc, #88]	; (83a18 <Reset_Handler+0x8c>)
   839be:	603b      	str	r3, [r7, #0]
   839c0:	e004      	b.n	839cc <Reset_Handler+0x40>
		*pDest++ = 0;
   839c2:	683b      	ldr	r3, [r7, #0]
   839c4:	1d1a      	adds	r2, r3, #4
   839c6:	603a      	str	r2, [r7, #0]
   839c8:	2200      	movs	r2, #0
   839ca:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   839cc:	683b      	ldr	r3, [r7, #0]
   839ce:	4a13      	ldr	r2, [pc, #76]	; (83a1c <Reset_Handler+0x90>)
   839d0:	4293      	cmp	r3, r2
   839d2:	d3f6      	bcc.n	839c2 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   839d4:	4b12      	ldr	r3, [pc, #72]	; (83a20 <Reset_Handler+0x94>)
   839d6:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   839d8:	4a12      	ldr	r2, [pc, #72]	; (83a24 <Reset_Handler+0x98>)
   839da:	687b      	ldr	r3, [r7, #4]
   839dc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   839e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   839e4:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   839e6:	687b      	ldr	r3, [r7, #4]
   839e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   839ec:	d309      	bcc.n	83a02 <Reset_Handler+0x76>
   839ee:	687b      	ldr	r3, [r7, #4]
   839f0:	4a0d      	ldr	r2, [pc, #52]	; (83a28 <Reset_Handler+0x9c>)
   839f2:	4293      	cmp	r3, r2
   839f4:	d805      	bhi.n	83a02 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   839f6:	4a0b      	ldr	r2, [pc, #44]	; (83a24 <Reset_Handler+0x98>)
   839f8:	4b0a      	ldr	r3, [pc, #40]	; (83a24 <Reset_Handler+0x98>)
   839fa:	689b      	ldr	r3, [r3, #8]
   839fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83a00:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83a02:	4b0a      	ldr	r3, [pc, #40]	; (83a2c <Reset_Handler+0xa0>)
   83a04:	4798      	blx	r3

	/* Branch to main function */
	main();
   83a06:	4b0a      	ldr	r3, [pc, #40]	; (83a30 <Reset_Handler+0xa4>)
   83a08:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   83a0a:	e7fe      	b.n	83a0a <Reset_Handler+0x7e>
   83a0c:	00084388 	.word	0x00084388
   83a10:	20070000 	.word	0x20070000
   83a14:	20070700 	.word	0x20070700
   83a18:	20070700 	.word	0x20070700
   83a1c:	20070884 	.word	0x20070884
   83a20:	00080000 	.word	0x00080000
   83a24:	e000ed00 	.word	0xe000ed00
   83a28:	200fffff 	.word	0x200fffff
   83a2c:	00083f99 	.word	0x00083f99
   83a30:	00083dfd 	.word	0x00083dfd

00083a34 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83a34:	b480      	push	{r7}
   83a36:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83a38:	4b56      	ldr	r3, [pc, #344]	; (83b94 <SystemCoreClockUpdate+0x160>)
   83a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83a3c:	f003 0303 	and.w	r3, r3, #3
   83a40:	2b03      	cmp	r3, #3
   83a42:	f200 808a 	bhi.w	83b5a <SystemCoreClockUpdate+0x126>
   83a46:	a201      	add	r2, pc, #4	; (adr r2, 83a4c <SystemCoreClockUpdate+0x18>)
   83a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83a4c:	00083a5d 	.word	0x00083a5d
   83a50:	00083a7d 	.word	0x00083a7d
   83a54:	00083acd 	.word	0x00083acd
   83a58:	00083acd 	.word	0x00083acd
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83a5c:	4b4e      	ldr	r3, [pc, #312]	; (83b98 <SystemCoreClockUpdate+0x164>)
   83a5e:	695b      	ldr	r3, [r3, #20]
   83a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83a64:	2b00      	cmp	r3, #0
   83a66:	d004      	beq.n	83a72 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83a68:	4b4c      	ldr	r3, [pc, #304]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83a6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83a6e:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83a70:	e073      	b.n	83b5a <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83a72:	4b4a      	ldr	r3, [pc, #296]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83a74:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83a78:	601a      	str	r2, [r3, #0]
		}
		break;
   83a7a:	e06e      	b.n	83b5a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83a7c:	4b45      	ldr	r3, [pc, #276]	; (83b94 <SystemCoreClockUpdate+0x160>)
   83a7e:	6a1b      	ldr	r3, [r3, #32]
   83a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83a84:	2b00      	cmp	r3, #0
   83a86:	d003      	beq.n	83a90 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83a88:	4b44      	ldr	r3, [pc, #272]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83a8a:	4a45      	ldr	r2, [pc, #276]	; (83ba0 <SystemCoreClockUpdate+0x16c>)
   83a8c:	601a      	str	r2, [r3, #0]
   83a8e:	e01c      	b.n	83aca <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83a90:	4b42      	ldr	r3, [pc, #264]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83a92:	4a44      	ldr	r2, [pc, #272]	; (83ba4 <SystemCoreClockUpdate+0x170>)
   83a94:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83a96:	4b3f      	ldr	r3, [pc, #252]	; (83b94 <SystemCoreClockUpdate+0x160>)
   83a98:	6a1b      	ldr	r3, [r3, #32]
   83a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83a9e:	2b10      	cmp	r3, #16
   83aa0:	d004      	beq.n	83aac <SystemCoreClockUpdate+0x78>
   83aa2:	2b20      	cmp	r3, #32
   83aa4:	d008      	beq.n	83ab8 <SystemCoreClockUpdate+0x84>
   83aa6:	2b00      	cmp	r3, #0
   83aa8:	d00e      	beq.n	83ac8 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   83aaa:	e00e      	b.n	83aca <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83aac:	4b3b      	ldr	r3, [pc, #236]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83aae:	681b      	ldr	r3, [r3, #0]
   83ab0:	005b      	lsls	r3, r3, #1
   83ab2:	4a3a      	ldr	r2, [pc, #232]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83ab4:	6013      	str	r3, [r2, #0]
				break;
   83ab6:	e008      	b.n	83aca <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83ab8:	4b38      	ldr	r3, [pc, #224]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83aba:	681a      	ldr	r2, [r3, #0]
   83abc:	4613      	mov	r3, r2
   83abe:	005b      	lsls	r3, r3, #1
   83ac0:	4413      	add	r3, r2
   83ac2:	4a36      	ldr	r2, [pc, #216]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83ac4:	6013      	str	r3, [r2, #0]
				break;
   83ac6:	e000      	b.n	83aca <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   83ac8:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   83aca:	e046      	b.n	83b5a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83acc:	4b31      	ldr	r3, [pc, #196]	; (83b94 <SystemCoreClockUpdate+0x160>)
   83ace:	6a1b      	ldr	r3, [r3, #32]
   83ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83ad4:	2b00      	cmp	r3, #0
   83ad6:	d003      	beq.n	83ae0 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83ad8:	4b30      	ldr	r3, [pc, #192]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83ada:	4a31      	ldr	r2, [pc, #196]	; (83ba0 <SystemCoreClockUpdate+0x16c>)
   83adc:	601a      	str	r2, [r3, #0]
   83ade:	e01c      	b.n	83b1a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83ae0:	4b2e      	ldr	r3, [pc, #184]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83ae2:	4a30      	ldr	r2, [pc, #192]	; (83ba4 <SystemCoreClockUpdate+0x170>)
   83ae4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83ae6:	4b2b      	ldr	r3, [pc, #172]	; (83b94 <SystemCoreClockUpdate+0x160>)
   83ae8:	6a1b      	ldr	r3, [r3, #32]
   83aea:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83aee:	2b10      	cmp	r3, #16
   83af0:	d004      	beq.n	83afc <SystemCoreClockUpdate+0xc8>
   83af2:	2b20      	cmp	r3, #32
   83af4:	d008      	beq.n	83b08 <SystemCoreClockUpdate+0xd4>
   83af6:	2b00      	cmp	r3, #0
   83af8:	d00e      	beq.n	83b18 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   83afa:	e00e      	b.n	83b1a <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83afc:	4b27      	ldr	r3, [pc, #156]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83afe:	681b      	ldr	r3, [r3, #0]
   83b00:	005b      	lsls	r3, r3, #1
   83b02:	4a26      	ldr	r2, [pc, #152]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83b04:	6013      	str	r3, [r2, #0]
				break;
   83b06:	e008      	b.n	83b1a <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83b08:	4b24      	ldr	r3, [pc, #144]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83b0a:	681a      	ldr	r2, [r3, #0]
   83b0c:	4613      	mov	r3, r2
   83b0e:	005b      	lsls	r3, r3, #1
   83b10:	4413      	add	r3, r2
   83b12:	4a22      	ldr	r2, [pc, #136]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83b14:	6013      	str	r3, [r2, #0]
				break;
   83b16:	e000      	b.n	83b1a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   83b18:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83b1a:	4b1e      	ldr	r3, [pc, #120]	; (83b94 <SystemCoreClockUpdate+0x160>)
   83b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b1e:	f003 0303 	and.w	r3, r3, #3
   83b22:	2b02      	cmp	r3, #2
   83b24:	d115      	bne.n	83b52 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83b26:	4b1b      	ldr	r3, [pc, #108]	; (83b94 <SystemCoreClockUpdate+0x160>)
   83b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   83b2a:	4b1f      	ldr	r3, [pc, #124]	; (83ba8 <SystemCoreClockUpdate+0x174>)
   83b2c:	4013      	ands	r3, r2
   83b2e:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   83b30:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83b32:	4a1a      	ldr	r2, [pc, #104]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83b34:	6812      	ldr	r2, [r2, #0]
   83b36:	fb02 f303 	mul.w	r3, r2, r3
   83b3a:	4a18      	ldr	r2, [pc, #96]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83b3c:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83b3e:	4b15      	ldr	r3, [pc, #84]	; (83b94 <SystemCoreClockUpdate+0x160>)
   83b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83b42:	b2db      	uxtb	r3, r3
   83b44:	4a15      	ldr	r2, [pc, #84]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83b46:	6812      	ldr	r2, [r2, #0]
   83b48:	fbb2 f3f3 	udiv	r3, r2, r3
   83b4c:	4a13      	ldr	r2, [pc, #76]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83b4e:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   83b50:	e002      	b.n	83b58 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83b52:	4b12      	ldr	r3, [pc, #72]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83b54:	4a15      	ldr	r2, [pc, #84]	; (83bac <SystemCoreClockUpdate+0x178>)
   83b56:	601a      	str	r2, [r3, #0]
		}
		break;
   83b58:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83b5a:	4b0e      	ldr	r3, [pc, #56]	; (83b94 <SystemCoreClockUpdate+0x160>)
   83b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83b62:	2b70      	cmp	r3, #112	; 0x70
   83b64:	d108      	bne.n	83b78 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   83b66:	4b0d      	ldr	r3, [pc, #52]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83b68:	681b      	ldr	r3, [r3, #0]
   83b6a:	4a11      	ldr	r2, [pc, #68]	; (83bb0 <SystemCoreClockUpdate+0x17c>)
   83b6c:	fba2 2303 	umull	r2, r3, r2, r3
   83b70:	085b      	lsrs	r3, r3, #1
   83b72:	4a0a      	ldr	r2, [pc, #40]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83b74:	6013      	str	r3, [r2, #0]
   83b76:	e009      	b.n	83b8c <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83b78:	4b06      	ldr	r3, [pc, #24]	; (83b94 <SystemCoreClockUpdate+0x160>)
   83b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83b80:	091a      	lsrs	r2, r3, #4
   83b82:	4b06      	ldr	r3, [pc, #24]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83b84:	681b      	ldr	r3, [r3, #0]
   83b86:	40d3      	lsrs	r3, r2
   83b88:	4a04      	ldr	r2, [pc, #16]	; (83b9c <SystemCoreClockUpdate+0x168>)
   83b8a:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   83b8c:	46bd      	mov	sp, r7
   83b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83b92:	4770      	bx	lr
   83b94:	400e0600 	.word	0x400e0600
   83b98:	400e1a10 	.word	0x400e1a10
   83b9c:	2007026c 	.word	0x2007026c
   83ba0:	00b71b00 	.word	0x00b71b00
   83ba4:	003d0900 	.word	0x003d0900
   83ba8:	07ff0000 	.word	0x07ff0000
   83bac:	0e4e1c00 	.word	0x0e4e1c00
   83bb0:	aaaaaaab 	.word	0xaaaaaaab

00083bb4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   83bb4:	b580      	push	{r7, lr}
   83bb6:	b082      	sub	sp, #8
   83bb8:	af00      	add	r7, sp, #0
   83bba:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   83bbc:	6878      	ldr	r0, [r7, #4]
   83bbe:	4b02      	ldr	r3, [pc, #8]	; (83bc8 <sysclk_enable_peripheral_clock+0x14>)
   83bc0:	4798      	blx	r3
}
   83bc2:	3708      	adds	r7, #8
   83bc4:	46bd      	mov	sp, r7
   83bc6:	bd80      	pop	{r7, pc}
   83bc8:	00083865 	.word	0x00083865

00083bcc <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   83bcc:	b580      	push	{r7, lr}
   83bce:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   83bd0:	200b      	movs	r0, #11
   83bd2:	4b06      	ldr	r3, [pc, #24]	; (83bec <ioport_init+0x20>)
   83bd4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   83bd6:	200c      	movs	r0, #12
   83bd8:	4b04      	ldr	r3, [pc, #16]	; (83bec <ioport_init+0x20>)
   83bda:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   83bdc:	200d      	movs	r0, #13
   83bde:	4b03      	ldr	r3, [pc, #12]	; (83bec <ioport_init+0x20>)
   83be0:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   83be2:	200e      	movs	r0, #14
   83be4:	4b01      	ldr	r3, [pc, #4]	; (83bec <ioport_init+0x20>)
   83be6:	4798      	blx	r3
	arch_ioport_init();
}
   83be8:	bd80      	pop	{r7, pc}
   83bea:	bf00      	nop
   83bec:	00083bb5 	.word	0x00083bb5

00083bf0 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
   83bf0:	b480      	push	{r7}
   83bf2:	b08d      	sub	sp, #52	; 0x34
   83bf4:	af00      	add	r7, sp, #0
   83bf6:	6078      	str	r0, [r7, #4]
   83bf8:	460b      	mov	r3, r1
   83bfa:	70fb      	strb	r3, [r7, #3]
   83bfc:	687b      	ldr	r3, [r7, #4]
   83bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   83c00:	78fb      	ldrb	r3, [r7, #3]
   83c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   83c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83c08:	627b      	str	r3, [r7, #36]	; 0x24
   83c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83c0c:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   83c0e:	6a3b      	ldr	r3, [r7, #32]
   83c10:	095b      	lsrs	r3, r3, #5
   83c12:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83c14:	69fb      	ldr	r3, [r7, #28]
   83c16:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83c1a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83c1e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   83c20:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
   83c22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83c26:	2b01      	cmp	r3, #1
   83c28:	d109      	bne.n	83c3e <ioport_set_pin_dir+0x4e>
   83c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83c2c:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83c2e:	697b      	ldr	r3, [r7, #20]
   83c30:	f003 031f 	and.w	r3, r3, #31
   83c34:	2201      	movs	r2, #1
   83c36:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83c38:	69bb      	ldr	r3, [r7, #24]
   83c3a:	611a      	str	r2, [r3, #16]
   83c3c:	e00c      	b.n	83c58 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   83c3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83c42:	2b00      	cmp	r3, #0
   83c44:	d108      	bne.n	83c58 <ioport_set_pin_dir+0x68>
   83c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83c48:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83c4a:	693b      	ldr	r3, [r7, #16]
   83c4c:	f003 031f 	and.w	r3, r3, #31
   83c50:	2201      	movs	r2, #1
   83c52:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   83c54:	69bb      	ldr	r3, [r7, #24]
   83c56:	615a      	str	r2, [r3, #20]
   83c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83c5a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83c5c:	68fb      	ldr	r3, [r7, #12]
   83c5e:	f003 031f 	and.w	r3, r3, #31
   83c62:	2201      	movs	r2, #1
   83c64:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83c66:	69bb      	ldr	r3, [r7, #24]
   83c68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
   83c6c:	3734      	adds	r7, #52	; 0x34
   83c6e:	46bd      	mov	sp, r7
   83c70:	f85d 7b04 	ldr.w	r7, [sp], #4
   83c74:	4770      	bx	lr
   83c76:	bf00      	nop

00083c78 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   83c78:	b480      	push	{r7}
   83c7a:	b08b      	sub	sp, #44	; 0x2c
   83c7c:	af00      	add	r7, sp, #0
   83c7e:	6078      	str	r0, [r7, #4]
   83c80:	460b      	mov	r3, r1
   83c82:	70fb      	strb	r3, [r7, #3]
   83c84:	687b      	ldr	r3, [r7, #4]
   83c86:	627b      	str	r3, [r7, #36]	; 0x24
   83c88:	78fb      	ldrb	r3, [r7, #3]
   83c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   83c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83c90:	61fb      	str	r3, [r7, #28]
   83c92:	69fb      	ldr	r3, [r7, #28]
   83c94:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   83c96:	69bb      	ldr	r3, [r7, #24]
   83c98:	095b      	lsrs	r3, r3, #5
   83c9a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83c9c:	697b      	ldr	r3, [r7, #20]
   83c9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83ca2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83ca6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   83ca8:	613b      	str	r3, [r7, #16]

	if (level) {
   83caa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83cae:	2b00      	cmp	r3, #0
   83cb0:	d009      	beq.n	83cc6 <ioport_set_pin_level+0x4e>
   83cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83cb4:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83cb6:	68fb      	ldr	r3, [r7, #12]
   83cb8:	f003 031f 	and.w	r3, r3, #31
   83cbc:	2201      	movs	r2, #1
   83cbe:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   83cc0:	693b      	ldr	r3, [r7, #16]
   83cc2:	631a      	str	r2, [r3, #48]	; 0x30
   83cc4:	e008      	b.n	83cd8 <ioport_set_pin_level+0x60>
   83cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83cc8:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83cca:	68bb      	ldr	r3, [r7, #8]
   83ccc:	f003 031f 	and.w	r3, r3, #31
   83cd0:	2201      	movs	r2, #1
   83cd2:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83cd4:	693b      	ldr	r3, [r7, #16]
   83cd6:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
   83cd8:	372c      	adds	r7, #44	; 0x2c
   83cda:	46bd      	mov	sp, r7
   83cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
   83ce0:	4770      	bx	lr
   83ce2:	bf00      	nop

00083ce4 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   83ce4:	b480      	push	{r7}
   83ce6:	b089      	sub	sp, #36	; 0x24
   83ce8:	af00      	add	r7, sp, #0
   83cea:	6078      	str	r0, [r7, #4]
   83cec:	687b      	ldr	r3, [r7, #4]
   83cee:	61fb      	str	r3, [r7, #28]
   83cf0:	69fb      	ldr	r3, [r7, #28]
   83cf2:	61bb      	str	r3, [r7, #24]
   83cf4:	69bb      	ldr	r3, [r7, #24]
   83cf6:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   83cf8:	697b      	ldr	r3, [r7, #20]
   83cfa:	095b      	lsrs	r3, r3, #5
   83cfc:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83cfe:	693b      	ldr	r3, [r7, #16]
   83d00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83d04:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83d08:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   83d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   83d0c:	69fb      	ldr	r3, [r7, #28]
   83d0e:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83d10:	68fb      	ldr	r3, [r7, #12]
   83d12:	f003 031f 	and.w	r3, r3, #31
   83d16:	2101      	movs	r1, #1
   83d18:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   83d1c:	4013      	ands	r3, r2
   83d1e:	2b00      	cmp	r3, #0
   83d20:	bf14      	ite	ne
   83d22:	2301      	movne	r3, #1
   83d24:	2300      	moveq	r3, #0
   83d26:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   83d28:	4618      	mov	r0, r3
   83d2a:	3724      	adds	r7, #36	; 0x24
   83d2c:	46bd      	mov	sp, r7
   83d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83d32:	4770      	bx	lr

00083d34 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   83d34:	b480      	push	{r7}
   83d36:	b083      	sub	sp, #12
   83d38:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   83d3a:	2300      	movs	r3, #0
   83d3c:	71fb      	strb	r3, [r7, #7]
   83d3e:	e006      	b.n	83d4e <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   83d40:	79fb      	ldrb	r3, [r7, #7]
   83d42:	4a08      	ldr	r2, [pc, #32]	; (83d64 <sleepmgr_init+0x30>)
   83d44:	2100      	movs	r1, #0
   83d46:	54d1      	strb	r1, [r2, r3]
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   83d48:	79fb      	ldrb	r3, [r7, #7]
   83d4a:	3301      	adds	r3, #1
   83d4c:	71fb      	strb	r3, [r7, #7]
   83d4e:	79fb      	ldrb	r3, [r7, #7]
   83d50:	2b04      	cmp	r3, #4
   83d52:	d9f5      	bls.n	83d40 <sleepmgr_init+0xc>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   83d54:	4b03      	ldr	r3, [pc, #12]	; (83d64 <sleepmgr_init+0x30>)
   83d56:	2201      	movs	r2, #1
   83d58:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   83d5a:	370c      	adds	r7, #12
   83d5c:	46bd      	mov	sp, r7
   83d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83d62:	4770      	bx	lr
   83d64:	20070864 	.word	0x20070864

00083d68 <keyboardEnableCallback>:
void pressKey(int pressedKey);
void releaseKey(int releasedKey);


bool keyboardEnableCallback(void)
{
   83d68:	b480      	push	{r7}
   83d6a:	af00      	add	r7, sp, #0
	keyboardEnabledFlag = true;
   83d6c:	4b04      	ldr	r3, [pc, #16]	; (83d80 <keyboardEnableCallback+0x18>)
   83d6e:	2201      	movs	r2, #1
   83d70:	701a      	strb	r2, [r3, #0]
	return true;
   83d72:	2301      	movs	r3, #1
}
   83d74:	4618      	mov	r0, r3
   83d76:	46bd      	mov	sp, r7
   83d78:	f85d 7b04 	ldr.w	r7, [sp], #4
   83d7c:	4770      	bx	lr
   83d7e:	bf00      	nop
   83d80:	200702d0 	.word	0x200702d0

00083d84 <keyboardDisableCallback>:

void keyboardDisableCallback(void)
{
   83d84:	b480      	push	{r7}
   83d86:	af00      	add	r7, sp, #0
	keyboardEnabledFlag = false;
   83d88:	4b03      	ldr	r3, [pc, #12]	; (83d98 <keyboardDisableCallback+0x14>)
   83d8a:	2200      	movs	r2, #0
   83d8c:	701a      	strb	r2, [r3, #0]
}
   83d8e:	46bd      	mov	sp, r7
   83d90:	f85d 7b04 	ldr.w	r7, [sp], #4
   83d94:	4770      	bx	lr
   83d96:	bf00      	nop
   83d98:	200702d0 	.word	0x200702d0

00083d9c <pressKey>:

void pressKey(int pressedKey)
{
   83d9c:	b580      	push	{r7, lr}
   83d9e:	b082      	sub	sp, #8
   83da0:	af00      	add	r7, sp, #0
   83da2:	6078      	str	r0, [r7, #4]
	if (!keyboardEnabledFlag) {
   83da4:	4b07      	ldr	r3, [pc, #28]	; (83dc4 <pressKey+0x28>)
   83da6:	781b      	ldrb	r3, [r3, #0]
   83da8:	f083 0301 	eor.w	r3, r3, #1
   83dac:	b2db      	uxtb	r3, r3
   83dae:	2b00      	cmp	r3, #0
   83db0:	d000      	beq.n	83db4 <pressKey+0x18>
		return;
   83db2:	e004      	b.n	83dbe <pressKey+0x22>
	}
	udi_hid_kbd_down(pressedKey);
   83db4:	687b      	ldr	r3, [r7, #4]
   83db6:	b2db      	uxtb	r3, r3
   83db8:	4618      	mov	r0, r3
   83dba:	4b03      	ldr	r3, [pc, #12]	; (83dc8 <pressKey+0x2c>)
   83dbc:	4798      	blx	r3
}
   83dbe:	3708      	adds	r7, #8
   83dc0:	46bd      	mov	sp, r7
   83dc2:	bd80      	pop	{r7, pc}
   83dc4:	200702d0 	.word	0x200702d0
   83dc8:	00080369 	.word	0x00080369

00083dcc <releaseKey>:

void releaseKey(int releasedKey)
{
   83dcc:	b580      	push	{r7, lr}
   83dce:	b082      	sub	sp, #8
   83dd0:	af00      	add	r7, sp, #0
   83dd2:	6078      	str	r0, [r7, #4]
	if ((!keyboardEnabledFlag)) {
   83dd4:	4b07      	ldr	r3, [pc, #28]	; (83df4 <releaseKey+0x28>)
   83dd6:	781b      	ldrb	r3, [r3, #0]
   83dd8:	f083 0301 	eor.w	r3, r3, #1
   83ddc:	b2db      	uxtb	r3, r3
   83dde:	2b00      	cmp	r3, #0
   83de0:	d000      	beq.n	83de4 <releaseKey+0x18>
		return;
   83de2:	e004      	b.n	83dee <releaseKey+0x22>
	}
	udi_hid_kbd_up(releasedKey);
   83de4:	687b      	ldr	r3, [r7, #4]
   83de6:	b2db      	uxtb	r3, r3
   83de8:	4618      	mov	r0, r3
   83dea:	4b03      	ldr	r3, [pc, #12]	; (83df8 <releaseKey+0x2c>)
   83dec:	4798      	blx	r3
}
   83dee:	3708      	adds	r7, #8
   83df0:	46bd      	mov	sp, r7
   83df2:	bd80      	pop	{r7, pc}
   83df4:	200702d0 	.word	0x200702d0
   83df8:	000802c5 	.word	0x000802c5

00083dfc <main>:

int main (void)
{
   83dfc:	b580      	push	{r7, lr}
   83dfe:	b088      	sub	sp, #32
   83e00:	af00      	add	r7, sp, #0
	/* Initialise the board */
	sysclk_init();
   83e02:	4b56      	ldr	r3, [pc, #344]	; (83f5c <main+0x160>)
   83e04:	4798      	blx	r3
	irq_initialize_vectors();
	cpu_irq_enable();
   83e06:	4b56      	ldr	r3, [pc, #344]	; (83f60 <main+0x164>)
   83e08:	2201      	movs	r2, #1
   83e0a:	701a      	strb	r2, [r3, #0]
   83e0c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   83e10:	b662      	cpsie	i
	board_init();
   83e12:	4b54      	ldr	r3, [pc, #336]	; (83f64 <main+0x168>)
   83e14:	4798      	blx	r3
	sleepmgr_init();
   83e16:	4b54      	ldr	r3, [pc, #336]	; (83f68 <main+0x16c>)
   83e18:	4798      	blx	r3
	board_init();
   83e1a:	4b52      	ldr	r3, [pc, #328]	; (83f64 <main+0x168>)
   83e1c:	4798      	blx	r3
	ioport_init();
   83e1e:	4b53      	ldr	r3, [pc, #332]	; (83f6c <main+0x170>)
   83e20:	4798      	blx	r3

	/* Main application code */
	

	//Start the USB HID service
	udc_start();
   83e22:	4b53      	ldr	r3, [pc, #332]	; (83f70 <main+0x174>)
   83e24:	4798      	blx	r3
	bool scanValue;
	while (1) 
	{
		/* This code updates the stateMap array */
		for (int rowPinOutput = 0; rowPinOutput <= ROWPINCOUNT; rowPinOutput++) 
   83e26:	2300      	movs	r3, #0
   83e28:	61fb      	str	r3, [r7, #28]
   83e2a:	e060      	b.n	83eee <main+0xf2>
		{
			for (int rowPin = 0; rowPin <= ROWPINCOUNT; rowPin++) 
   83e2c:	2300      	movs	r3, #0
   83e2e:	61bb      	str	r3, [r7, #24]
   83e30:	e00a      	b.n	83e48 <main+0x4c>
			{
				ioport_set_pin_dir(rowPins[rowPin], IOPORT_DIR_INPUT);
   83e32:	4a50      	ldr	r2, [pc, #320]	; (83f74 <main+0x178>)
   83e34:	69bb      	ldr	r3, [r7, #24]
   83e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   83e3a:	4618      	mov	r0, r3
   83e3c:	2100      	movs	r1, #0
   83e3e:	4b4e      	ldr	r3, [pc, #312]	; (83f78 <main+0x17c>)
   83e40:	4798      	blx	r3
	while (1) 
	{
		/* This code updates the stateMap array */
		for (int rowPinOutput = 0; rowPinOutput <= ROWPINCOUNT; rowPinOutput++) 
		{
			for (int rowPin = 0; rowPin <= ROWPINCOUNT; rowPin++) 
   83e42:	69bb      	ldr	r3, [r7, #24]
   83e44:	3301      	adds	r3, #1
   83e46:	61bb      	str	r3, [r7, #24]
   83e48:	220f      	movs	r2, #15
   83e4a:	69bb      	ldr	r3, [r7, #24]
   83e4c:	4293      	cmp	r3, r2
   83e4e:	ddf0      	ble.n	83e32 <main+0x36>
			{
				ioport_set_pin_dir(rowPins[rowPin], IOPORT_DIR_INPUT);
			}

			ioport_set_pin_dir(rowPins[rowPinOutput], IOPORT_DIR_OUTPUT);
   83e50:	4a48      	ldr	r2, [pc, #288]	; (83f74 <main+0x178>)
   83e52:	69fb      	ldr	r3, [r7, #28]
   83e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   83e58:	4618      	mov	r0, r3
   83e5a:	2101      	movs	r1, #1
   83e5c:	4b46      	ldr	r3, [pc, #280]	; (83f78 <main+0x17c>)
   83e5e:	4798      	blx	r3
			ioport_set_pin_level(rowPins[rowPinOutput], IOPORT_PIN_LEVEL_LOW);
   83e60:	4a44      	ldr	r2, [pc, #272]	; (83f74 <main+0x178>)
   83e62:	69fb      	ldr	r3, [r7, #28]
   83e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   83e68:	4618      	mov	r0, r3
   83e6a:	2100      	movs	r1, #0
   83e6c:	4b43      	ldr	r3, [pc, #268]	; (83f7c <main+0x180>)
   83e6e:	4798      	blx	r3

			for (int columnReadPin = 0; columnReadPin <= COLUMNPINCOUNT; columnReadPin++)
   83e70:	2300      	movs	r3, #0
   83e72:	617b      	str	r3, [r7, #20]
   83e74:	e034      	b.n	83ee0 <main+0xe4>
			{
				for (int columnPin = 0; columnPin <= COLUMNPINCOUNT; columnPin++)
   83e76:	2300      	movs	r3, #0
   83e78:	613b      	str	r3, [r7, #16]
   83e7a:	e00a      	b.n	83e92 <main+0x96>
				{
					ioport_set_pin_dir(columnPins[columnPin], IOPORT_DIR_INPUT);
   83e7c:	4a40      	ldr	r2, [pc, #256]	; (83f80 <main+0x184>)
   83e7e:	693b      	ldr	r3, [r7, #16]
   83e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   83e84:	4618      	mov	r0, r3
   83e86:	2100      	movs	r1, #0
   83e88:	4b3b      	ldr	r3, [pc, #236]	; (83f78 <main+0x17c>)
   83e8a:	4798      	blx	r3
			ioport_set_pin_dir(rowPins[rowPinOutput], IOPORT_DIR_OUTPUT);
			ioport_set_pin_level(rowPins[rowPinOutput], IOPORT_PIN_LEVEL_LOW);

			for (int columnReadPin = 0; columnReadPin <= COLUMNPINCOUNT; columnReadPin++)
			{
				for (int columnPin = 0; columnPin <= COLUMNPINCOUNT; columnPin++)
   83e8c:	693b      	ldr	r3, [r7, #16]
   83e8e:	3301      	adds	r3, #1
   83e90:	613b      	str	r3, [r7, #16]
   83e92:	2208      	movs	r2, #8
   83e94:	693b      	ldr	r3, [r7, #16]
   83e96:	4293      	cmp	r3, r2
   83e98:	ddf0      	ble.n	83e7c <main+0x80>
				{
					ioport_set_pin_dir(columnPins[columnPin], IOPORT_DIR_INPUT);
				}
				scanValue = ioport_get_pin_level(columnPins[columnReadPin]);
   83e9a:	4a39      	ldr	r2, [pc, #228]	; (83f80 <main+0x184>)
   83e9c:	697b      	ldr	r3, [r7, #20]
   83e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   83ea2:	4618      	mov	r0, r3
   83ea4:	4b37      	ldr	r3, [pc, #220]	; (83f84 <main+0x188>)
   83ea6:	4798      	blx	r3
   83ea8:	4603      	mov	r3, r0
   83eaa:	71fb      	strb	r3, [r7, #7]
				if (!scanValue) {
   83eac:	79fb      	ldrb	r3, [r7, #7]
   83eae:	f083 0301 	eor.w	r3, r3, #1
   83eb2:	b2db      	uxtb	r3, r3
   83eb4:	2b00      	cmp	r3, #0
   83eb6:	d008      	beq.n	83eca <main+0xce>
					stateMap[rowPinOutput][columnReadPin] = true;
   83eb8:	4933      	ldr	r1, [pc, #204]	; (83f88 <main+0x18c>)
   83eba:	69fb      	ldr	r3, [r7, #28]
   83ebc:	00da      	lsls	r2, r3, #3
   83ebe:	697b      	ldr	r3, [r7, #20]
   83ec0:	4413      	add	r3, r2
   83ec2:	440b      	add	r3, r1
   83ec4:	2201      	movs	r2, #1
   83ec6:	701a      	strb	r2, [r3, #0]
   83ec8:	e007      	b.n	83eda <main+0xde>
				} else {
					stateMap[rowPinOutput][columnReadPin] = false;
   83eca:	492f      	ldr	r1, [pc, #188]	; (83f88 <main+0x18c>)
   83ecc:	69fb      	ldr	r3, [r7, #28]
   83ece:	00da      	lsls	r2, r3, #3
   83ed0:	697b      	ldr	r3, [r7, #20]
   83ed2:	4413      	add	r3, r2
   83ed4:	440b      	add	r3, r1
   83ed6:	2200      	movs	r2, #0
   83ed8:	701a      	strb	r2, [r3, #0]
			}

			ioport_set_pin_dir(rowPins[rowPinOutput], IOPORT_DIR_OUTPUT);
			ioport_set_pin_level(rowPins[rowPinOutput], IOPORT_PIN_LEVEL_LOW);

			for (int columnReadPin = 0; columnReadPin <= COLUMNPINCOUNT; columnReadPin++)
   83eda:	697b      	ldr	r3, [r7, #20]
   83edc:	3301      	adds	r3, #1
   83ede:	617b      	str	r3, [r7, #20]
   83ee0:	2208      	movs	r2, #8
   83ee2:	697b      	ldr	r3, [r7, #20]
   83ee4:	4293      	cmp	r3, r2
   83ee6:	ddc6      	ble.n	83e76 <main+0x7a>
	udc_start();
	bool scanValue;
	while (1) 
	{
		/* This code updates the stateMap array */
		for (int rowPinOutput = 0; rowPinOutput <= ROWPINCOUNT; rowPinOutput++) 
   83ee8:	69fb      	ldr	r3, [r7, #28]
   83eea:	3301      	adds	r3, #1
   83eec:	61fb      	str	r3, [r7, #28]
   83eee:	220f      	movs	r2, #15
   83ef0:	69fb      	ldr	r3, [r7, #28]
   83ef2:	4293      	cmp	r3, r2
   83ef4:	dd9a      	ble.n	83e2c <main+0x30>
					stateMap[rowPinOutput][columnReadPin] = false;
				}
			}
		}
		
		for (int stateRow = 0; stateRow <= ROWPINCOUNT; stateRow++) {
   83ef6:	2300      	movs	r3, #0
   83ef8:	60fb      	str	r3, [r7, #12]
   83efa:	e02a      	b.n	83f52 <main+0x156>
			for (int stateColumn = 0; stateColumn <= COLUMNPINCOUNT; stateColumn++) {
   83efc:	2300      	movs	r3, #0
   83efe:	60bb      	str	r3, [r7, #8]
   83f00:	e020      	b.n	83f44 <main+0x148>
				if (stateMap[stateRow][stateColumn]) {
   83f02:	4921      	ldr	r1, [pc, #132]	; (83f88 <main+0x18c>)
   83f04:	68fb      	ldr	r3, [r7, #12]
   83f06:	00da      	lsls	r2, r3, #3
   83f08:	68bb      	ldr	r3, [r7, #8]
   83f0a:	4413      	add	r3, r2
   83f0c:	440b      	add	r3, r1
   83f0e:	781b      	ldrb	r3, [r3, #0]
   83f10:	2b00      	cmp	r3, #0
   83f12:	d00a      	beq.n	83f2a <main+0x12e>
					pressKey(keyMap[stateRow][stateColumn]);
   83f14:	491d      	ldr	r1, [pc, #116]	; (83f8c <main+0x190>)
   83f16:	68fb      	ldr	r3, [r7, #12]
   83f18:	00da      	lsls	r2, r3, #3
   83f1a:	68bb      	ldr	r3, [r7, #8]
   83f1c:	4413      	add	r3, r2
   83f1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   83f22:	4618      	mov	r0, r3
   83f24:	4b1a      	ldr	r3, [pc, #104]	; (83f90 <main+0x194>)
   83f26:	4798      	blx	r3
   83f28:	e009      	b.n	83f3e <main+0x142>
				} else {
					releaseKey(keyMap[stateRow][stateColumn]);
   83f2a:	4918      	ldr	r1, [pc, #96]	; (83f8c <main+0x190>)
   83f2c:	68fb      	ldr	r3, [r7, #12]
   83f2e:	00da      	lsls	r2, r3, #3
   83f30:	68bb      	ldr	r3, [r7, #8]
   83f32:	4413      	add	r3, r2
   83f34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   83f38:	4618      	mov	r0, r3
   83f3a:	4b16      	ldr	r3, [pc, #88]	; (83f94 <main+0x198>)
   83f3c:	4798      	blx	r3
				}
			}
		}
		
		for (int stateRow = 0; stateRow <= ROWPINCOUNT; stateRow++) {
			for (int stateColumn = 0; stateColumn <= COLUMNPINCOUNT; stateColumn++) {
   83f3e:	68bb      	ldr	r3, [r7, #8]
   83f40:	3301      	adds	r3, #1
   83f42:	60bb      	str	r3, [r7, #8]
   83f44:	2208      	movs	r2, #8
   83f46:	68bb      	ldr	r3, [r7, #8]
   83f48:	4293      	cmp	r3, r2
   83f4a:	ddda      	ble.n	83f02 <main+0x106>
					stateMap[rowPinOutput][columnReadPin] = false;
				}
			}
		}
		
		for (int stateRow = 0; stateRow <= ROWPINCOUNT; stateRow++) {
   83f4c:	68fb      	ldr	r3, [r7, #12]
   83f4e:	3301      	adds	r3, #1
   83f50:	60fb      	str	r3, [r7, #12]
   83f52:	220f      	movs	r2, #15
   83f54:	68fb      	ldr	r3, [r7, #12]
   83f56:	4293      	cmp	r3, r2
   83f58:	ddd0      	ble.n	83efc <main+0x100>
				} else {
					releaseKey(keyMap[stateRow][stateColumn]);
				}
			}
		}	
	}
   83f5a:	e764      	b.n	83e26 <main+0x2a>
   83f5c:	00082fa1 	.word	0x00082fa1
   83f60:	20070268 	.word	0x20070268
   83f64:	0008304d 	.word	0x0008304d
   83f68:	00083d35 	.word	0x00083d35
   83f6c:	00083bcd 	.word	0x00083bcd
   83f70:	00080721 	.word	0x00080721
   83f74:	20070270 	.word	0x20070270
   83f78:	00083bf1 	.word	0x00083bf1
   83f7c:	00083c79 	.word	0x00083c79
   83f80:	200702b0 	.word	0x200702b0
   83f84:	00083ce5 	.word	0x00083ce5
   83f88:	200707ec 	.word	0x200707ec
   83f8c:	0008417c 	.word	0x0008417c
   83f90:	00083d9d 	.word	0x00083d9d
   83f94:	00083dcd 	.word	0x00083dcd

00083f98 <__libc_init_array>:
   83f98:	b570      	push	{r4, r5, r6, lr}
   83f9a:	4e0f      	ldr	r6, [pc, #60]	; (83fd8 <__libc_init_array+0x40>)
   83f9c:	4d0f      	ldr	r5, [pc, #60]	; (83fdc <__libc_init_array+0x44>)
   83f9e:	1b76      	subs	r6, r6, r5
   83fa0:	10b6      	asrs	r6, r6, #2
   83fa2:	bf18      	it	ne
   83fa4:	2400      	movne	r4, #0
   83fa6:	d005      	beq.n	83fb4 <__libc_init_array+0x1c>
   83fa8:	3401      	adds	r4, #1
   83faa:	f855 3b04 	ldr.w	r3, [r5], #4
   83fae:	4798      	blx	r3
   83fb0:	42a6      	cmp	r6, r4
   83fb2:	d1f9      	bne.n	83fa8 <__libc_init_array+0x10>
   83fb4:	4e0a      	ldr	r6, [pc, #40]	; (83fe0 <__libc_init_array+0x48>)
   83fb6:	4d0b      	ldr	r5, [pc, #44]	; (83fe4 <__libc_init_array+0x4c>)
   83fb8:	f000 f9d4 	bl	84364 <_init>
   83fbc:	1b76      	subs	r6, r6, r5
   83fbe:	10b6      	asrs	r6, r6, #2
   83fc0:	bf18      	it	ne
   83fc2:	2400      	movne	r4, #0
   83fc4:	d006      	beq.n	83fd4 <__libc_init_array+0x3c>
   83fc6:	3401      	adds	r4, #1
   83fc8:	f855 3b04 	ldr.w	r3, [r5], #4
   83fcc:	4798      	blx	r3
   83fce:	42a6      	cmp	r6, r4
   83fd0:	d1f9      	bne.n	83fc6 <__libc_init_array+0x2e>
   83fd2:	bd70      	pop	{r4, r5, r6, pc}
   83fd4:	bd70      	pop	{r4, r5, r6, pc}
   83fd6:	bf00      	nop
   83fd8:	00084370 	.word	0x00084370
   83fdc:	00084370 	.word	0x00084370
   83fe0:	00084378 	.word	0x00084378
   83fe4:	00084370 	.word	0x00084370

00083fe8 <memset>:
   83fe8:	b470      	push	{r4, r5, r6}
   83fea:	0784      	lsls	r4, r0, #30
   83fec:	d046      	beq.n	8407c <memset+0x94>
   83fee:	1e54      	subs	r4, r2, #1
   83ff0:	2a00      	cmp	r2, #0
   83ff2:	d041      	beq.n	84078 <memset+0x90>
   83ff4:	b2cd      	uxtb	r5, r1
   83ff6:	4603      	mov	r3, r0
   83ff8:	e002      	b.n	84000 <memset+0x18>
   83ffa:	1e62      	subs	r2, r4, #1
   83ffc:	b3e4      	cbz	r4, 84078 <memset+0x90>
   83ffe:	4614      	mov	r4, r2
   84000:	f803 5b01 	strb.w	r5, [r3], #1
   84004:	079a      	lsls	r2, r3, #30
   84006:	d1f8      	bne.n	83ffa <memset+0x12>
   84008:	2c03      	cmp	r4, #3
   8400a:	d92e      	bls.n	8406a <memset+0x82>
   8400c:	b2cd      	uxtb	r5, r1
   8400e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   84012:	2c0f      	cmp	r4, #15
   84014:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   84018:	d919      	bls.n	8404e <memset+0x66>
   8401a:	4626      	mov	r6, r4
   8401c:	f103 0210 	add.w	r2, r3, #16
   84020:	3e10      	subs	r6, #16
   84022:	2e0f      	cmp	r6, #15
   84024:	f842 5c10 	str.w	r5, [r2, #-16]
   84028:	f842 5c0c 	str.w	r5, [r2, #-12]
   8402c:	f842 5c08 	str.w	r5, [r2, #-8]
   84030:	f842 5c04 	str.w	r5, [r2, #-4]
   84034:	f102 0210 	add.w	r2, r2, #16
   84038:	d8f2      	bhi.n	84020 <memset+0x38>
   8403a:	f1a4 0210 	sub.w	r2, r4, #16
   8403e:	f022 020f 	bic.w	r2, r2, #15
   84042:	f004 040f 	and.w	r4, r4, #15
   84046:	3210      	adds	r2, #16
   84048:	2c03      	cmp	r4, #3
   8404a:	4413      	add	r3, r2
   8404c:	d90d      	bls.n	8406a <memset+0x82>
   8404e:	461e      	mov	r6, r3
   84050:	4622      	mov	r2, r4
   84052:	3a04      	subs	r2, #4
   84054:	2a03      	cmp	r2, #3
   84056:	f846 5b04 	str.w	r5, [r6], #4
   8405a:	d8fa      	bhi.n	84052 <memset+0x6a>
   8405c:	1f22      	subs	r2, r4, #4
   8405e:	f022 0203 	bic.w	r2, r2, #3
   84062:	3204      	adds	r2, #4
   84064:	4413      	add	r3, r2
   84066:	f004 0403 	and.w	r4, r4, #3
   8406a:	b12c      	cbz	r4, 84078 <memset+0x90>
   8406c:	b2c9      	uxtb	r1, r1
   8406e:	441c      	add	r4, r3
   84070:	f803 1b01 	strb.w	r1, [r3], #1
   84074:	42a3      	cmp	r3, r4
   84076:	d1fb      	bne.n	84070 <memset+0x88>
   84078:	bc70      	pop	{r4, r5, r6}
   8407a:	4770      	bx	lr
   8407c:	4614      	mov	r4, r2
   8407e:	4603      	mov	r3, r0
   84080:	e7c2      	b.n	84008 <memset+0x20>
   84082:	bf00      	nop

00084084 <register_fini>:
   84084:	4b02      	ldr	r3, [pc, #8]	; (84090 <register_fini+0xc>)
   84086:	b113      	cbz	r3, 8408e <register_fini+0xa>
   84088:	4802      	ldr	r0, [pc, #8]	; (84094 <register_fini+0x10>)
   8408a:	f000 b805 	b.w	84098 <atexit>
   8408e:	4770      	bx	lr
   84090:	00000000 	.word	0x00000000
   84094:	000840a5 	.word	0x000840a5

00084098 <atexit>:
   84098:	4601      	mov	r1, r0
   8409a:	2000      	movs	r0, #0
   8409c:	4602      	mov	r2, r0
   8409e:	4603      	mov	r3, r0
   840a0:	f000 b816 	b.w	840d0 <__register_exitproc>

000840a4 <__libc_fini_array>:
   840a4:	b538      	push	{r3, r4, r5, lr}
   840a6:	4b08      	ldr	r3, [pc, #32]	; (840c8 <__libc_fini_array+0x24>)
   840a8:	4d08      	ldr	r5, [pc, #32]	; (840cc <__libc_fini_array+0x28>)
   840aa:	1aed      	subs	r5, r5, r3
   840ac:	10ac      	asrs	r4, r5, #2
   840ae:	bf18      	it	ne
   840b0:	18ed      	addne	r5, r5, r3
   840b2:	d005      	beq.n	840c0 <__libc_fini_array+0x1c>
   840b4:	3c01      	subs	r4, #1
   840b6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   840ba:	4798      	blx	r3
   840bc:	2c00      	cmp	r4, #0
   840be:	d1f9      	bne.n	840b4 <__libc_fini_array+0x10>
   840c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   840c4:	f000 b958 	b.w	84378 <_fini>
   840c8:	00084384 	.word	0x00084384
   840cc:	00084388 	.word	0x00084388

000840d0 <__register_exitproc>:
   840d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   840d4:	4c25      	ldr	r4, [pc, #148]	; (8416c <__register_exitproc+0x9c>)
   840d6:	4606      	mov	r6, r0
   840d8:	6825      	ldr	r5, [r4, #0]
   840da:	4688      	mov	r8, r1
   840dc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   840e0:	4692      	mov	sl, r2
   840e2:	4699      	mov	r9, r3
   840e4:	b3c4      	cbz	r4, 84158 <__register_exitproc+0x88>
   840e6:	6860      	ldr	r0, [r4, #4]
   840e8:	281f      	cmp	r0, #31
   840ea:	dc17      	bgt.n	8411c <__register_exitproc+0x4c>
   840ec:	1c41      	adds	r1, r0, #1
   840ee:	b176      	cbz	r6, 8410e <__register_exitproc+0x3e>
   840f0:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   840f4:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   840f8:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   840fc:	2201      	movs	r2, #1
   840fe:	4082      	lsls	r2, r0
   84100:	4315      	orrs	r5, r2
   84102:	2e02      	cmp	r6, #2
   84104:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   84108:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   8410c:	d01e      	beq.n	8414c <__register_exitproc+0x7c>
   8410e:	1c83      	adds	r3, r0, #2
   84110:	6061      	str	r1, [r4, #4]
   84112:	2000      	movs	r0, #0
   84114:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   84118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8411c:	4b14      	ldr	r3, [pc, #80]	; (84170 <__register_exitproc+0xa0>)
   8411e:	b303      	cbz	r3, 84162 <__register_exitproc+0x92>
   84120:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84124:	f3af 8000 	nop.w
   84128:	4604      	mov	r4, r0
   8412a:	b1d0      	cbz	r0, 84162 <__register_exitproc+0x92>
   8412c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   84130:	2700      	movs	r7, #0
   84132:	e884 0088 	stmia.w	r4, {r3, r7}
   84136:	4638      	mov	r0, r7
   84138:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   8413c:	2101      	movs	r1, #1
   8413e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   84142:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   84146:	2e00      	cmp	r6, #0
   84148:	d0e1      	beq.n	8410e <__register_exitproc+0x3e>
   8414a:	e7d1      	b.n	840f0 <__register_exitproc+0x20>
   8414c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84150:	431a      	orrs	r2, r3
   84152:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   84156:	e7da      	b.n	8410e <__register_exitproc+0x3e>
   84158:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   8415c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   84160:	e7c1      	b.n	840e6 <__register_exitproc+0x16>
   84162:	f04f 30ff 	mov.w	r0, #4294967295
   84166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8416a:	bf00      	nop
   8416c:	00084360 	.word	0x00084360
   84170:	00000000 	.word	0x00000000
   84174:	31303030 	.word	0x31303030
   84178:	00000000 	.word	0x00000000

0008417c <keyMap>:
	...
   841bc:	00000029 0000002b 00000000 0000001e     )...+...........
   841cc:	00000014 00000004 0000001d 00000000     ................
   841dc:	00000000 00000039 0000003a 0000001f     ....9...:.......
   841ec:	0000001a 00000016 0000001b 00000000     ................
   841fc:	0000003d 0000003c 0000003b 00000020     =...<...;... ...
   8420c:	00000008 00000007 00000006 00000000     ................
	...
   8435c:	00000043                                C...

00084360 <_global_impure_ptr>:
   84360:	200702d8                                ... 

00084364 <_init>:
   84364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84366:	bf00      	nop
   84368:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8436a:	bc08      	pop	{r3}
   8436c:	469e      	mov	lr, r3
   8436e:	4770      	bx	lr

00084370 <__init_array_start>:
   84370:	00084085 	.word	0x00084085

00084374 <__frame_dummy_init_array_entry>:
   84374:	00080119                                ....

00084378 <_fini>:
   84378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8437a:	bf00      	nop
   8437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8437e:	bc08      	pop	{r3}
   84380:	469e      	mov	lr, r3
   84382:	4770      	bx	lr

00084384 <__fini_array_start>:
   84384:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
__no_inline
RAMFUNC
void SystemInit(void)
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	46bd      	mov	sp, r7
200700aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	2007026c 	.word	0x2007026c
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
	}
}
20070166:	370c      	adds	r7, #12
20070168:	46bd      	mov	sp, r7
2007016a:	f85d 7b04 	ldr.w	r7, [sp], #4
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <udi_api_hid_kbd>:
2007018c:	000801d9 00080225 00080235 00080261     ....%...5...a...
2007019c:	00000000                                ....

200701a0 <udi_hid_kbd_report_desc>:
200701a0:	06090105 070501a1 e729e019 01250015     ..........)...%.
200701b0:	08950175 01810281 65290019 65250015     u.........)e..%e
200701c0:	06950875 08050081 05290119 01250015     u.........)...%.
200701d0:	05950175 03950291 00c00191              u...........

200701dc <udc_string_desc_languageid>:
200701dc:	04090304                                ....

200701e0 <udc_string_manufacturer_name>:
200701e0:	6977654c 6f502073 72657472 00000000     Lewis Porter....

200701f0 <udc_string_product_name>:
200701f0:	65646f4d 53554d6c 00000042              ModelMUSB...

200701fc <udc_string_desc>:
200701fc:	00000300 00000000 00000000 00000000     ................
	...

20070218 <udc_device_desc>:
20070218:	02000112 08000000 48256666 02010100     ........ff%H....
20070228:	00000103                                ....

2007022c <udc_desc>:
2007022c:	00220209 80000101 00040932 00030100     ..".....2.......
2007023c:	21090001 01000111 07003b22 08038105     ...!....";......
2007024c:	00000200                                ....

20070250 <udi_apis>:
20070250:	2007018c                                ... 

20070254 <udc_config_fshs>:
20070254:	2007022c 20070250                       ,.. P.. 

2007025c <udc_config>:
2007025c:	20070218 20070254 00000000              ... T.. ....

20070268 <g_interrupt_enabled>:
20070268:	00000001                                ....

2007026c <SystemCoreClock>:
2007026c:	003d0900                                ..=.

20070270 <rowPins>:
20070270:	0000003a 0000000e 0000000f 00000060     :...........`...
20070280:	00000061 00000062 00000063 00000066     a...b...c...f...
20070290:	00000069 00000007 0000006a 00000041     i.......j...A...
200702a0:	00000042 00000043 00000044 00000045     B...C...D...E...

200702b0 <columnPins>:
200702b0:	00000046 00000047 00000048 00000049     F...G...H...I...
200702c0:	00000013 00000014 00000053 00000052     ........S...R...

200702d0 <keyboardEnabledFlag>:
200702d0:	00000001 00000000                       ........

200702d8 <impure_data>:
200702d8:	00000000 200705c4 2007062c 20070694     ....... ,.. ... 
	...
2007030c:	0008435c 00000000 00000000 00000000     \C..............
	...
20070380:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070390:	0005deec 0000000b 00000000 00000000     ................
	...
